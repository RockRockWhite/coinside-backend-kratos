// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: card.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CardClient is the client API for Card service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CardClient interface {
	CreateCard(ctx context.Context, in *CreateCardRequest, opts ...grpc.CallOption) (*CreateCardResponse, error)
	CreateCardStream(ctx context.Context, opts ...grpc.CallOption) (Card_CreateCardStreamClient, error)
	GetCardInfo(ctx context.Context, in *GetCardInfoRequest, opts ...grpc.CallOption) (*GetCardInfoResponse, error)
	GetCardInfoStream(ctx context.Context, opts ...grpc.CallOption) (Card_GetCardInfoStreamClient, error)
	GetCardInfoList(ctx context.Context, in *GetCardInfoListRequest, opts ...grpc.CallOption) (*GetCardInfoListResponse, error)
	GetCardInfoListStream(ctx context.Context, opts ...grpc.CallOption) (Card_GetCardInfoListStreamClient, error)
	UpdateCardTitle(ctx context.Context, in *UpdateCardTitleRequest, opts ...grpc.CallOption) (*UpdateCardTitleResponse, error)
	UpdateCardTitleStream(ctx context.Context, opts ...grpc.CallOption) (Card_UpdateCardTitleStreamClient, error)
	UpdateCardContent(ctx context.Context, in *UpdateCardContentRequest, opts ...grpc.CallOption) (*UpdateCardContentResponse, error)
	UpdateCardContentStream(ctx context.Context, opts ...grpc.CallOption) (Card_UpdateCardContentStreamClient, error)
	DeleteCard(ctx context.Context, in *DeleteCardRequest, opts ...grpc.CallOption) (*DeleteCardResponse, error)
	DeleteCardStream(ctx context.Context, opts ...grpc.CallOption) (Card_DeleteCardStreamClient, error)
	AddCardTag(ctx context.Context, in *AddCardTagRequest, opts ...grpc.CallOption) (*AddCardTagResponse, error)
	AddCardTagStream(ctx context.Context, opts ...grpc.CallOption) (Card_AddCardTagStreamClient, error)
	DeleteCardTag(ctx context.Context, in *DeleteCardTagRequest, opts ...grpc.CallOption) (*DeleteCardTagResponse, error)
	DeleteCardTagStream(ctx context.Context, opts ...grpc.CallOption) (Card_DeleteCardTagStreamClient, error)
	SetCardMember(ctx context.Context, in *SetCardMemberRequest, opts ...grpc.CallOption) (*SetCardMemberResponse, error)
	SetCardMemberStream(ctx context.Context, opts ...grpc.CallOption) (Card_SetCardMemberStreamClient, error)
	DeleteCardMember(ctx context.Context, in *DeleteCardMemberRequest, opts ...grpc.CallOption) (*DeleteCardMemberResponse, error)
	DeleteCardMemberStream(ctx context.Context, opts ...grpc.CallOption) (Card_DeleteCardMemberStreamClient, error)
}

type cardClient struct {
	cc grpc.ClientConnInterface
}

func NewCardClient(cc grpc.ClientConnInterface) CardClient {
	return &cardClient{cc}
}

func (c *cardClient) CreateCard(ctx context.Context, in *CreateCardRequest, opts ...grpc.CallOption) (*CreateCardResponse, error) {
	out := new(CreateCardResponse)
	err := c.cc.Invoke(ctx, "/api.Card/CreateCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardClient) CreateCardStream(ctx context.Context, opts ...grpc.CallOption) (Card_CreateCardStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Card_ServiceDesc.Streams[0], "/api.Card/CreateCardStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &cardCreateCardStreamClient{stream}
	return x, nil
}

type Card_CreateCardStreamClient interface {
	Send(*CreateCardRequest) error
	CloseAndRecv() (*CreateCardResponse, error)
	grpc.ClientStream
}

type cardCreateCardStreamClient struct {
	grpc.ClientStream
}

func (x *cardCreateCardStreamClient) Send(m *CreateCardRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cardCreateCardStreamClient) CloseAndRecv() (*CreateCardResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(CreateCardResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cardClient) GetCardInfo(ctx context.Context, in *GetCardInfoRequest, opts ...grpc.CallOption) (*GetCardInfoResponse, error) {
	out := new(GetCardInfoResponse)
	err := c.cc.Invoke(ctx, "/api.Card/GetCardInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardClient) GetCardInfoStream(ctx context.Context, opts ...grpc.CallOption) (Card_GetCardInfoStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Card_ServiceDesc.Streams[1], "/api.Card/GetCardInfoStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &cardGetCardInfoStreamClient{stream}
	return x, nil
}

type Card_GetCardInfoStreamClient interface {
	Send(*GetCardInfoRequest) error
	CloseAndRecv() (*GetCardInfoResponse, error)
	grpc.ClientStream
}

type cardGetCardInfoStreamClient struct {
	grpc.ClientStream
}

func (x *cardGetCardInfoStreamClient) Send(m *GetCardInfoRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cardGetCardInfoStreamClient) CloseAndRecv() (*GetCardInfoResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(GetCardInfoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cardClient) GetCardInfoList(ctx context.Context, in *GetCardInfoListRequest, opts ...grpc.CallOption) (*GetCardInfoListResponse, error) {
	out := new(GetCardInfoListResponse)
	err := c.cc.Invoke(ctx, "/api.Card/GetCardInfoList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardClient) GetCardInfoListStream(ctx context.Context, opts ...grpc.CallOption) (Card_GetCardInfoListStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Card_ServiceDesc.Streams[2], "/api.Card/GetCardInfoListStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &cardGetCardInfoListStreamClient{stream}
	return x, nil
}

type Card_GetCardInfoListStreamClient interface {
	Send(*GetCardInfoListRequest) error
	CloseAndRecv() (*GetCardInfoListResponse, error)
	grpc.ClientStream
}

type cardGetCardInfoListStreamClient struct {
	grpc.ClientStream
}

func (x *cardGetCardInfoListStreamClient) Send(m *GetCardInfoListRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cardGetCardInfoListStreamClient) CloseAndRecv() (*GetCardInfoListResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(GetCardInfoListResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cardClient) UpdateCardTitle(ctx context.Context, in *UpdateCardTitleRequest, opts ...grpc.CallOption) (*UpdateCardTitleResponse, error) {
	out := new(UpdateCardTitleResponse)
	err := c.cc.Invoke(ctx, "/api.Card/UpdateCardTitle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardClient) UpdateCardTitleStream(ctx context.Context, opts ...grpc.CallOption) (Card_UpdateCardTitleStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Card_ServiceDesc.Streams[3], "/api.Card/UpdateCardTitleStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &cardUpdateCardTitleStreamClient{stream}
	return x, nil
}

type Card_UpdateCardTitleStreamClient interface {
	Send(*UpdateCardTitleRequest) error
	CloseAndRecv() (*UpdateCardTitleResponse, error)
	grpc.ClientStream
}

type cardUpdateCardTitleStreamClient struct {
	grpc.ClientStream
}

func (x *cardUpdateCardTitleStreamClient) Send(m *UpdateCardTitleRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cardUpdateCardTitleStreamClient) CloseAndRecv() (*UpdateCardTitleResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UpdateCardTitleResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cardClient) UpdateCardContent(ctx context.Context, in *UpdateCardContentRequest, opts ...grpc.CallOption) (*UpdateCardContentResponse, error) {
	out := new(UpdateCardContentResponse)
	err := c.cc.Invoke(ctx, "/api.Card/UpdateCardContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardClient) UpdateCardContentStream(ctx context.Context, opts ...grpc.CallOption) (Card_UpdateCardContentStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Card_ServiceDesc.Streams[4], "/api.Card/UpdateCardContentStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &cardUpdateCardContentStreamClient{stream}
	return x, nil
}

type Card_UpdateCardContentStreamClient interface {
	Send(*UpdateCardContentRequest) error
	CloseAndRecv() (*UpdateCardContentResponse, error)
	grpc.ClientStream
}

type cardUpdateCardContentStreamClient struct {
	grpc.ClientStream
}

func (x *cardUpdateCardContentStreamClient) Send(m *UpdateCardContentRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cardUpdateCardContentStreamClient) CloseAndRecv() (*UpdateCardContentResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UpdateCardContentResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cardClient) DeleteCard(ctx context.Context, in *DeleteCardRequest, opts ...grpc.CallOption) (*DeleteCardResponse, error) {
	out := new(DeleteCardResponse)
	err := c.cc.Invoke(ctx, "/api.Card/DeleteCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardClient) DeleteCardStream(ctx context.Context, opts ...grpc.CallOption) (Card_DeleteCardStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Card_ServiceDesc.Streams[5], "/api.Card/DeleteCardStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &cardDeleteCardStreamClient{stream}
	return x, nil
}

type Card_DeleteCardStreamClient interface {
	Send(*DeleteCardRequest) error
	CloseAndRecv() (*DeleteCardResponse, error)
	grpc.ClientStream
}

type cardDeleteCardStreamClient struct {
	grpc.ClientStream
}

func (x *cardDeleteCardStreamClient) Send(m *DeleteCardRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cardDeleteCardStreamClient) CloseAndRecv() (*DeleteCardResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(DeleteCardResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cardClient) AddCardTag(ctx context.Context, in *AddCardTagRequest, opts ...grpc.CallOption) (*AddCardTagResponse, error) {
	out := new(AddCardTagResponse)
	err := c.cc.Invoke(ctx, "/api.Card/AddCardTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardClient) AddCardTagStream(ctx context.Context, opts ...grpc.CallOption) (Card_AddCardTagStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Card_ServiceDesc.Streams[6], "/api.Card/AddCardTagStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &cardAddCardTagStreamClient{stream}
	return x, nil
}

type Card_AddCardTagStreamClient interface {
	Send(*AddCardTagRequest) error
	CloseAndRecv() (*AddCardTagResponse, error)
	grpc.ClientStream
}

type cardAddCardTagStreamClient struct {
	grpc.ClientStream
}

func (x *cardAddCardTagStreamClient) Send(m *AddCardTagRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cardAddCardTagStreamClient) CloseAndRecv() (*AddCardTagResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(AddCardTagResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cardClient) DeleteCardTag(ctx context.Context, in *DeleteCardTagRequest, opts ...grpc.CallOption) (*DeleteCardTagResponse, error) {
	out := new(DeleteCardTagResponse)
	err := c.cc.Invoke(ctx, "/api.Card/DeleteCardTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardClient) DeleteCardTagStream(ctx context.Context, opts ...grpc.CallOption) (Card_DeleteCardTagStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Card_ServiceDesc.Streams[7], "/api.Card/DeleteCardTagStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &cardDeleteCardTagStreamClient{stream}
	return x, nil
}

type Card_DeleteCardTagStreamClient interface {
	Send(*DeleteCardTagRequest) error
	CloseAndRecv() (*DeleteCardResponse, error)
	grpc.ClientStream
}

type cardDeleteCardTagStreamClient struct {
	grpc.ClientStream
}

func (x *cardDeleteCardTagStreamClient) Send(m *DeleteCardTagRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cardDeleteCardTagStreamClient) CloseAndRecv() (*DeleteCardResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(DeleteCardResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cardClient) SetCardMember(ctx context.Context, in *SetCardMemberRequest, opts ...grpc.CallOption) (*SetCardMemberResponse, error) {
	out := new(SetCardMemberResponse)
	err := c.cc.Invoke(ctx, "/api.Card/SetCardMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardClient) SetCardMemberStream(ctx context.Context, opts ...grpc.CallOption) (Card_SetCardMemberStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Card_ServiceDesc.Streams[8], "/api.Card/SetCardMemberStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &cardSetCardMemberStreamClient{stream}
	return x, nil
}

type Card_SetCardMemberStreamClient interface {
	Send(*SetCardMemberRequest) error
	CloseAndRecv() (*SetCardMemberResponse, error)
	grpc.ClientStream
}

type cardSetCardMemberStreamClient struct {
	grpc.ClientStream
}

func (x *cardSetCardMemberStreamClient) Send(m *SetCardMemberRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cardSetCardMemberStreamClient) CloseAndRecv() (*SetCardMemberResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SetCardMemberResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cardClient) DeleteCardMember(ctx context.Context, in *DeleteCardMemberRequest, opts ...grpc.CallOption) (*DeleteCardMemberResponse, error) {
	out := new(DeleteCardMemberResponse)
	err := c.cc.Invoke(ctx, "/api.Card/DeleteCardMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardClient) DeleteCardMemberStream(ctx context.Context, opts ...grpc.CallOption) (Card_DeleteCardMemberStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Card_ServiceDesc.Streams[9], "/api.Card/DeleteCardMemberStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &cardDeleteCardMemberStreamClient{stream}
	return x, nil
}

type Card_DeleteCardMemberStreamClient interface {
	Send(*DeleteCardMemberRequest) error
	CloseAndRecv() (*DeleteCardMemberResponse, error)
	grpc.ClientStream
}

type cardDeleteCardMemberStreamClient struct {
	grpc.ClientStream
}

func (x *cardDeleteCardMemberStreamClient) Send(m *DeleteCardMemberRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cardDeleteCardMemberStreamClient) CloseAndRecv() (*DeleteCardMemberResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(DeleteCardMemberResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CardServer is the server API for Card service.
// All implementations must embed UnimplementedCardServer
// for forward compatibility
type CardServer interface {
	CreateCard(context.Context, *CreateCardRequest) (*CreateCardResponse, error)
	CreateCardStream(Card_CreateCardStreamServer) error
	GetCardInfo(context.Context, *GetCardInfoRequest) (*GetCardInfoResponse, error)
	GetCardInfoStream(Card_GetCardInfoStreamServer) error
	GetCardInfoList(context.Context, *GetCardInfoListRequest) (*GetCardInfoListResponse, error)
	GetCardInfoListStream(Card_GetCardInfoListStreamServer) error
	UpdateCardTitle(context.Context, *UpdateCardTitleRequest) (*UpdateCardTitleResponse, error)
	UpdateCardTitleStream(Card_UpdateCardTitleStreamServer) error
	UpdateCardContent(context.Context, *UpdateCardContentRequest) (*UpdateCardContentResponse, error)
	UpdateCardContentStream(Card_UpdateCardContentStreamServer) error
	DeleteCard(context.Context, *DeleteCardRequest) (*DeleteCardResponse, error)
	DeleteCardStream(Card_DeleteCardStreamServer) error
	AddCardTag(context.Context, *AddCardTagRequest) (*AddCardTagResponse, error)
	AddCardTagStream(Card_AddCardTagStreamServer) error
	DeleteCardTag(context.Context, *DeleteCardTagRequest) (*DeleteCardTagResponse, error)
	DeleteCardTagStream(Card_DeleteCardTagStreamServer) error
	SetCardMember(context.Context, *SetCardMemberRequest) (*SetCardMemberResponse, error)
	SetCardMemberStream(Card_SetCardMemberStreamServer) error
	DeleteCardMember(context.Context, *DeleteCardMemberRequest) (*DeleteCardMemberResponse, error)
	DeleteCardMemberStream(Card_DeleteCardMemberStreamServer) error
	mustEmbedUnimplementedCardServer()
}

// UnimplementedCardServer must be embedded to have forward compatible implementations.
type UnimplementedCardServer struct {
}

func (UnimplementedCardServer) CreateCard(context.Context, *CreateCardRequest) (*CreateCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCard not implemented")
}
func (UnimplementedCardServer) CreateCardStream(Card_CreateCardStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateCardStream not implemented")
}
func (UnimplementedCardServer) GetCardInfo(context.Context, *GetCardInfoRequest) (*GetCardInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCardInfo not implemented")
}
func (UnimplementedCardServer) GetCardInfoStream(Card_GetCardInfoStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetCardInfoStream not implemented")
}
func (UnimplementedCardServer) GetCardInfoList(context.Context, *GetCardInfoListRequest) (*GetCardInfoListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCardInfoList not implemented")
}
func (UnimplementedCardServer) GetCardInfoListStream(Card_GetCardInfoListStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetCardInfoListStream not implemented")
}
func (UnimplementedCardServer) UpdateCardTitle(context.Context, *UpdateCardTitleRequest) (*UpdateCardTitleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCardTitle not implemented")
}
func (UnimplementedCardServer) UpdateCardTitleStream(Card_UpdateCardTitleStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method UpdateCardTitleStream not implemented")
}
func (UnimplementedCardServer) UpdateCardContent(context.Context, *UpdateCardContentRequest) (*UpdateCardContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCardContent not implemented")
}
func (UnimplementedCardServer) UpdateCardContentStream(Card_UpdateCardContentStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method UpdateCardContentStream not implemented")
}
func (UnimplementedCardServer) DeleteCard(context.Context, *DeleteCardRequest) (*DeleteCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCard not implemented")
}
func (UnimplementedCardServer) DeleteCardStream(Card_DeleteCardStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method DeleteCardStream not implemented")
}
func (UnimplementedCardServer) AddCardTag(context.Context, *AddCardTagRequest) (*AddCardTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCardTag not implemented")
}
func (UnimplementedCardServer) AddCardTagStream(Card_AddCardTagStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method AddCardTagStream not implemented")
}
func (UnimplementedCardServer) DeleteCardTag(context.Context, *DeleteCardTagRequest) (*DeleteCardTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCardTag not implemented")
}
func (UnimplementedCardServer) DeleteCardTagStream(Card_DeleteCardTagStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method DeleteCardTagStream not implemented")
}
func (UnimplementedCardServer) SetCardMember(context.Context, *SetCardMemberRequest) (*SetCardMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCardMember not implemented")
}
func (UnimplementedCardServer) SetCardMemberStream(Card_SetCardMemberStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SetCardMemberStream not implemented")
}
func (UnimplementedCardServer) DeleteCardMember(context.Context, *DeleteCardMemberRequest) (*DeleteCardMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCardMember not implemented")
}
func (UnimplementedCardServer) DeleteCardMemberStream(Card_DeleteCardMemberStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method DeleteCardMemberStream not implemented")
}
func (UnimplementedCardServer) mustEmbedUnimplementedCardServer() {}

// UnsafeCardServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CardServer will
// result in compilation errors.
type UnsafeCardServer interface {
	mustEmbedUnimplementedCardServer()
}

func RegisterCardServer(s grpc.ServiceRegistrar, srv CardServer) {
	s.RegisterService(&Card_ServiceDesc, srv)
}

func _Card_CreateCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServer).CreateCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Card/CreateCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServer).CreateCard(ctx, req.(*CreateCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Card_CreateCardStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CardServer).CreateCardStream(&cardCreateCardStreamServer{stream})
}

type Card_CreateCardStreamServer interface {
	SendAndClose(*CreateCardResponse) error
	Recv() (*CreateCardRequest, error)
	grpc.ServerStream
}

type cardCreateCardStreamServer struct {
	grpc.ServerStream
}

func (x *cardCreateCardStreamServer) SendAndClose(m *CreateCardResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cardCreateCardStreamServer) Recv() (*CreateCardRequest, error) {
	m := new(CreateCardRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Card_GetCardInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCardInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServer).GetCardInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Card/GetCardInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServer).GetCardInfo(ctx, req.(*GetCardInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Card_GetCardInfoStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CardServer).GetCardInfoStream(&cardGetCardInfoStreamServer{stream})
}

type Card_GetCardInfoStreamServer interface {
	SendAndClose(*GetCardInfoResponse) error
	Recv() (*GetCardInfoRequest, error)
	grpc.ServerStream
}

type cardGetCardInfoStreamServer struct {
	grpc.ServerStream
}

func (x *cardGetCardInfoStreamServer) SendAndClose(m *GetCardInfoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cardGetCardInfoStreamServer) Recv() (*GetCardInfoRequest, error) {
	m := new(GetCardInfoRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Card_GetCardInfoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCardInfoListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServer).GetCardInfoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Card/GetCardInfoList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServer).GetCardInfoList(ctx, req.(*GetCardInfoListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Card_GetCardInfoListStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CardServer).GetCardInfoListStream(&cardGetCardInfoListStreamServer{stream})
}

type Card_GetCardInfoListStreamServer interface {
	SendAndClose(*GetCardInfoListResponse) error
	Recv() (*GetCardInfoListRequest, error)
	grpc.ServerStream
}

type cardGetCardInfoListStreamServer struct {
	grpc.ServerStream
}

func (x *cardGetCardInfoListStreamServer) SendAndClose(m *GetCardInfoListResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cardGetCardInfoListStreamServer) Recv() (*GetCardInfoListRequest, error) {
	m := new(GetCardInfoListRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Card_UpdateCardTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCardTitleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServer).UpdateCardTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Card/UpdateCardTitle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServer).UpdateCardTitle(ctx, req.(*UpdateCardTitleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Card_UpdateCardTitleStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CardServer).UpdateCardTitleStream(&cardUpdateCardTitleStreamServer{stream})
}

type Card_UpdateCardTitleStreamServer interface {
	SendAndClose(*UpdateCardTitleResponse) error
	Recv() (*UpdateCardTitleRequest, error)
	grpc.ServerStream
}

type cardUpdateCardTitleStreamServer struct {
	grpc.ServerStream
}

func (x *cardUpdateCardTitleStreamServer) SendAndClose(m *UpdateCardTitleResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cardUpdateCardTitleStreamServer) Recv() (*UpdateCardTitleRequest, error) {
	m := new(UpdateCardTitleRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Card_UpdateCardContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCardContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServer).UpdateCardContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Card/UpdateCardContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServer).UpdateCardContent(ctx, req.(*UpdateCardContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Card_UpdateCardContentStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CardServer).UpdateCardContentStream(&cardUpdateCardContentStreamServer{stream})
}

type Card_UpdateCardContentStreamServer interface {
	SendAndClose(*UpdateCardContentResponse) error
	Recv() (*UpdateCardContentRequest, error)
	grpc.ServerStream
}

type cardUpdateCardContentStreamServer struct {
	grpc.ServerStream
}

func (x *cardUpdateCardContentStreamServer) SendAndClose(m *UpdateCardContentResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cardUpdateCardContentStreamServer) Recv() (*UpdateCardContentRequest, error) {
	m := new(UpdateCardContentRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Card_DeleteCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServer).DeleteCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Card/DeleteCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServer).DeleteCard(ctx, req.(*DeleteCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Card_DeleteCardStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CardServer).DeleteCardStream(&cardDeleteCardStreamServer{stream})
}

type Card_DeleteCardStreamServer interface {
	SendAndClose(*DeleteCardResponse) error
	Recv() (*DeleteCardRequest, error)
	grpc.ServerStream
}

type cardDeleteCardStreamServer struct {
	grpc.ServerStream
}

func (x *cardDeleteCardStreamServer) SendAndClose(m *DeleteCardResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cardDeleteCardStreamServer) Recv() (*DeleteCardRequest, error) {
	m := new(DeleteCardRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Card_AddCardTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCardTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServer).AddCardTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Card/AddCardTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServer).AddCardTag(ctx, req.(*AddCardTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Card_AddCardTagStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CardServer).AddCardTagStream(&cardAddCardTagStreamServer{stream})
}

type Card_AddCardTagStreamServer interface {
	SendAndClose(*AddCardTagResponse) error
	Recv() (*AddCardTagRequest, error)
	grpc.ServerStream
}

type cardAddCardTagStreamServer struct {
	grpc.ServerStream
}

func (x *cardAddCardTagStreamServer) SendAndClose(m *AddCardTagResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cardAddCardTagStreamServer) Recv() (*AddCardTagRequest, error) {
	m := new(AddCardTagRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Card_DeleteCardTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCardTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServer).DeleteCardTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Card/DeleteCardTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServer).DeleteCardTag(ctx, req.(*DeleteCardTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Card_DeleteCardTagStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CardServer).DeleteCardTagStream(&cardDeleteCardTagStreamServer{stream})
}

type Card_DeleteCardTagStreamServer interface {
	SendAndClose(*DeleteCardResponse) error
	Recv() (*DeleteCardTagRequest, error)
	grpc.ServerStream
}

type cardDeleteCardTagStreamServer struct {
	grpc.ServerStream
}

func (x *cardDeleteCardTagStreamServer) SendAndClose(m *DeleteCardResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cardDeleteCardTagStreamServer) Recv() (*DeleteCardTagRequest, error) {
	m := new(DeleteCardTagRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Card_SetCardMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetCardMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServer).SetCardMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Card/SetCardMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServer).SetCardMember(ctx, req.(*SetCardMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Card_SetCardMemberStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CardServer).SetCardMemberStream(&cardSetCardMemberStreamServer{stream})
}

type Card_SetCardMemberStreamServer interface {
	SendAndClose(*SetCardMemberResponse) error
	Recv() (*SetCardMemberRequest, error)
	grpc.ServerStream
}

type cardSetCardMemberStreamServer struct {
	grpc.ServerStream
}

func (x *cardSetCardMemberStreamServer) SendAndClose(m *SetCardMemberResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cardSetCardMemberStreamServer) Recv() (*SetCardMemberRequest, error) {
	m := new(SetCardMemberRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Card_DeleteCardMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCardMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServer).DeleteCardMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Card/DeleteCardMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServer).DeleteCardMember(ctx, req.(*DeleteCardMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Card_DeleteCardMemberStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CardServer).DeleteCardMemberStream(&cardDeleteCardMemberStreamServer{stream})
}

type Card_DeleteCardMemberStreamServer interface {
	SendAndClose(*DeleteCardMemberResponse) error
	Recv() (*DeleteCardMemberRequest, error)
	grpc.ServerStream
}

type cardDeleteCardMemberStreamServer struct {
	grpc.ServerStream
}

func (x *cardDeleteCardMemberStreamServer) SendAndClose(m *DeleteCardMemberResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cardDeleteCardMemberStreamServer) Recv() (*DeleteCardMemberRequest, error) {
	m := new(DeleteCardMemberRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Card_ServiceDesc is the grpc.ServiceDesc for Card service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Card_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Card",
	HandlerType: (*CardServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCard",
			Handler:    _Card_CreateCard_Handler,
		},
		{
			MethodName: "GetCardInfo",
			Handler:    _Card_GetCardInfo_Handler,
		},
		{
			MethodName: "GetCardInfoList",
			Handler:    _Card_GetCardInfoList_Handler,
		},
		{
			MethodName: "UpdateCardTitle",
			Handler:    _Card_UpdateCardTitle_Handler,
		},
		{
			MethodName: "UpdateCardContent",
			Handler:    _Card_UpdateCardContent_Handler,
		},
		{
			MethodName: "DeleteCard",
			Handler:    _Card_DeleteCard_Handler,
		},
		{
			MethodName: "AddCardTag",
			Handler:    _Card_AddCardTag_Handler,
		},
		{
			MethodName: "DeleteCardTag",
			Handler:    _Card_DeleteCardTag_Handler,
		},
		{
			MethodName: "SetCardMember",
			Handler:    _Card_SetCardMember_Handler,
		},
		{
			MethodName: "DeleteCardMember",
			Handler:    _Card_DeleteCardMember_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateCardStream",
			Handler:       _Card_CreateCardStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetCardInfoStream",
			Handler:       _Card_GetCardInfoStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetCardInfoListStream",
			Handler:       _Card_GetCardInfoListStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "UpdateCardTitleStream",
			Handler:       _Card_UpdateCardTitleStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "UpdateCardContentStream",
			Handler:       _Card_UpdateCardContentStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DeleteCardStream",
			Handler:       _Card_DeleteCardStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "AddCardTagStream",
			Handler:       _Card_AddCardTagStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DeleteCardTagStream",
			Handler:       _Card_DeleteCardTagStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SetCardMemberStream",
			Handler:       _Card_SetCardMemberStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DeleteCardMemberStream",
			Handler:       _Card_DeleteCardMemberStream_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "card.proto",
}
