// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: card.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CardServiceClient is the client API for CardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CardServiceClient interface {
	CreateCard(ctx context.Context, in *CreateCardRequest, opts ...grpc.CallOption) (*CreateCardResponse, error)
	CreateCardStream(ctx context.Context, opts ...grpc.CallOption) (CardService_CreateCardStreamClient, error)
	GetCardInfo(ctx context.Context, in *GetCardInfoRequest, opts ...grpc.CallOption) (*GetCardInfoResponse, error)
	GetCardInfoStream(ctx context.Context, opts ...grpc.CallOption) (CardService_GetCardInfoStreamClient, error)
	GetCardList(ctx context.Context, in *GetCardListRequest, opts ...grpc.CallOption) (*GetCardListResponse, error)
	GetCardListStream(ctx context.Context, opts ...grpc.CallOption) (CardService_GetCardListStreamClient, error)
	UpdateCard(ctx context.Context, in *UpdateCardRequest, opts ...grpc.CallOption) (*UpdateCardResponse, error)
	UpdateCardStream(ctx context.Context, opts ...grpc.CallOption) (CardService_UpdateCardStreamClient, error)
	DeleteCard(ctx context.Context, in *DeleteCardRequest, opts ...grpc.CallOption) (*DeleteCardResponse, error)
	DeleteCardStream(ctx context.Context, opts ...grpc.CallOption) (CardService_DeleteCardStreamClient, error)
	AddCardTag(ctx context.Context, in *AddCardTagRequest, opts ...grpc.CallOption) (*AddCardTagResponse, error)
	AddCardTagStream(ctx context.Context, opts ...grpc.CallOption) (CardService_AddCardTagStreamClient, error)
	DeleteCardTag(ctx context.Context, in *DeleteCardTagRequest, opts ...grpc.CallOption) (*DeleteCardTagResponse, error)
	DeleteCardTagStream(ctx context.Context, opts ...grpc.CallOption) (CardService_DeleteCardTagStreamClient, error)
	AddCardMember(ctx context.Context, in *AddCardMemberRequest, opts ...grpc.CallOption) (*AddCardMemberResponse, error)
	AddCardMemberStream(ctx context.Context, opts ...grpc.CallOption) (CardService_AddCardMemberStreamClient, error)
	DeleteCardMember(ctx context.Context, in *DeleteCardMemberRequest, opts ...grpc.CallOption) (*DeleteCardMemberResponse, error)
	DeleteCardMemberStream(ctx context.Context, opts ...grpc.CallOption) (CardService_DeleteCardMemberStreamClient, error)
}

type cardServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCardServiceClient(cc grpc.ClientConnInterface) CardServiceClient {
	return &cardServiceClient{cc}
}

func (c *cardServiceClient) CreateCard(ctx context.Context, in *CreateCardRequest, opts ...grpc.CallOption) (*CreateCardResponse, error) {
	out := new(CreateCardResponse)
	err := c.cc.Invoke(ctx, "/api.CardService/CreateCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) CreateCardStream(ctx context.Context, opts ...grpc.CallOption) (CardService_CreateCardStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &CardService_ServiceDesc.Streams[0], "/api.CardService/CreateCardStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &cardServiceCreateCardStreamClient{stream}
	return x, nil
}

type CardService_CreateCardStreamClient interface {
	Send(*CreateCardRequest) error
	CloseAndRecv() (*CreateCardResponse, error)
	grpc.ClientStream
}

type cardServiceCreateCardStreamClient struct {
	grpc.ClientStream
}

func (x *cardServiceCreateCardStreamClient) Send(m *CreateCardRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cardServiceCreateCardStreamClient) CloseAndRecv() (*CreateCardResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(CreateCardResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cardServiceClient) GetCardInfo(ctx context.Context, in *GetCardInfoRequest, opts ...grpc.CallOption) (*GetCardInfoResponse, error) {
	out := new(GetCardInfoResponse)
	err := c.cc.Invoke(ctx, "/api.CardService/GetCardInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) GetCardInfoStream(ctx context.Context, opts ...grpc.CallOption) (CardService_GetCardInfoStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &CardService_ServiceDesc.Streams[1], "/api.CardService/GetCardInfoStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &cardServiceGetCardInfoStreamClient{stream}
	return x, nil
}

type CardService_GetCardInfoStreamClient interface {
	Send(*GetCardInfoRequest) error
	CloseAndRecv() (*GetCardInfoResponse, error)
	grpc.ClientStream
}

type cardServiceGetCardInfoStreamClient struct {
	grpc.ClientStream
}

func (x *cardServiceGetCardInfoStreamClient) Send(m *GetCardInfoRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cardServiceGetCardInfoStreamClient) CloseAndRecv() (*GetCardInfoResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(GetCardInfoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cardServiceClient) GetCardList(ctx context.Context, in *GetCardListRequest, opts ...grpc.CallOption) (*GetCardListResponse, error) {
	out := new(GetCardListResponse)
	err := c.cc.Invoke(ctx, "/api.CardService/GetCardList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) GetCardListStream(ctx context.Context, opts ...grpc.CallOption) (CardService_GetCardListStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &CardService_ServiceDesc.Streams[2], "/api.CardService/GetCardListStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &cardServiceGetCardListStreamClient{stream}
	return x, nil
}

type CardService_GetCardListStreamClient interface {
	Send(*GetCardListRequest) error
	CloseAndRecv() (*GetCardListResponse, error)
	grpc.ClientStream
}

type cardServiceGetCardListStreamClient struct {
	grpc.ClientStream
}

func (x *cardServiceGetCardListStreamClient) Send(m *GetCardListRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cardServiceGetCardListStreamClient) CloseAndRecv() (*GetCardListResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(GetCardListResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cardServiceClient) UpdateCard(ctx context.Context, in *UpdateCardRequest, opts ...grpc.CallOption) (*UpdateCardResponse, error) {
	out := new(UpdateCardResponse)
	err := c.cc.Invoke(ctx, "/api.CardService/UpdateCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) UpdateCardStream(ctx context.Context, opts ...grpc.CallOption) (CardService_UpdateCardStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &CardService_ServiceDesc.Streams[3], "/api.CardService/UpdateCardStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &cardServiceUpdateCardStreamClient{stream}
	return x, nil
}

type CardService_UpdateCardStreamClient interface {
	Send(*UpdateCardRequest) error
	CloseAndRecv() (*UpdateCardResponse, error)
	grpc.ClientStream
}

type cardServiceUpdateCardStreamClient struct {
	grpc.ClientStream
}

func (x *cardServiceUpdateCardStreamClient) Send(m *UpdateCardRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cardServiceUpdateCardStreamClient) CloseAndRecv() (*UpdateCardResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UpdateCardResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cardServiceClient) DeleteCard(ctx context.Context, in *DeleteCardRequest, opts ...grpc.CallOption) (*DeleteCardResponse, error) {
	out := new(DeleteCardResponse)
	err := c.cc.Invoke(ctx, "/api.CardService/DeleteCard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) DeleteCardStream(ctx context.Context, opts ...grpc.CallOption) (CardService_DeleteCardStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &CardService_ServiceDesc.Streams[4], "/api.CardService/DeleteCardStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &cardServiceDeleteCardStreamClient{stream}
	return x, nil
}

type CardService_DeleteCardStreamClient interface {
	Send(*DeleteCardRequest) error
	CloseAndRecv() (*DeleteCardResponse, error)
	grpc.ClientStream
}

type cardServiceDeleteCardStreamClient struct {
	grpc.ClientStream
}

func (x *cardServiceDeleteCardStreamClient) Send(m *DeleteCardRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cardServiceDeleteCardStreamClient) CloseAndRecv() (*DeleteCardResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(DeleteCardResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cardServiceClient) AddCardTag(ctx context.Context, in *AddCardTagRequest, opts ...grpc.CallOption) (*AddCardTagResponse, error) {
	out := new(AddCardTagResponse)
	err := c.cc.Invoke(ctx, "/api.CardService/AddCardTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) AddCardTagStream(ctx context.Context, opts ...grpc.CallOption) (CardService_AddCardTagStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &CardService_ServiceDesc.Streams[5], "/api.CardService/AddCardTagStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &cardServiceAddCardTagStreamClient{stream}
	return x, nil
}

type CardService_AddCardTagStreamClient interface {
	Send(*AddCardTagRequest) error
	CloseAndRecv() (*AddCardTagResponse, error)
	grpc.ClientStream
}

type cardServiceAddCardTagStreamClient struct {
	grpc.ClientStream
}

func (x *cardServiceAddCardTagStreamClient) Send(m *AddCardTagRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cardServiceAddCardTagStreamClient) CloseAndRecv() (*AddCardTagResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(AddCardTagResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cardServiceClient) DeleteCardTag(ctx context.Context, in *DeleteCardTagRequest, opts ...grpc.CallOption) (*DeleteCardTagResponse, error) {
	out := new(DeleteCardTagResponse)
	err := c.cc.Invoke(ctx, "/api.CardService/DeleteCardTag", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) DeleteCardTagStream(ctx context.Context, opts ...grpc.CallOption) (CardService_DeleteCardTagStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &CardService_ServiceDesc.Streams[6], "/api.CardService/DeleteCardTagStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &cardServiceDeleteCardTagStreamClient{stream}
	return x, nil
}

type CardService_DeleteCardTagStreamClient interface {
	Send(*DeleteCardTagRequest) error
	CloseAndRecv() (*DeleteCardResponse, error)
	grpc.ClientStream
}

type cardServiceDeleteCardTagStreamClient struct {
	grpc.ClientStream
}

func (x *cardServiceDeleteCardTagStreamClient) Send(m *DeleteCardTagRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cardServiceDeleteCardTagStreamClient) CloseAndRecv() (*DeleteCardResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(DeleteCardResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cardServiceClient) AddCardMember(ctx context.Context, in *AddCardMemberRequest, opts ...grpc.CallOption) (*AddCardMemberResponse, error) {
	out := new(AddCardMemberResponse)
	err := c.cc.Invoke(ctx, "/api.CardService/AddCardMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) AddCardMemberStream(ctx context.Context, opts ...grpc.CallOption) (CardService_AddCardMemberStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &CardService_ServiceDesc.Streams[7], "/api.CardService/AddCardMemberStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &cardServiceAddCardMemberStreamClient{stream}
	return x, nil
}

type CardService_AddCardMemberStreamClient interface {
	Send(*AddCardMemberRequest) error
	CloseAndRecv() (*AddCardMemberResponse, error)
	grpc.ClientStream
}

type cardServiceAddCardMemberStreamClient struct {
	grpc.ClientStream
}

func (x *cardServiceAddCardMemberStreamClient) Send(m *AddCardMemberRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cardServiceAddCardMemberStreamClient) CloseAndRecv() (*AddCardMemberResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(AddCardMemberResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cardServiceClient) DeleteCardMember(ctx context.Context, in *DeleteCardMemberRequest, opts ...grpc.CallOption) (*DeleteCardMemberResponse, error) {
	out := new(DeleteCardMemberResponse)
	err := c.cc.Invoke(ctx, "/api.CardService/DeleteCardMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) DeleteCardMemberStream(ctx context.Context, opts ...grpc.CallOption) (CardService_DeleteCardMemberStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &CardService_ServiceDesc.Streams[8], "/api.CardService/DeleteCardMemberStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &cardServiceDeleteCardMemberStreamClient{stream}
	return x, nil
}

type CardService_DeleteCardMemberStreamClient interface {
	Send(*DeleteCardMemberRequest) error
	CloseAndRecv() (*DeleteCardMemberResponse, error)
	grpc.ClientStream
}

type cardServiceDeleteCardMemberStreamClient struct {
	grpc.ClientStream
}

func (x *cardServiceDeleteCardMemberStreamClient) Send(m *DeleteCardMemberRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cardServiceDeleteCardMemberStreamClient) CloseAndRecv() (*DeleteCardMemberResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(DeleteCardMemberResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CardServiceServer is the server API for CardService service.
// All implementations must embed UnimplementedCardServiceServer
// for forward compatibility
type CardServiceServer interface {
	CreateCard(context.Context, *CreateCardRequest) (*CreateCardResponse, error)
	CreateCardStream(CardService_CreateCardStreamServer) error
	GetCardInfo(context.Context, *GetCardInfoRequest) (*GetCardInfoResponse, error)
	GetCardInfoStream(CardService_GetCardInfoStreamServer) error
	GetCardList(context.Context, *GetCardListRequest) (*GetCardListResponse, error)
	GetCardListStream(CardService_GetCardListStreamServer) error
	UpdateCard(context.Context, *UpdateCardRequest) (*UpdateCardResponse, error)
	UpdateCardStream(CardService_UpdateCardStreamServer) error
	DeleteCard(context.Context, *DeleteCardRequest) (*DeleteCardResponse, error)
	DeleteCardStream(CardService_DeleteCardStreamServer) error
	AddCardTag(context.Context, *AddCardTagRequest) (*AddCardTagResponse, error)
	AddCardTagStream(CardService_AddCardTagStreamServer) error
	DeleteCardTag(context.Context, *DeleteCardTagRequest) (*DeleteCardTagResponse, error)
	DeleteCardTagStream(CardService_DeleteCardTagStreamServer) error
	AddCardMember(context.Context, *AddCardMemberRequest) (*AddCardMemberResponse, error)
	AddCardMemberStream(CardService_AddCardMemberStreamServer) error
	DeleteCardMember(context.Context, *DeleteCardMemberRequest) (*DeleteCardMemberResponse, error)
	DeleteCardMemberStream(CardService_DeleteCardMemberStreamServer) error
	mustEmbedUnimplementedCardServiceServer()
}

// UnimplementedCardServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCardServiceServer struct {
}

func (UnimplementedCardServiceServer) CreateCard(context.Context, *CreateCardRequest) (*CreateCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCard not implemented")
}
func (UnimplementedCardServiceServer) CreateCardStream(CardService_CreateCardStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateCardStream not implemented")
}
func (UnimplementedCardServiceServer) GetCardInfo(context.Context, *GetCardInfoRequest) (*GetCardInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCardInfo not implemented")
}
func (UnimplementedCardServiceServer) GetCardInfoStream(CardService_GetCardInfoStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetCardInfoStream not implemented")
}
func (UnimplementedCardServiceServer) GetCardList(context.Context, *GetCardListRequest) (*GetCardListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCardList not implemented")
}
func (UnimplementedCardServiceServer) GetCardListStream(CardService_GetCardListStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetCardListStream not implemented")
}
func (UnimplementedCardServiceServer) UpdateCard(context.Context, *UpdateCardRequest) (*UpdateCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCard not implemented")
}
func (UnimplementedCardServiceServer) UpdateCardStream(CardService_UpdateCardStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method UpdateCardStream not implemented")
}
func (UnimplementedCardServiceServer) DeleteCard(context.Context, *DeleteCardRequest) (*DeleteCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCard not implemented")
}
func (UnimplementedCardServiceServer) DeleteCardStream(CardService_DeleteCardStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method DeleteCardStream not implemented")
}
func (UnimplementedCardServiceServer) AddCardTag(context.Context, *AddCardTagRequest) (*AddCardTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCardTag not implemented")
}
func (UnimplementedCardServiceServer) AddCardTagStream(CardService_AddCardTagStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method AddCardTagStream not implemented")
}
func (UnimplementedCardServiceServer) DeleteCardTag(context.Context, *DeleteCardTagRequest) (*DeleteCardTagResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCardTag not implemented")
}
func (UnimplementedCardServiceServer) DeleteCardTagStream(CardService_DeleteCardTagStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method DeleteCardTagStream not implemented")
}
func (UnimplementedCardServiceServer) AddCardMember(context.Context, *AddCardMemberRequest) (*AddCardMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCardMember not implemented")
}
func (UnimplementedCardServiceServer) AddCardMemberStream(CardService_AddCardMemberStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method AddCardMemberStream not implemented")
}
func (UnimplementedCardServiceServer) DeleteCardMember(context.Context, *DeleteCardMemberRequest) (*DeleteCardMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCardMember not implemented")
}
func (UnimplementedCardServiceServer) DeleteCardMemberStream(CardService_DeleteCardMemberStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method DeleteCardMemberStream not implemented")
}
func (UnimplementedCardServiceServer) mustEmbedUnimplementedCardServiceServer() {}

// UnsafeCardServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CardServiceServer will
// result in compilation errors.
type UnsafeCardServiceServer interface {
	mustEmbedUnimplementedCardServiceServer()
}

func RegisterCardServiceServer(s grpc.ServiceRegistrar, srv CardServiceServer) {
	s.RegisterService(&CardService_ServiceDesc, srv)
}

func _CardService_CreateCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).CreateCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CardService/CreateCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).CreateCard(ctx, req.(*CreateCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_CreateCardStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CardServiceServer).CreateCardStream(&cardServiceCreateCardStreamServer{stream})
}

type CardService_CreateCardStreamServer interface {
	SendAndClose(*CreateCardResponse) error
	Recv() (*CreateCardRequest, error)
	grpc.ServerStream
}

type cardServiceCreateCardStreamServer struct {
	grpc.ServerStream
}

func (x *cardServiceCreateCardStreamServer) SendAndClose(m *CreateCardResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cardServiceCreateCardStreamServer) Recv() (*CreateCardRequest, error) {
	m := new(CreateCardRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CardService_GetCardInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCardInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).GetCardInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CardService/GetCardInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).GetCardInfo(ctx, req.(*GetCardInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_GetCardInfoStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CardServiceServer).GetCardInfoStream(&cardServiceGetCardInfoStreamServer{stream})
}

type CardService_GetCardInfoStreamServer interface {
	SendAndClose(*GetCardInfoResponse) error
	Recv() (*GetCardInfoRequest, error)
	grpc.ServerStream
}

type cardServiceGetCardInfoStreamServer struct {
	grpc.ServerStream
}

func (x *cardServiceGetCardInfoStreamServer) SendAndClose(m *GetCardInfoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cardServiceGetCardInfoStreamServer) Recv() (*GetCardInfoRequest, error) {
	m := new(GetCardInfoRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CardService_GetCardList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCardListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).GetCardList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CardService/GetCardList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).GetCardList(ctx, req.(*GetCardListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_GetCardListStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CardServiceServer).GetCardListStream(&cardServiceGetCardListStreamServer{stream})
}

type CardService_GetCardListStreamServer interface {
	SendAndClose(*GetCardListResponse) error
	Recv() (*GetCardListRequest, error)
	grpc.ServerStream
}

type cardServiceGetCardListStreamServer struct {
	grpc.ServerStream
}

func (x *cardServiceGetCardListStreamServer) SendAndClose(m *GetCardListResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cardServiceGetCardListStreamServer) Recv() (*GetCardListRequest, error) {
	m := new(GetCardListRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CardService_UpdateCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).UpdateCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CardService/UpdateCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).UpdateCard(ctx, req.(*UpdateCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_UpdateCardStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CardServiceServer).UpdateCardStream(&cardServiceUpdateCardStreamServer{stream})
}

type CardService_UpdateCardStreamServer interface {
	SendAndClose(*UpdateCardResponse) error
	Recv() (*UpdateCardRequest, error)
	grpc.ServerStream
}

type cardServiceUpdateCardStreamServer struct {
	grpc.ServerStream
}

func (x *cardServiceUpdateCardStreamServer) SendAndClose(m *UpdateCardResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cardServiceUpdateCardStreamServer) Recv() (*UpdateCardRequest, error) {
	m := new(UpdateCardRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CardService_DeleteCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).DeleteCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CardService/DeleteCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).DeleteCard(ctx, req.(*DeleteCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_DeleteCardStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CardServiceServer).DeleteCardStream(&cardServiceDeleteCardStreamServer{stream})
}

type CardService_DeleteCardStreamServer interface {
	SendAndClose(*DeleteCardResponse) error
	Recv() (*DeleteCardRequest, error)
	grpc.ServerStream
}

type cardServiceDeleteCardStreamServer struct {
	grpc.ServerStream
}

func (x *cardServiceDeleteCardStreamServer) SendAndClose(m *DeleteCardResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cardServiceDeleteCardStreamServer) Recv() (*DeleteCardRequest, error) {
	m := new(DeleteCardRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CardService_AddCardTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCardTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).AddCardTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CardService/AddCardTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).AddCardTag(ctx, req.(*AddCardTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_AddCardTagStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CardServiceServer).AddCardTagStream(&cardServiceAddCardTagStreamServer{stream})
}

type CardService_AddCardTagStreamServer interface {
	SendAndClose(*AddCardTagResponse) error
	Recv() (*AddCardTagRequest, error)
	grpc.ServerStream
}

type cardServiceAddCardTagStreamServer struct {
	grpc.ServerStream
}

func (x *cardServiceAddCardTagStreamServer) SendAndClose(m *AddCardTagResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cardServiceAddCardTagStreamServer) Recv() (*AddCardTagRequest, error) {
	m := new(AddCardTagRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CardService_DeleteCardTag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCardTagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).DeleteCardTag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CardService/DeleteCardTag",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).DeleteCardTag(ctx, req.(*DeleteCardTagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_DeleteCardTagStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CardServiceServer).DeleteCardTagStream(&cardServiceDeleteCardTagStreamServer{stream})
}

type CardService_DeleteCardTagStreamServer interface {
	SendAndClose(*DeleteCardResponse) error
	Recv() (*DeleteCardTagRequest, error)
	grpc.ServerStream
}

type cardServiceDeleteCardTagStreamServer struct {
	grpc.ServerStream
}

func (x *cardServiceDeleteCardTagStreamServer) SendAndClose(m *DeleteCardResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cardServiceDeleteCardTagStreamServer) Recv() (*DeleteCardTagRequest, error) {
	m := new(DeleteCardTagRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CardService_AddCardMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCardMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).AddCardMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CardService/AddCardMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).AddCardMember(ctx, req.(*AddCardMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_AddCardMemberStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CardServiceServer).AddCardMemberStream(&cardServiceAddCardMemberStreamServer{stream})
}

type CardService_AddCardMemberStreamServer interface {
	SendAndClose(*AddCardMemberResponse) error
	Recv() (*AddCardMemberRequest, error)
	grpc.ServerStream
}

type cardServiceAddCardMemberStreamServer struct {
	grpc.ServerStream
}

func (x *cardServiceAddCardMemberStreamServer) SendAndClose(m *AddCardMemberResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cardServiceAddCardMemberStreamServer) Recv() (*AddCardMemberRequest, error) {
	m := new(AddCardMemberRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CardService_DeleteCardMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCardMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).DeleteCardMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CardService/DeleteCardMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).DeleteCardMember(ctx, req.(*DeleteCardMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_DeleteCardMemberStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CardServiceServer).DeleteCardMemberStream(&cardServiceDeleteCardMemberStreamServer{stream})
}

type CardService_DeleteCardMemberStreamServer interface {
	SendAndClose(*DeleteCardMemberResponse) error
	Recv() (*DeleteCardMemberRequest, error)
	grpc.ServerStream
}

type cardServiceDeleteCardMemberStreamServer struct {
	grpc.ServerStream
}

func (x *cardServiceDeleteCardMemberStreamServer) SendAndClose(m *DeleteCardMemberResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cardServiceDeleteCardMemberStreamServer) Recv() (*DeleteCardMemberRequest, error) {
	m := new(DeleteCardMemberRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CardService_ServiceDesc is the grpc.ServiceDesc for CardService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CardService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.CardService",
	HandlerType: (*CardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCard",
			Handler:    _CardService_CreateCard_Handler,
		},
		{
			MethodName: "GetCardInfo",
			Handler:    _CardService_GetCardInfo_Handler,
		},
		{
			MethodName: "GetCardList",
			Handler:    _CardService_GetCardList_Handler,
		},
		{
			MethodName: "UpdateCard",
			Handler:    _CardService_UpdateCard_Handler,
		},
		{
			MethodName: "DeleteCard",
			Handler:    _CardService_DeleteCard_Handler,
		},
		{
			MethodName: "AddCardTag",
			Handler:    _CardService_AddCardTag_Handler,
		},
		{
			MethodName: "DeleteCardTag",
			Handler:    _CardService_DeleteCardTag_Handler,
		},
		{
			MethodName: "AddCardMember",
			Handler:    _CardService_AddCardMember_Handler,
		},
		{
			MethodName: "DeleteCardMember",
			Handler:    _CardService_DeleteCardMember_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateCardStream",
			Handler:       _CardService_CreateCardStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetCardInfoStream",
			Handler:       _CardService_GetCardInfoStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetCardListStream",
			Handler:       _CardService_GetCardListStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "UpdateCardStream",
			Handler:       _CardService_UpdateCardStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DeleteCardStream",
			Handler:       _CardService_DeleteCardStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "AddCardTagStream",
			Handler:       _CardService_AddCardTagStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DeleteCardTagStream",
			Handler:       _CardService_DeleteCardTagStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "AddCardMemberStream",
			Handler:       _CardService_AddCardMemberStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DeleteCardMemberStream",
			Handler:       _CardService_DeleteCardMemberStream_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "card.proto",
}
