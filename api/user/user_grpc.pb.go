// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: user.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	// add a user
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	// add a user via stream
	CreateUserStream(ctx context.Context, opts ...grpc.CallOption) (UserService_CreateUserStreamClient, error)
	// Get a user's info
	GetUserInfo(ctx context.Context, in *GetUserInfoRequest, opts ...grpc.CallOption) (*GetUserInfoResponse, error)
	// GGet a user's info via stream
	GetUserInfoStream(ctx context.Context, opts ...grpc.CallOption) (UserService_GetUserInfoStreamClient, error)
	// Get a user's info by nickname
	GetUserInfoByNickname(ctx context.Context, in *GetUserInfoByNicknameRequest, opts ...grpc.CallOption) (*GetUserInfoResponse, error)
	// Get a user's info by nickname via stream
	GetUserInfoByNicknameStream(ctx context.Context, opts ...grpc.CallOption) (UserService_GetUserInfoByNicknameStreamClient, error)
	// Get a user's info by email
	GetUserInfoByEmail(ctx context.Context, in *GetUserInfoByEmailRequest, opts ...grpc.CallOption) (*GetUserInfoResponse, error)
	// Get a user's info by email via stream
	GetUserInfoByEmailStream(ctx context.Context, opts ...grpc.CallOption) (UserService_GetUserInfoByEmailStreamClient, error)
	// Get a user's info by mobile
	GetUserInfoByMobile(ctx context.Context, in *GetUserInfoByMobileRequest, opts ...grpc.CallOption) (*GetUserInfoResponse, error)
	// Get a user's info by mobile via stream
	GetUserInfoByMobileStream(ctx context.Context, opts ...grpc.CallOption) (UserService_GetUserInfoByMobileStreamClient, error)
	// Set a user's fullname
	SetFullname(ctx context.Context, in *SetFullnameRequest, opts ...grpc.CallOption) (*SetFullnameResponse, error)
	// Set a user's fullname via stream
	SetFullnameStream(ctx context.Context, opts ...grpc.CallOption) (UserService_SetFullnameStreamClient, error)
	// Set a user's avatar
	SetAvatar(ctx context.Context, in *SetAvatarRequest, opts ...grpc.CallOption) (*SetAvatarResponse, error)
	// Set a user's avatar via stream
	SetAvatarStream(ctx context.Context, opts ...grpc.CallOption) (UserService_SetAvatarStreamClient, error)
	// Set a user's config
	SetConfig(ctx context.Context, in *SetConfigRequest, opts ...grpc.CallOption) (*SetConfigResponse, error)
	// Set a user's config via stream
	SetConfigStream(ctx context.Context, opts ...grpc.CallOption) (UserService_SetConfigStreamClient, error)
	// Set a user's email
	SetEmail(ctx context.Context, in *SetEmailRequest, opts ...grpc.CallOption) (*SetEmailResponse, error)
	// Set a user's email via stream
	SetEmailStream(ctx context.Context, opts ...grpc.CallOption) (UserService_SetEmailStreamClient, error)
	// Set a user's mobile
	SetMobile(ctx context.Context, in *SetMobileRequest, opts ...grpc.CallOption) (*SetMobileResponse, error)
	// Set a user's mobile via stream
	SetMobileStream(ctx context.Context, opts ...grpc.CallOption) (UserService_SetMobileStreamClient, error)
	// delete a user
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error)
	// delete a user via stream
	DeleteUserStream(ctx context.Context, opts ...grpc.CallOption) (UserService_DeleteUserStreamClient, error)
	// login
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, "/api.UserService/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) CreateUserStream(ctx context.Context, opts ...grpc.CallOption) (UserService_CreateUserStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &UserService_ServiceDesc.Streams[0], "/api.UserService/CreateUserStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &userServiceCreateUserStreamClient{stream}
	return x, nil
}

type UserService_CreateUserStreamClient interface {
	Send(*CreateUserRequest) error
	Recv() (*CreateUserResponse, error)
	grpc.ClientStream
}

type userServiceCreateUserStreamClient struct {
	grpc.ClientStream
}

func (x *userServiceCreateUserStreamClient) Send(m *CreateUserRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *userServiceCreateUserStreamClient) Recv() (*CreateUserResponse, error) {
	m := new(CreateUserResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userServiceClient) GetUserInfo(ctx context.Context, in *GetUserInfoRequest, opts ...grpc.CallOption) (*GetUserInfoResponse, error) {
	out := new(GetUserInfoResponse)
	err := c.cc.Invoke(ctx, "/api.UserService/GetUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserInfoStream(ctx context.Context, opts ...grpc.CallOption) (UserService_GetUserInfoStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &UserService_ServiceDesc.Streams[1], "/api.UserService/GetUserInfoStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &userServiceGetUserInfoStreamClient{stream}
	return x, nil
}

type UserService_GetUserInfoStreamClient interface {
	Send(*GetUserInfoRequest) error
	Recv() (*GetUserInfoResponse, error)
	grpc.ClientStream
}

type userServiceGetUserInfoStreamClient struct {
	grpc.ClientStream
}

func (x *userServiceGetUserInfoStreamClient) Send(m *GetUserInfoRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *userServiceGetUserInfoStreamClient) Recv() (*GetUserInfoResponse, error) {
	m := new(GetUserInfoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userServiceClient) GetUserInfoByNickname(ctx context.Context, in *GetUserInfoByNicknameRequest, opts ...grpc.CallOption) (*GetUserInfoResponse, error) {
	out := new(GetUserInfoResponse)
	err := c.cc.Invoke(ctx, "/api.UserService/GetUserInfoByNickname", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserInfoByNicknameStream(ctx context.Context, opts ...grpc.CallOption) (UserService_GetUserInfoByNicknameStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &UserService_ServiceDesc.Streams[2], "/api.UserService/GetUserInfoByNicknameStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &userServiceGetUserInfoByNicknameStreamClient{stream}
	return x, nil
}

type UserService_GetUserInfoByNicknameStreamClient interface {
	Send(*GetUserInfoByNicknameRequest) error
	Recv() (*GetUserInfoResponse, error)
	grpc.ClientStream
}

type userServiceGetUserInfoByNicknameStreamClient struct {
	grpc.ClientStream
}

func (x *userServiceGetUserInfoByNicknameStreamClient) Send(m *GetUserInfoByNicknameRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *userServiceGetUserInfoByNicknameStreamClient) Recv() (*GetUserInfoResponse, error) {
	m := new(GetUserInfoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userServiceClient) GetUserInfoByEmail(ctx context.Context, in *GetUserInfoByEmailRequest, opts ...grpc.CallOption) (*GetUserInfoResponse, error) {
	out := new(GetUserInfoResponse)
	err := c.cc.Invoke(ctx, "/api.UserService/GetUserInfoByEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserInfoByEmailStream(ctx context.Context, opts ...grpc.CallOption) (UserService_GetUserInfoByEmailStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &UserService_ServiceDesc.Streams[3], "/api.UserService/GetUserInfoByEmailStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &userServiceGetUserInfoByEmailStreamClient{stream}
	return x, nil
}

type UserService_GetUserInfoByEmailStreamClient interface {
	Send(*GetUserInfoByEmailRequest) error
	Recv() (*GetUserInfoResponse, error)
	grpc.ClientStream
}

type userServiceGetUserInfoByEmailStreamClient struct {
	grpc.ClientStream
}

func (x *userServiceGetUserInfoByEmailStreamClient) Send(m *GetUserInfoByEmailRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *userServiceGetUserInfoByEmailStreamClient) Recv() (*GetUserInfoResponse, error) {
	m := new(GetUserInfoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userServiceClient) GetUserInfoByMobile(ctx context.Context, in *GetUserInfoByMobileRequest, opts ...grpc.CallOption) (*GetUserInfoResponse, error) {
	out := new(GetUserInfoResponse)
	err := c.cc.Invoke(ctx, "/api.UserService/GetUserInfoByMobile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUserInfoByMobileStream(ctx context.Context, opts ...grpc.CallOption) (UserService_GetUserInfoByMobileStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &UserService_ServiceDesc.Streams[4], "/api.UserService/GetUserInfoByMobileStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &userServiceGetUserInfoByMobileStreamClient{stream}
	return x, nil
}

type UserService_GetUserInfoByMobileStreamClient interface {
	Send(*GetUserInfoByMobileRequest) error
	Recv() (*GetUserInfoResponse, error)
	grpc.ClientStream
}

type userServiceGetUserInfoByMobileStreamClient struct {
	grpc.ClientStream
}

func (x *userServiceGetUserInfoByMobileStreamClient) Send(m *GetUserInfoByMobileRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *userServiceGetUserInfoByMobileStreamClient) Recv() (*GetUserInfoResponse, error) {
	m := new(GetUserInfoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userServiceClient) SetFullname(ctx context.Context, in *SetFullnameRequest, opts ...grpc.CallOption) (*SetFullnameResponse, error) {
	out := new(SetFullnameResponse)
	err := c.cc.Invoke(ctx, "/api.UserService/SetFullname", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SetFullnameStream(ctx context.Context, opts ...grpc.CallOption) (UserService_SetFullnameStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &UserService_ServiceDesc.Streams[5], "/api.UserService/SetFullnameStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &userServiceSetFullnameStreamClient{stream}
	return x, nil
}

type UserService_SetFullnameStreamClient interface {
	Send(*SetFullnameRequest) error
	Recv() (*SetFullnameResponse, error)
	grpc.ClientStream
}

type userServiceSetFullnameStreamClient struct {
	grpc.ClientStream
}

func (x *userServiceSetFullnameStreamClient) Send(m *SetFullnameRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *userServiceSetFullnameStreamClient) Recv() (*SetFullnameResponse, error) {
	m := new(SetFullnameResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userServiceClient) SetAvatar(ctx context.Context, in *SetAvatarRequest, opts ...grpc.CallOption) (*SetAvatarResponse, error) {
	out := new(SetAvatarResponse)
	err := c.cc.Invoke(ctx, "/api.UserService/SetAvatar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SetAvatarStream(ctx context.Context, opts ...grpc.CallOption) (UserService_SetAvatarStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &UserService_ServiceDesc.Streams[6], "/api.UserService/SetAvatarStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &userServiceSetAvatarStreamClient{stream}
	return x, nil
}

type UserService_SetAvatarStreamClient interface {
	Send(*SetAvatarRequest) error
	Recv() (*SetAvatarResponse, error)
	grpc.ClientStream
}

type userServiceSetAvatarStreamClient struct {
	grpc.ClientStream
}

func (x *userServiceSetAvatarStreamClient) Send(m *SetAvatarRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *userServiceSetAvatarStreamClient) Recv() (*SetAvatarResponse, error) {
	m := new(SetAvatarResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userServiceClient) SetConfig(ctx context.Context, in *SetConfigRequest, opts ...grpc.CallOption) (*SetConfigResponse, error) {
	out := new(SetConfigResponse)
	err := c.cc.Invoke(ctx, "/api.UserService/SetConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SetConfigStream(ctx context.Context, opts ...grpc.CallOption) (UserService_SetConfigStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &UserService_ServiceDesc.Streams[7], "/api.UserService/SetConfigStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &userServiceSetConfigStreamClient{stream}
	return x, nil
}

type UserService_SetConfigStreamClient interface {
	Send(*SetConfigRequest) error
	Recv() (*SetConfigResponse, error)
	grpc.ClientStream
}

type userServiceSetConfigStreamClient struct {
	grpc.ClientStream
}

func (x *userServiceSetConfigStreamClient) Send(m *SetConfigRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *userServiceSetConfigStreamClient) Recv() (*SetConfigResponse, error) {
	m := new(SetConfigResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userServiceClient) SetEmail(ctx context.Context, in *SetEmailRequest, opts ...grpc.CallOption) (*SetEmailResponse, error) {
	out := new(SetEmailResponse)
	err := c.cc.Invoke(ctx, "/api.UserService/SetEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SetEmailStream(ctx context.Context, opts ...grpc.CallOption) (UserService_SetEmailStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &UserService_ServiceDesc.Streams[8], "/api.UserService/SetEmailStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &userServiceSetEmailStreamClient{stream}
	return x, nil
}

type UserService_SetEmailStreamClient interface {
	Send(*SetEmailRequest) error
	Recv() (*SetEmailResponse, error)
	grpc.ClientStream
}

type userServiceSetEmailStreamClient struct {
	grpc.ClientStream
}

func (x *userServiceSetEmailStreamClient) Send(m *SetEmailRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *userServiceSetEmailStreamClient) Recv() (*SetEmailResponse, error) {
	m := new(SetEmailResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userServiceClient) SetMobile(ctx context.Context, in *SetMobileRequest, opts ...grpc.CallOption) (*SetMobileResponse, error) {
	out := new(SetMobileResponse)
	err := c.cc.Invoke(ctx, "/api.UserService/SetMobile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SetMobileStream(ctx context.Context, opts ...grpc.CallOption) (UserService_SetMobileStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &UserService_ServiceDesc.Streams[9], "/api.UserService/SetMobileStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &userServiceSetMobileStreamClient{stream}
	return x, nil
}

type UserService_SetMobileStreamClient interface {
	Send(*SetMobileRequest) error
	Recv() (*SetMobileResponse, error)
	grpc.ClientStream
}

type userServiceSetMobileStreamClient struct {
	grpc.ClientStream
}

func (x *userServiceSetMobileStreamClient) Send(m *SetMobileRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *userServiceSetMobileStreamClient) Recv() (*SetMobileResponse, error) {
	m := new(SetMobileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userServiceClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error) {
	out := new(DeleteUserResponse)
	err := c.cc.Invoke(ctx, "/api.UserService/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) DeleteUserStream(ctx context.Context, opts ...grpc.CallOption) (UserService_DeleteUserStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &UserService_ServiceDesc.Streams[10], "/api.UserService/DeleteUserStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &userServiceDeleteUserStreamClient{stream}
	return x, nil
}

type UserService_DeleteUserStreamClient interface {
	Send(*DeleteUserRequest) error
	Recv() (*DeleteUserResponse, error)
	grpc.ClientStream
}

type userServiceDeleteUserStreamClient struct {
	grpc.ClientStream
}

func (x *userServiceDeleteUserStreamClient) Send(m *DeleteUserRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *userServiceDeleteUserStreamClient) Recv() (*DeleteUserResponse, error) {
	m := new(DeleteUserResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/api.UserService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility
type UserServiceServer interface {
	// add a user
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	// add a user via stream
	CreateUserStream(UserService_CreateUserStreamServer) error
	// Get a user's info
	GetUserInfo(context.Context, *GetUserInfoRequest) (*GetUserInfoResponse, error)
	// GGet a user's info via stream
	GetUserInfoStream(UserService_GetUserInfoStreamServer) error
	// Get a user's info by nickname
	GetUserInfoByNickname(context.Context, *GetUserInfoByNicknameRequest) (*GetUserInfoResponse, error)
	// Get a user's info by nickname via stream
	GetUserInfoByNicknameStream(UserService_GetUserInfoByNicknameStreamServer) error
	// Get a user's info by email
	GetUserInfoByEmail(context.Context, *GetUserInfoByEmailRequest) (*GetUserInfoResponse, error)
	// Get a user's info by email via stream
	GetUserInfoByEmailStream(UserService_GetUserInfoByEmailStreamServer) error
	// Get a user's info by mobile
	GetUserInfoByMobile(context.Context, *GetUserInfoByMobileRequest) (*GetUserInfoResponse, error)
	// Get a user's info by mobile via stream
	GetUserInfoByMobileStream(UserService_GetUserInfoByMobileStreamServer) error
	// Set a user's fullname
	SetFullname(context.Context, *SetFullnameRequest) (*SetFullnameResponse, error)
	// Set a user's fullname via stream
	SetFullnameStream(UserService_SetFullnameStreamServer) error
	// Set a user's avatar
	SetAvatar(context.Context, *SetAvatarRequest) (*SetAvatarResponse, error)
	// Set a user's avatar via stream
	SetAvatarStream(UserService_SetAvatarStreamServer) error
	// Set a user's config
	SetConfig(context.Context, *SetConfigRequest) (*SetConfigResponse, error)
	// Set a user's config via stream
	SetConfigStream(UserService_SetConfigStreamServer) error
	// Set a user's email
	SetEmail(context.Context, *SetEmailRequest) (*SetEmailResponse, error)
	// Set a user's email via stream
	SetEmailStream(UserService_SetEmailStreamServer) error
	// Set a user's mobile
	SetMobile(context.Context, *SetMobileRequest) (*SetMobileResponse, error)
	// Set a user's mobile via stream
	SetMobileStream(UserService_SetMobileStreamServer) error
	// delete a user
	DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error)
	// delete a user via stream
	DeleteUserStream(UserService_DeleteUserStreamServer) error
	// login
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (UnimplementedUserServiceServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedUserServiceServer) CreateUserStream(UserService_CreateUserStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateUserStream not implemented")
}
func (UnimplementedUserServiceServer) GetUserInfo(context.Context, *GetUserInfoRequest) (*GetUserInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (UnimplementedUserServiceServer) GetUserInfoStream(UserService_GetUserInfoStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetUserInfoStream not implemented")
}
func (UnimplementedUserServiceServer) GetUserInfoByNickname(context.Context, *GetUserInfoByNicknameRequest) (*GetUserInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfoByNickname not implemented")
}
func (UnimplementedUserServiceServer) GetUserInfoByNicknameStream(UserService_GetUserInfoByNicknameStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetUserInfoByNicknameStream not implemented")
}
func (UnimplementedUserServiceServer) GetUserInfoByEmail(context.Context, *GetUserInfoByEmailRequest) (*GetUserInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfoByEmail not implemented")
}
func (UnimplementedUserServiceServer) GetUserInfoByEmailStream(UserService_GetUserInfoByEmailStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetUserInfoByEmailStream not implemented")
}
func (UnimplementedUserServiceServer) GetUserInfoByMobile(context.Context, *GetUserInfoByMobileRequest) (*GetUserInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfoByMobile not implemented")
}
func (UnimplementedUserServiceServer) GetUserInfoByMobileStream(UserService_GetUserInfoByMobileStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetUserInfoByMobileStream not implemented")
}
func (UnimplementedUserServiceServer) SetFullname(context.Context, *SetFullnameRequest) (*SetFullnameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetFullname not implemented")
}
func (UnimplementedUserServiceServer) SetFullnameStream(UserService_SetFullnameStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SetFullnameStream not implemented")
}
func (UnimplementedUserServiceServer) SetAvatar(context.Context, *SetAvatarRequest) (*SetAvatarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAvatar not implemented")
}
func (UnimplementedUserServiceServer) SetAvatarStream(UserService_SetAvatarStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SetAvatarStream not implemented")
}
func (UnimplementedUserServiceServer) SetConfig(context.Context, *SetConfigRequest) (*SetConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetConfig not implemented")
}
func (UnimplementedUserServiceServer) SetConfigStream(UserService_SetConfigStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SetConfigStream not implemented")
}
func (UnimplementedUserServiceServer) SetEmail(context.Context, *SetEmailRequest) (*SetEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetEmail not implemented")
}
func (UnimplementedUserServiceServer) SetEmailStream(UserService_SetEmailStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SetEmailStream not implemented")
}
func (UnimplementedUserServiceServer) SetMobile(context.Context, *SetMobileRequest) (*SetMobileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMobile not implemented")
}
func (UnimplementedUserServiceServer) SetMobileStream(UserService_SetMobileStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SetMobileStream not implemented")
}
func (UnimplementedUserServiceServer) DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedUserServiceServer) DeleteUserStream(UserService_DeleteUserStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method DeleteUserStream not implemented")
}
func (UnimplementedUserServiceServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserService/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_CreateUserStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserServiceServer).CreateUserStream(&userServiceCreateUserStreamServer{stream})
}

type UserService_CreateUserStreamServer interface {
	Send(*CreateUserResponse) error
	Recv() (*CreateUserRequest, error)
	grpc.ServerStream
}

type userServiceCreateUserStreamServer struct {
	grpc.ServerStream
}

func (x *userServiceCreateUserStreamServer) Send(m *CreateUserResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *userServiceCreateUserStreamServer) Recv() (*CreateUserRequest, error) {
	m := new(CreateUserRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _UserService_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserService/GetUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserInfo(ctx, req.(*GetUserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserInfoStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserServiceServer).GetUserInfoStream(&userServiceGetUserInfoStreamServer{stream})
}

type UserService_GetUserInfoStreamServer interface {
	Send(*GetUserInfoResponse) error
	Recv() (*GetUserInfoRequest, error)
	grpc.ServerStream
}

type userServiceGetUserInfoStreamServer struct {
	grpc.ServerStream
}

func (x *userServiceGetUserInfoStreamServer) Send(m *GetUserInfoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *userServiceGetUserInfoStreamServer) Recv() (*GetUserInfoRequest, error) {
	m := new(GetUserInfoRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _UserService_GetUserInfoByNickname_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoByNicknameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserInfoByNickname(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserService/GetUserInfoByNickname",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserInfoByNickname(ctx, req.(*GetUserInfoByNicknameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserInfoByNicknameStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserServiceServer).GetUserInfoByNicknameStream(&userServiceGetUserInfoByNicknameStreamServer{stream})
}

type UserService_GetUserInfoByNicknameStreamServer interface {
	Send(*GetUserInfoResponse) error
	Recv() (*GetUserInfoByNicknameRequest, error)
	grpc.ServerStream
}

type userServiceGetUserInfoByNicknameStreamServer struct {
	grpc.ServerStream
}

func (x *userServiceGetUserInfoByNicknameStreamServer) Send(m *GetUserInfoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *userServiceGetUserInfoByNicknameStreamServer) Recv() (*GetUserInfoByNicknameRequest, error) {
	m := new(GetUserInfoByNicknameRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _UserService_GetUserInfoByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoByEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserInfoByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserService/GetUserInfoByEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserInfoByEmail(ctx, req.(*GetUserInfoByEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserInfoByEmailStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserServiceServer).GetUserInfoByEmailStream(&userServiceGetUserInfoByEmailStreamServer{stream})
}

type UserService_GetUserInfoByEmailStreamServer interface {
	Send(*GetUserInfoResponse) error
	Recv() (*GetUserInfoByEmailRequest, error)
	grpc.ServerStream
}

type userServiceGetUserInfoByEmailStreamServer struct {
	grpc.ServerStream
}

func (x *userServiceGetUserInfoByEmailStreamServer) Send(m *GetUserInfoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *userServiceGetUserInfoByEmailStreamServer) Recv() (*GetUserInfoByEmailRequest, error) {
	m := new(GetUserInfoByEmailRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _UserService_GetUserInfoByMobile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoByMobileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUserInfoByMobile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserService/GetUserInfoByMobile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUserInfoByMobile(ctx, req.(*GetUserInfoByMobileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUserInfoByMobileStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserServiceServer).GetUserInfoByMobileStream(&userServiceGetUserInfoByMobileStreamServer{stream})
}

type UserService_GetUserInfoByMobileStreamServer interface {
	Send(*GetUserInfoResponse) error
	Recv() (*GetUserInfoByMobileRequest, error)
	grpc.ServerStream
}

type userServiceGetUserInfoByMobileStreamServer struct {
	grpc.ServerStream
}

func (x *userServiceGetUserInfoByMobileStreamServer) Send(m *GetUserInfoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *userServiceGetUserInfoByMobileStreamServer) Recv() (*GetUserInfoByMobileRequest, error) {
	m := new(GetUserInfoByMobileRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _UserService_SetFullname_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetFullnameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SetFullname(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserService/SetFullname",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SetFullname(ctx, req.(*SetFullnameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_SetFullnameStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserServiceServer).SetFullnameStream(&userServiceSetFullnameStreamServer{stream})
}

type UserService_SetFullnameStreamServer interface {
	Send(*SetFullnameResponse) error
	Recv() (*SetFullnameRequest, error)
	grpc.ServerStream
}

type userServiceSetFullnameStreamServer struct {
	grpc.ServerStream
}

func (x *userServiceSetFullnameStreamServer) Send(m *SetFullnameResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *userServiceSetFullnameStreamServer) Recv() (*SetFullnameRequest, error) {
	m := new(SetFullnameRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _UserService_SetAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAvatarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SetAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserService/SetAvatar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SetAvatar(ctx, req.(*SetAvatarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_SetAvatarStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserServiceServer).SetAvatarStream(&userServiceSetAvatarStreamServer{stream})
}

type UserService_SetAvatarStreamServer interface {
	Send(*SetAvatarResponse) error
	Recv() (*SetAvatarRequest, error)
	grpc.ServerStream
}

type userServiceSetAvatarStreamServer struct {
	grpc.ServerStream
}

func (x *userServiceSetAvatarStreamServer) Send(m *SetAvatarResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *userServiceSetAvatarStreamServer) Recv() (*SetAvatarRequest, error) {
	m := new(SetAvatarRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _UserService_SetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserService/SetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SetConfig(ctx, req.(*SetConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_SetConfigStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserServiceServer).SetConfigStream(&userServiceSetConfigStreamServer{stream})
}

type UserService_SetConfigStreamServer interface {
	Send(*SetConfigResponse) error
	Recv() (*SetConfigRequest, error)
	grpc.ServerStream
}

type userServiceSetConfigStreamServer struct {
	grpc.ServerStream
}

func (x *userServiceSetConfigStreamServer) Send(m *SetConfigResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *userServiceSetConfigStreamServer) Recv() (*SetConfigRequest, error) {
	m := new(SetConfigRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _UserService_SetEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SetEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserService/SetEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SetEmail(ctx, req.(*SetEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_SetEmailStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserServiceServer).SetEmailStream(&userServiceSetEmailStreamServer{stream})
}

type UserService_SetEmailStreamServer interface {
	Send(*SetEmailResponse) error
	Recv() (*SetEmailRequest, error)
	grpc.ServerStream
}

type userServiceSetEmailStreamServer struct {
	grpc.ServerStream
}

func (x *userServiceSetEmailStreamServer) Send(m *SetEmailResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *userServiceSetEmailStreamServer) Recv() (*SetEmailRequest, error) {
	m := new(SetEmailRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _UserService_SetMobile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMobileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SetMobile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserService/SetMobile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SetMobile(ctx, req.(*SetMobileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_SetMobileStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserServiceServer).SetMobileStream(&userServiceSetMobileStreamServer{stream})
}

type UserService_SetMobileStreamServer interface {
	Send(*SetMobileResponse) error
	Recv() (*SetMobileRequest, error)
	grpc.ServerStream
}

type userServiceSetMobileStreamServer struct {
	grpc.ServerStream
}

func (x *userServiceSetMobileStreamServer) Send(m *SetMobileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *userServiceSetMobileStreamServer) Recv() (*SetMobileRequest, error) {
	m := new(SetMobileRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _UserService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserService/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_DeleteUserStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserServiceServer).DeleteUserStream(&userServiceDeleteUserStreamServer{stream})
}

type UserService_DeleteUserStreamServer interface {
	Send(*DeleteUserResponse) error
	Recv() (*DeleteUserRequest, error)
	grpc.ServerStream
}

type userServiceDeleteUserStreamServer struct {
	grpc.ServerStream
}

func (x *userServiceDeleteUserStreamServer) Send(m *DeleteUserResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *userServiceDeleteUserStreamServer) Recv() (*DeleteUserRequest, error) {
	m := new(DeleteUserRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _UserService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.UserService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _UserService_CreateUser_Handler,
		},
		{
			MethodName: "GetUserInfo",
			Handler:    _UserService_GetUserInfo_Handler,
		},
		{
			MethodName: "GetUserInfoByNickname",
			Handler:    _UserService_GetUserInfoByNickname_Handler,
		},
		{
			MethodName: "GetUserInfoByEmail",
			Handler:    _UserService_GetUserInfoByEmail_Handler,
		},
		{
			MethodName: "GetUserInfoByMobile",
			Handler:    _UserService_GetUserInfoByMobile_Handler,
		},
		{
			MethodName: "SetFullname",
			Handler:    _UserService_SetFullname_Handler,
		},
		{
			MethodName: "SetAvatar",
			Handler:    _UserService_SetAvatar_Handler,
		},
		{
			MethodName: "SetConfig",
			Handler:    _UserService_SetConfig_Handler,
		},
		{
			MethodName: "SetEmail",
			Handler:    _UserService_SetEmail_Handler,
		},
		{
			MethodName: "SetMobile",
			Handler:    _UserService_SetMobile_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _UserService_DeleteUser_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _UserService_Login_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateUserStream",
			Handler:       _UserService_CreateUserStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetUserInfoStream",
			Handler:       _UserService_GetUserInfoStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetUserInfoByNicknameStream",
			Handler:       _UserService_GetUserInfoByNicknameStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetUserInfoByEmailStream",
			Handler:       _UserService_GetUserInfoByEmailStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetUserInfoByMobileStream",
			Handler:       _UserService_GetUserInfoByMobileStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SetFullnameStream",
			Handler:       _UserService_SetFullnameStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SetAvatarStream",
			Handler:       _UserService_SetAvatarStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SetConfigStream",
			Handler:       _UserService_SetConfigStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SetEmailStream",
			Handler:       _UserService_SetEmailStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SetMobileStream",
			Handler:       _UserService_SetMobileStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "DeleteUserStream",
			Handler:       _UserService_DeleteUserStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "user.proto",
}
