// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: user.proto

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserClient interface {
	// add a user
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error)
	// add a user via stream
	CreateUserStream(ctx context.Context, opts ...grpc.CallOption) (User_CreateUserStreamClient, error)
	// Get a user's info
	GetUserInfo(ctx context.Context, in *GetUserInfoRequest, opts ...grpc.CallOption) (*GetUserInfoResponse, error)
	// GGet a user's info via stream
	GetUserInfoStream(ctx context.Context, opts ...grpc.CallOption) (User_GetUserInfoStreamClient, error)
	// Get a user's info by nickname
	GetUserInfoByNickname(ctx context.Context, in *GetUserInfoByNicknameRequest, opts ...grpc.CallOption) (*GetUserInfoResponse, error)
	// Get a user's info by nickname via stream
	GetUserInfoByNicknameStream(ctx context.Context, opts ...grpc.CallOption) (User_GetUserInfoByNicknameStreamClient, error)
	// Get a user's info by email
	GetUserInfoByEmail(ctx context.Context, in *GetUserInfoByEmailRequest, opts ...grpc.CallOption) (*GetUserInfoResponse, error)
	// Get a user's info by email via stream
	GetUserInfoByEmailStream(ctx context.Context, opts ...grpc.CallOption) (User_GetUserInfoByEmailStreamClient, error)
	// Get a user's info by mobile
	GetUserInfoByMobile(ctx context.Context, in *GetUserInfoByMobileRequest, opts ...grpc.CallOption) (*GetUserInfoResponse, error)
	// Get a user's info by mobile via stream
	GetUserInfoByMobileStream(ctx context.Context, opts ...grpc.CallOption) (User_GetUserInfoByMobileStreamClient, error)
	// Set a user's fullname
	SetFullname(ctx context.Context, in *SetFullnameRequest, opts ...grpc.CallOption) (*SetFullnameResponse, error)
	// Set a user's fullname via stream
	SetFullnameStream(ctx context.Context, opts ...grpc.CallOption) (User_SetFullnameStreamClient, error)
	// Set a user's avatar
	SetAvatar(ctx context.Context, in *SetAvatarRequest, opts ...grpc.CallOption) (*SetAvatarResponse, error)
	// Set a user's avatar via stream
	SetAvatarStream(ctx context.Context, opts ...grpc.CallOption) (User_SetAvatarStreamClient, error)
	// Set a user's config
	SetConfig(ctx context.Context, in *SetConfigRequest, opts ...grpc.CallOption) (*SetConfigResponse, error)
	// Set a user's config via stream
	SetConfigStream(ctx context.Context, opts ...grpc.CallOption) (User_SetConfigStreamClient, error)
	// Set a user's email
	SetEmail(ctx context.Context, in *SetEmailRequest, opts ...grpc.CallOption) (*SetEmailResponse, error)
	// Set a user's email via stream
	SetEmailStream(ctx context.Context, opts ...grpc.CallOption) (User_SetEmailStreamClient, error)
	// Set a user's mobile
	SetMobile(ctx context.Context, in *SetMobileRequest, opts ...grpc.CallOption) (*SetMobileResponse, error)
	// Set a user's mobile via stream
	SetMobileStream(ctx context.Context, opts ...grpc.CallOption) (User_SetMobileStreamClient, error)
	// delete a user
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error)
	// delete a user via stream
	DeleteUserStream(ctx context.Context, opts ...grpc.CallOption) (User_DeleteUserStreamClient, error)
	// login
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
}

type userClient struct {
	cc grpc.ClientConnInterface
}

func NewUserClient(cc grpc.ClientConnInterface) UserClient {
	return &userClient{cc}
}

func (c *userClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*CreateUserResponse, error) {
	out := new(CreateUserResponse)
	err := c.cc.Invoke(ctx, "/user.User/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) CreateUserStream(ctx context.Context, opts ...grpc.CallOption) (User_CreateUserStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &User_ServiceDesc.Streams[0], "/user.User/CreateUserStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &userCreateUserStreamClient{stream}
	return x, nil
}

type User_CreateUserStreamClient interface {
	Send(*CreateUserRequest) error
	Recv() (*CreateUserResponse, error)
	grpc.ClientStream
}

type userCreateUserStreamClient struct {
	grpc.ClientStream
}

func (x *userCreateUserStreamClient) Send(m *CreateUserRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *userCreateUserStreamClient) Recv() (*CreateUserResponse, error) {
	m := new(CreateUserResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userClient) GetUserInfo(ctx context.Context, in *GetUserInfoRequest, opts ...grpc.CallOption) (*GetUserInfoResponse, error) {
	out := new(GetUserInfoResponse)
	err := c.cc.Invoke(ctx, "/user.User/GetUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetUserInfoStream(ctx context.Context, opts ...grpc.CallOption) (User_GetUserInfoStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &User_ServiceDesc.Streams[1], "/user.User/GetUserInfoStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &userGetUserInfoStreamClient{stream}
	return x, nil
}

type User_GetUserInfoStreamClient interface {
	Send(*GetUserInfoRequest) error
	Recv() (*GetUserInfoResponse, error)
	grpc.ClientStream
}

type userGetUserInfoStreamClient struct {
	grpc.ClientStream
}

func (x *userGetUserInfoStreamClient) Send(m *GetUserInfoRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *userGetUserInfoStreamClient) Recv() (*GetUserInfoResponse, error) {
	m := new(GetUserInfoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userClient) GetUserInfoByNickname(ctx context.Context, in *GetUserInfoByNicknameRequest, opts ...grpc.CallOption) (*GetUserInfoResponse, error) {
	out := new(GetUserInfoResponse)
	err := c.cc.Invoke(ctx, "/user.User/GetUserInfoByNickname", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetUserInfoByNicknameStream(ctx context.Context, opts ...grpc.CallOption) (User_GetUserInfoByNicknameStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &User_ServiceDesc.Streams[2], "/user.User/GetUserInfoByNicknameStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &userGetUserInfoByNicknameStreamClient{stream}
	return x, nil
}

type User_GetUserInfoByNicknameStreamClient interface {
	Send(*GetUserInfoByNicknameRequest) error
	Recv() (*GetUserInfoResponse, error)
	grpc.ClientStream
}

type userGetUserInfoByNicknameStreamClient struct {
	grpc.ClientStream
}

func (x *userGetUserInfoByNicknameStreamClient) Send(m *GetUserInfoByNicknameRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *userGetUserInfoByNicknameStreamClient) Recv() (*GetUserInfoResponse, error) {
	m := new(GetUserInfoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userClient) GetUserInfoByEmail(ctx context.Context, in *GetUserInfoByEmailRequest, opts ...grpc.CallOption) (*GetUserInfoResponse, error) {
	out := new(GetUserInfoResponse)
	err := c.cc.Invoke(ctx, "/user.User/GetUserInfoByEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetUserInfoByEmailStream(ctx context.Context, opts ...grpc.CallOption) (User_GetUserInfoByEmailStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &User_ServiceDesc.Streams[3], "/user.User/GetUserInfoByEmailStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &userGetUserInfoByEmailStreamClient{stream}
	return x, nil
}

type User_GetUserInfoByEmailStreamClient interface {
	Send(*GetUserInfoByEmailRequest) error
	Recv() (*GetUserInfoResponse, error)
	grpc.ClientStream
}

type userGetUserInfoByEmailStreamClient struct {
	grpc.ClientStream
}

func (x *userGetUserInfoByEmailStreamClient) Send(m *GetUserInfoByEmailRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *userGetUserInfoByEmailStreamClient) Recv() (*GetUserInfoResponse, error) {
	m := new(GetUserInfoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userClient) GetUserInfoByMobile(ctx context.Context, in *GetUserInfoByMobileRequest, opts ...grpc.CallOption) (*GetUserInfoResponse, error) {
	out := new(GetUserInfoResponse)
	err := c.cc.Invoke(ctx, "/user.User/GetUserInfoByMobile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetUserInfoByMobileStream(ctx context.Context, opts ...grpc.CallOption) (User_GetUserInfoByMobileStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &User_ServiceDesc.Streams[4], "/user.User/GetUserInfoByMobileStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &userGetUserInfoByMobileStreamClient{stream}
	return x, nil
}

type User_GetUserInfoByMobileStreamClient interface {
	Send(*GetUserInfoByMobileRequest) error
	Recv() (*GetUserInfoResponse, error)
	grpc.ClientStream
}

type userGetUserInfoByMobileStreamClient struct {
	grpc.ClientStream
}

func (x *userGetUserInfoByMobileStreamClient) Send(m *GetUserInfoByMobileRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *userGetUserInfoByMobileStreamClient) Recv() (*GetUserInfoResponse, error) {
	m := new(GetUserInfoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userClient) SetFullname(ctx context.Context, in *SetFullnameRequest, opts ...grpc.CallOption) (*SetFullnameResponse, error) {
	out := new(SetFullnameResponse)
	err := c.cc.Invoke(ctx, "/user.User/SetFullname", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SetFullnameStream(ctx context.Context, opts ...grpc.CallOption) (User_SetFullnameStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &User_ServiceDesc.Streams[5], "/user.User/SetFullnameStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &userSetFullnameStreamClient{stream}
	return x, nil
}

type User_SetFullnameStreamClient interface {
	Send(*SetFullnameRequest) error
	Recv() (*SetFullnameResponse, error)
	grpc.ClientStream
}

type userSetFullnameStreamClient struct {
	grpc.ClientStream
}

func (x *userSetFullnameStreamClient) Send(m *SetFullnameRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *userSetFullnameStreamClient) Recv() (*SetFullnameResponse, error) {
	m := new(SetFullnameResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userClient) SetAvatar(ctx context.Context, in *SetAvatarRequest, opts ...grpc.CallOption) (*SetAvatarResponse, error) {
	out := new(SetAvatarResponse)
	err := c.cc.Invoke(ctx, "/user.User/SetAvatar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SetAvatarStream(ctx context.Context, opts ...grpc.CallOption) (User_SetAvatarStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &User_ServiceDesc.Streams[6], "/user.User/SetAvatarStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &userSetAvatarStreamClient{stream}
	return x, nil
}

type User_SetAvatarStreamClient interface {
	Send(*SetAvatarRequest) error
	Recv() (*SetAvatarResponse, error)
	grpc.ClientStream
}

type userSetAvatarStreamClient struct {
	grpc.ClientStream
}

func (x *userSetAvatarStreamClient) Send(m *SetAvatarRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *userSetAvatarStreamClient) Recv() (*SetAvatarResponse, error) {
	m := new(SetAvatarResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userClient) SetConfig(ctx context.Context, in *SetConfigRequest, opts ...grpc.CallOption) (*SetConfigResponse, error) {
	out := new(SetConfigResponse)
	err := c.cc.Invoke(ctx, "/user.User/SetConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SetConfigStream(ctx context.Context, opts ...grpc.CallOption) (User_SetConfigStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &User_ServiceDesc.Streams[7], "/user.User/SetConfigStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &userSetConfigStreamClient{stream}
	return x, nil
}

type User_SetConfigStreamClient interface {
	Send(*SetConfigRequest) error
	Recv() (*SetConfigResponse, error)
	grpc.ClientStream
}

type userSetConfigStreamClient struct {
	grpc.ClientStream
}

func (x *userSetConfigStreamClient) Send(m *SetConfigRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *userSetConfigStreamClient) Recv() (*SetConfigResponse, error) {
	m := new(SetConfigResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userClient) SetEmail(ctx context.Context, in *SetEmailRequest, opts ...grpc.CallOption) (*SetEmailResponse, error) {
	out := new(SetEmailResponse)
	err := c.cc.Invoke(ctx, "/user.User/SetEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SetEmailStream(ctx context.Context, opts ...grpc.CallOption) (User_SetEmailStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &User_ServiceDesc.Streams[8], "/user.User/SetEmailStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &userSetEmailStreamClient{stream}
	return x, nil
}

type User_SetEmailStreamClient interface {
	Send(*SetEmailRequest) error
	Recv() (*SetEmailResponse, error)
	grpc.ClientStream
}

type userSetEmailStreamClient struct {
	grpc.ClientStream
}

func (x *userSetEmailStreamClient) Send(m *SetEmailRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *userSetEmailStreamClient) Recv() (*SetEmailResponse, error) {
	m := new(SetEmailResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userClient) SetMobile(ctx context.Context, in *SetMobileRequest, opts ...grpc.CallOption) (*SetMobileResponse, error) {
	out := new(SetMobileResponse)
	err := c.cc.Invoke(ctx, "/user.User/SetMobile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) SetMobileStream(ctx context.Context, opts ...grpc.CallOption) (User_SetMobileStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &User_ServiceDesc.Streams[9], "/user.User/SetMobileStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &userSetMobileStreamClient{stream}
	return x, nil
}

type User_SetMobileStreamClient interface {
	Send(*SetMobileRequest) error
	Recv() (*SetMobileResponse, error)
	grpc.ClientStream
}

type userSetMobileStreamClient struct {
	grpc.ClientStream
}

func (x *userSetMobileStreamClient) Send(m *SetMobileRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *userSetMobileStreamClient) Recv() (*SetMobileResponse, error) {
	m := new(SetMobileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error) {
	out := new(DeleteUserResponse)
	err := c.cc.Invoke(ctx, "/user.User/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) DeleteUserStream(ctx context.Context, opts ...grpc.CallOption) (User_DeleteUserStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &User_ServiceDesc.Streams[10], "/user.User/DeleteUserStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &userDeleteUserStreamClient{stream}
	return x, nil
}

type User_DeleteUserStreamClient interface {
	Send(*DeleteUserRequest) error
	Recv() (*DeleteUserResponse, error)
	grpc.ClientStream
}

type userDeleteUserStreamClient struct {
	grpc.ClientStream
}

func (x *userDeleteUserStreamClient) Send(m *DeleteUserRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *userDeleteUserStreamClient) Recv() (*DeleteUserResponse, error) {
	m := new(DeleteUserResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/user.User/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServer is the server API for User service.
// All implementations must embed UnimplementedUserServer
// for forward compatibility
type UserServer interface {
	// add a user
	CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error)
	// add a user via stream
	CreateUserStream(User_CreateUserStreamServer) error
	// Get a user's info
	GetUserInfo(context.Context, *GetUserInfoRequest) (*GetUserInfoResponse, error)
	// GGet a user's info via stream
	GetUserInfoStream(User_GetUserInfoStreamServer) error
	// Get a user's info by nickname
	GetUserInfoByNickname(context.Context, *GetUserInfoByNicknameRequest) (*GetUserInfoResponse, error)
	// Get a user's info by nickname via stream
	GetUserInfoByNicknameStream(User_GetUserInfoByNicknameStreamServer) error
	// Get a user's info by email
	GetUserInfoByEmail(context.Context, *GetUserInfoByEmailRequest) (*GetUserInfoResponse, error)
	// Get a user's info by email via stream
	GetUserInfoByEmailStream(User_GetUserInfoByEmailStreamServer) error
	// Get a user's info by mobile
	GetUserInfoByMobile(context.Context, *GetUserInfoByMobileRequest) (*GetUserInfoResponse, error)
	// Get a user's info by mobile via stream
	GetUserInfoByMobileStream(User_GetUserInfoByMobileStreamServer) error
	// Set a user's fullname
	SetFullname(context.Context, *SetFullnameRequest) (*SetFullnameResponse, error)
	// Set a user's fullname via stream
	SetFullnameStream(User_SetFullnameStreamServer) error
	// Set a user's avatar
	SetAvatar(context.Context, *SetAvatarRequest) (*SetAvatarResponse, error)
	// Set a user's avatar via stream
	SetAvatarStream(User_SetAvatarStreamServer) error
	// Set a user's config
	SetConfig(context.Context, *SetConfigRequest) (*SetConfigResponse, error)
	// Set a user's config via stream
	SetConfigStream(User_SetConfigStreamServer) error
	// Set a user's email
	SetEmail(context.Context, *SetEmailRequest) (*SetEmailResponse, error)
	// Set a user's email via stream
	SetEmailStream(User_SetEmailStreamServer) error
	// Set a user's mobile
	SetMobile(context.Context, *SetMobileRequest) (*SetMobileResponse, error)
	// Set a user's mobile via stream
	SetMobileStream(User_SetMobileStreamServer) error
	// delete a user
	DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error)
	// delete a user via stream
	DeleteUserStream(User_DeleteUserStreamServer) error
	// login
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	mustEmbedUnimplementedUserServer()
}

// UnimplementedUserServer must be embedded to have forward compatible implementations.
type UnimplementedUserServer struct {
}

func (UnimplementedUserServer) CreateUser(context.Context, *CreateUserRequest) (*CreateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedUserServer) CreateUserStream(User_CreateUserStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateUserStream not implemented")
}
func (UnimplementedUserServer) GetUserInfo(context.Context, *GetUserInfoRequest) (*GetUserInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (UnimplementedUserServer) GetUserInfoStream(User_GetUserInfoStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetUserInfoStream not implemented")
}
func (UnimplementedUserServer) GetUserInfoByNickname(context.Context, *GetUserInfoByNicknameRequest) (*GetUserInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfoByNickname not implemented")
}
func (UnimplementedUserServer) GetUserInfoByNicknameStream(User_GetUserInfoByNicknameStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetUserInfoByNicknameStream not implemented")
}
func (UnimplementedUserServer) GetUserInfoByEmail(context.Context, *GetUserInfoByEmailRequest) (*GetUserInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfoByEmail not implemented")
}
func (UnimplementedUserServer) GetUserInfoByEmailStream(User_GetUserInfoByEmailStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetUserInfoByEmailStream not implemented")
}
func (UnimplementedUserServer) GetUserInfoByMobile(context.Context, *GetUserInfoByMobileRequest) (*GetUserInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfoByMobile not implemented")
}
func (UnimplementedUserServer) GetUserInfoByMobileStream(User_GetUserInfoByMobileStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetUserInfoByMobileStream not implemented")
}
func (UnimplementedUserServer) SetFullname(context.Context, *SetFullnameRequest) (*SetFullnameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetFullname not implemented")
}
func (UnimplementedUserServer) SetFullnameStream(User_SetFullnameStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SetFullnameStream not implemented")
}
func (UnimplementedUserServer) SetAvatar(context.Context, *SetAvatarRequest) (*SetAvatarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAvatar not implemented")
}
func (UnimplementedUserServer) SetAvatarStream(User_SetAvatarStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SetAvatarStream not implemented")
}
func (UnimplementedUserServer) SetConfig(context.Context, *SetConfigRequest) (*SetConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetConfig not implemented")
}
func (UnimplementedUserServer) SetConfigStream(User_SetConfigStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SetConfigStream not implemented")
}
func (UnimplementedUserServer) SetEmail(context.Context, *SetEmailRequest) (*SetEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetEmail not implemented")
}
func (UnimplementedUserServer) SetEmailStream(User_SetEmailStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SetEmailStream not implemented")
}
func (UnimplementedUserServer) SetMobile(context.Context, *SetMobileRequest) (*SetMobileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMobile not implemented")
}
func (UnimplementedUserServer) SetMobileStream(User_SetMobileStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SetMobileStream not implemented")
}
func (UnimplementedUserServer) DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedUserServer) DeleteUserStream(User_DeleteUserStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method DeleteUserStream not implemented")
}
func (UnimplementedUserServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedUserServer) mustEmbedUnimplementedUserServer() {}

// UnsafeUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServer will
// result in compilation errors.
type UnsafeUserServer interface {
	mustEmbedUnimplementedUserServer()
}

func RegisterUserServer(s grpc.ServiceRegistrar, srv UserServer) {
	s.RegisterService(&User_ServiceDesc, srv)
}

func _User_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_CreateUserStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserServer).CreateUserStream(&userCreateUserStreamServer{stream})
}

type User_CreateUserStreamServer interface {
	Send(*CreateUserResponse) error
	Recv() (*CreateUserRequest, error)
	grpc.ServerStream
}

type userCreateUserStreamServer struct {
	grpc.ServerStream
}

func (x *userCreateUserStreamServer) Send(m *CreateUserResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *userCreateUserStreamServer) Recv() (*CreateUserRequest, error) {
	m := new(CreateUserRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _User_GetUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/GetUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUserInfo(ctx, req.(*GetUserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetUserInfoStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserServer).GetUserInfoStream(&userGetUserInfoStreamServer{stream})
}

type User_GetUserInfoStreamServer interface {
	Send(*GetUserInfoResponse) error
	Recv() (*GetUserInfoRequest, error)
	grpc.ServerStream
}

type userGetUserInfoStreamServer struct {
	grpc.ServerStream
}

func (x *userGetUserInfoStreamServer) Send(m *GetUserInfoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *userGetUserInfoStreamServer) Recv() (*GetUserInfoRequest, error) {
	m := new(GetUserInfoRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _User_GetUserInfoByNickname_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoByNicknameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUserInfoByNickname(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/GetUserInfoByNickname",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUserInfoByNickname(ctx, req.(*GetUserInfoByNicknameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetUserInfoByNicknameStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserServer).GetUserInfoByNicknameStream(&userGetUserInfoByNicknameStreamServer{stream})
}

type User_GetUserInfoByNicknameStreamServer interface {
	Send(*GetUserInfoResponse) error
	Recv() (*GetUserInfoByNicknameRequest, error)
	grpc.ServerStream
}

type userGetUserInfoByNicknameStreamServer struct {
	grpc.ServerStream
}

func (x *userGetUserInfoByNicknameStreamServer) Send(m *GetUserInfoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *userGetUserInfoByNicknameStreamServer) Recv() (*GetUserInfoByNicknameRequest, error) {
	m := new(GetUserInfoByNicknameRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _User_GetUserInfoByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoByEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUserInfoByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/GetUserInfoByEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUserInfoByEmail(ctx, req.(*GetUserInfoByEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetUserInfoByEmailStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserServer).GetUserInfoByEmailStream(&userGetUserInfoByEmailStreamServer{stream})
}

type User_GetUserInfoByEmailStreamServer interface {
	Send(*GetUserInfoResponse) error
	Recv() (*GetUserInfoByEmailRequest, error)
	grpc.ServerStream
}

type userGetUserInfoByEmailStreamServer struct {
	grpc.ServerStream
}

func (x *userGetUserInfoByEmailStreamServer) Send(m *GetUserInfoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *userGetUserInfoByEmailStreamServer) Recv() (*GetUserInfoByEmailRequest, error) {
	m := new(GetUserInfoByEmailRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _User_GetUserInfoByMobile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoByMobileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUserInfoByMobile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/GetUserInfoByMobile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUserInfoByMobile(ctx, req.(*GetUserInfoByMobileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetUserInfoByMobileStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserServer).GetUserInfoByMobileStream(&userGetUserInfoByMobileStreamServer{stream})
}

type User_GetUserInfoByMobileStreamServer interface {
	Send(*GetUserInfoResponse) error
	Recv() (*GetUserInfoByMobileRequest, error)
	grpc.ServerStream
}

type userGetUserInfoByMobileStreamServer struct {
	grpc.ServerStream
}

func (x *userGetUserInfoByMobileStreamServer) Send(m *GetUserInfoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *userGetUserInfoByMobileStreamServer) Recv() (*GetUserInfoByMobileRequest, error) {
	m := new(GetUserInfoByMobileRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _User_SetFullname_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetFullnameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SetFullname(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/SetFullname",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SetFullname(ctx, req.(*SetFullnameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SetFullnameStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserServer).SetFullnameStream(&userSetFullnameStreamServer{stream})
}

type User_SetFullnameStreamServer interface {
	Send(*SetFullnameResponse) error
	Recv() (*SetFullnameRequest, error)
	grpc.ServerStream
}

type userSetFullnameStreamServer struct {
	grpc.ServerStream
}

func (x *userSetFullnameStreamServer) Send(m *SetFullnameResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *userSetFullnameStreamServer) Recv() (*SetFullnameRequest, error) {
	m := new(SetFullnameRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _User_SetAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAvatarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SetAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/SetAvatar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SetAvatar(ctx, req.(*SetAvatarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SetAvatarStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserServer).SetAvatarStream(&userSetAvatarStreamServer{stream})
}

type User_SetAvatarStreamServer interface {
	Send(*SetAvatarResponse) error
	Recv() (*SetAvatarRequest, error)
	grpc.ServerStream
}

type userSetAvatarStreamServer struct {
	grpc.ServerStream
}

func (x *userSetAvatarStreamServer) Send(m *SetAvatarResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *userSetAvatarStreamServer) Recv() (*SetAvatarRequest, error) {
	m := new(SetAvatarRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _User_SetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/SetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SetConfig(ctx, req.(*SetConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SetConfigStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserServer).SetConfigStream(&userSetConfigStreamServer{stream})
}

type User_SetConfigStreamServer interface {
	Send(*SetConfigResponse) error
	Recv() (*SetConfigRequest, error)
	grpc.ServerStream
}

type userSetConfigStreamServer struct {
	grpc.ServerStream
}

func (x *userSetConfigStreamServer) Send(m *SetConfigResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *userSetConfigStreamServer) Recv() (*SetConfigRequest, error) {
	m := new(SetConfigRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _User_SetEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SetEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/SetEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SetEmail(ctx, req.(*SetEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SetEmailStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserServer).SetEmailStream(&userSetEmailStreamServer{stream})
}

type User_SetEmailStreamServer interface {
	Send(*SetEmailResponse) error
	Recv() (*SetEmailRequest, error)
	grpc.ServerStream
}

type userSetEmailStreamServer struct {
	grpc.ServerStream
}

func (x *userSetEmailStreamServer) Send(m *SetEmailResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *userSetEmailStreamServer) Recv() (*SetEmailRequest, error) {
	m := new(SetEmailRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _User_SetMobile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetMobileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SetMobile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/SetMobile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SetMobile(ctx, req.(*SetMobileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_SetMobileStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserServer).SetMobileStream(&userSetMobileStreamServer{stream})
}

type User_SetMobileStreamServer interface {
	Send(*SetMobileResponse) error
	Recv() (*SetMobileRequest, error)
	grpc.ServerStream
}

type userSetMobileStreamServer struct {
	grpc.ServerStream
}

func (x *userSetMobileStreamServer) Send(m *SetMobileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *userSetMobileStreamServer) Recv() (*SetMobileRequest, error) {
	m := new(SetMobileRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _User_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_DeleteUserStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserServer).DeleteUserStream(&userDeleteUserStreamServer{stream})
}

type User_DeleteUserStreamServer interface {
	Send(*DeleteUserResponse) error
	Recv() (*DeleteUserRequest, error)
	grpc.ServerStream
}

type userDeleteUserStreamServer struct {
	grpc.ServerStream
}

func (x *userDeleteUserStreamServer) Send(m *DeleteUserResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *userDeleteUserStreamServer) Recv() (*DeleteUserRequest, error) {
	m := new(DeleteUserRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _User_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.User/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// User_ServiceDesc is the grpc.ServiceDesc for User service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var User_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _User_CreateUser_Handler,
		},
		{
			MethodName: "GetUserInfo",
			Handler:    _User_GetUserInfo_Handler,
		},
		{
			MethodName: "GetUserInfoByNickname",
			Handler:    _User_GetUserInfoByNickname_Handler,
		},
		{
			MethodName: "GetUserInfoByEmail",
			Handler:    _User_GetUserInfoByEmail_Handler,
		},
		{
			MethodName: "GetUserInfoByMobile",
			Handler:    _User_GetUserInfoByMobile_Handler,
		},
		{
			MethodName: "SetFullname",
			Handler:    _User_SetFullname_Handler,
		},
		{
			MethodName: "SetAvatar",
			Handler:    _User_SetAvatar_Handler,
		},
		{
			MethodName: "SetConfig",
			Handler:    _User_SetConfig_Handler,
		},
		{
			MethodName: "SetEmail",
			Handler:    _User_SetEmail_Handler,
		},
		{
			MethodName: "SetMobile",
			Handler:    _User_SetMobile_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _User_DeleteUser_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _User_Login_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateUserStream",
			Handler:       _User_CreateUserStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetUserInfoStream",
			Handler:       _User_GetUserInfoStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetUserInfoByNicknameStream",
			Handler:       _User_GetUserInfoByNicknameStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetUserInfoByEmailStream",
			Handler:       _User_GetUserInfoByEmailStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetUserInfoByMobileStream",
			Handler:       _User_GetUserInfoByMobileStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SetFullnameStream",
			Handler:       _User_SetFullnameStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SetAvatarStream",
			Handler:       _User_SetAvatarStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SetConfigStream",
			Handler:       _User_SetConfigStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SetEmailStream",
			Handler:       _User_SetEmailStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SetMobileStream",
			Handler:       _User_SetMobileStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "DeleteUserStream",
			Handler:       _User_DeleteUserStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "user.proto",
}
