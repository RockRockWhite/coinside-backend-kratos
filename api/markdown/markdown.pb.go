// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.7
// source: markdown.proto

package markdown

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Code int32

const (
	Code_OK                      Code = 0
	Code_ERROR_UNKNOWN           Code = 1
	Code_ERROR_MARKDOWN_NOTFOUND Code = 2
)

// Enum value maps for Code.
var (
	Code_name = map[int32]string{
		0: "OK",
		1: "ERROR_UNKNOWN",
		2: "ERROR_MARKDOWN_NOTFOUND",
	}
	Code_value = map[string]int32{
		"OK":                      0,
		"ERROR_UNKNOWN":           1,
		"ERROR_MARKDOWN_NOTFOUND": 2,
	}
)

func (x Code) Enum() *Code {
	p := new(Code)
	*p = x
	return p
}

func (x Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Code) Descriptor() protoreflect.EnumDescriptor {
	return file_markdown_proto_enumTypes[0].Descriptor()
}

func (Code) Type() protoreflect.EnumType {
	return &file_markdown_proto_enumTypes[0]
}

func (x Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Code.Descriptor instead.
func (Code) EnumDescriptor() ([]byte, []int) {
	return file_markdown_proto_rawDescGZIP(), []int{0}
}

// The response message containing the greetings
type MarkdownInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                               // Markdown id
	CardId    uint64 `protobuf:"varint,2,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`         // 所属卡片id
	Content   string `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`                      // Markdown内容
	CreatedAt string `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"` // Markdown创建时间
	UpdatedAt string `protobuf:"bytes,6,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"` // Markdown更新时间
}

func (x *MarkdownInfo) Reset() {
	*x = MarkdownInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_markdown_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkdownInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkdownInfo) ProtoMessage() {}

func (x *MarkdownInfo) ProtoReflect() protoreflect.Message {
	mi := &file_markdown_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkdownInfo.ProtoReflect.Descriptor instead.
func (*MarkdownInfo) Descriptor() ([]byte, []int) {
	return file_markdown_proto_rawDescGZIP(), []int{0}
}

func (x *MarkdownInfo) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MarkdownInfo) GetCardId() uint64 {
	if x != nil {
		return x.CardId
	}
	return 0
}

func (x *MarkdownInfo) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *MarkdownInfo) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *MarkdownInfo) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type GetMarkdownResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Markdown *MarkdownInfo `protobuf:"bytes,1,opt,name=Markdown,proto3" json:"Markdown,omitempty"`
	Code     Code          `protobuf:"varint,2,opt,name=code,proto3,enum=markdown.Code" json:"code,omitempty"`
}

func (x *GetMarkdownResponse) Reset() {
	*x = GetMarkdownResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_markdown_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMarkdownResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMarkdownResponse) ProtoMessage() {}

func (x *GetMarkdownResponse) ProtoReflect() protoreflect.Message {
	mi := &file_markdown_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMarkdownResponse.ProtoReflect.Descriptor instead.
func (*GetMarkdownResponse) Descriptor() ([]byte, []int) {
	return file_markdown_proto_rawDescGZIP(), []int{1}
}

func (x *GetMarkdownResponse) GetMarkdown() *MarkdownInfo {
	if x != nil {
		return x.Markdown
	}
	return nil
}

func (x *GetMarkdownResponse) GetCode() Code {
	if x != nil {
		return x.Code
	}
	return Code_OK
}

type GetMarkdownByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetMarkdownByIdRequest) Reset() {
	*x = GetMarkdownByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_markdown_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMarkdownByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMarkdownByIdRequest) ProtoMessage() {}

func (x *GetMarkdownByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_markdown_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMarkdownByIdRequest.ProtoReflect.Descriptor instead.
func (*GetMarkdownByIdRequest) Descriptor() ([]byte, []int) {
	return file_markdown_proto_rawDescGZIP(), []int{2}
}

func (x *GetMarkdownByIdRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type GetMarkdownsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Markdown []*MarkdownInfo `protobuf:"bytes,1,rep,name=Markdown,proto3" json:"Markdown,omitempty"`
	Code     Code            `protobuf:"varint,2,opt,name=code,proto3,enum=markdown.Code" json:"code,omitempty"`
}

func (x *GetMarkdownsResponse) Reset() {
	*x = GetMarkdownsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_markdown_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMarkdownsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMarkdownsResponse) ProtoMessage() {}

func (x *GetMarkdownsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_markdown_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMarkdownsResponse.ProtoReflect.Descriptor instead.
func (*GetMarkdownsResponse) Descriptor() ([]byte, []int) {
	return file_markdown_proto_rawDescGZIP(), []int{3}
}

func (x *GetMarkdownsResponse) GetMarkdown() []*MarkdownInfo {
	if x != nil {
		return x.Markdown
	}
	return nil
}

func (x *GetMarkdownsResponse) GetCode() Code {
	if x != nil {
		return x.Code
	}
	return Code_OK
}

type GetMarkdownsByCardIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardId uint64 `protobuf:"varint,1,opt,name=card_id,json=cardId,proto3" json:"card_id,omitempty"`
}

func (x *GetMarkdownsByCardIdRequest) Reset() {
	*x = GetMarkdownsByCardIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_markdown_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMarkdownsByCardIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMarkdownsByCardIdRequest) ProtoMessage() {}

func (x *GetMarkdownsByCardIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_markdown_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMarkdownsByCardIdRequest.ProtoReflect.Descriptor instead.
func (*GetMarkdownsByCardIdRequest) Descriptor() ([]byte, []int) {
	return file_markdown_proto_rawDescGZIP(), []int{4}
}

func (x *GetMarkdownsByCardIdRequest) GetCardId() uint64 {
	if x != nil {
		return x.CardId
	}
	return 0
}

type AddMarkdownResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code Code   `protobuf:"varint,1,opt,name=code,proto3,enum=markdown.Code" json:"code,omitempty"`
	Id   uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *AddMarkdownResponse) Reset() {
	*x = AddMarkdownResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_markdown_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddMarkdownResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddMarkdownResponse) ProtoMessage() {}

func (x *AddMarkdownResponse) ProtoReflect() protoreflect.Message {
	mi := &file_markdown_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddMarkdownResponse.ProtoReflect.Descriptor instead.
func (*AddMarkdownResponse) Descriptor() ([]byte, []int) {
	return file_markdown_proto_rawDescGZIP(), []int{5}
}

func (x *AddMarkdownResponse) GetCode() Code {
	if x != nil {
		return x.Code
	}
	return Code_OK
}

func (x *AddMarkdownResponse) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type UpdateMarkdownResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code Code `protobuf:"varint,1,opt,name=code,proto3,enum=markdown.Code" json:"code,omitempty"`
}

func (x *UpdateMarkdownResponse) Reset() {
	*x = UpdateMarkdownResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_markdown_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMarkdownResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMarkdownResponse) ProtoMessage() {}

func (x *UpdateMarkdownResponse) ProtoReflect() protoreflect.Message {
	mi := &file_markdown_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMarkdownResponse.ProtoReflect.Descriptor instead.
func (*UpdateMarkdownResponse) Descriptor() ([]byte, []int) {
	return file_markdown_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateMarkdownResponse) GetCode() Code {
	if x != nil {
		return x.Code
	}
	return Code_OK
}

type DeleteMarkdownRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteMarkdownRequest) Reset() {
	*x = DeleteMarkdownRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_markdown_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteMarkdownRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMarkdownRequest) ProtoMessage() {}

func (x *DeleteMarkdownRequest) ProtoReflect() protoreflect.Message {
	mi := &file_markdown_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMarkdownRequest.ProtoReflect.Descriptor instead.
func (*DeleteMarkdownRequest) Descriptor() ([]byte, []int) {
	return file_markdown_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteMarkdownRequest) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteMarkdownResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code Code `protobuf:"varint,1,opt,name=code,proto3,enum=markdown.Code" json:"code,omitempty"`
}

func (x *DeleteMarkdownResponse) Reset() {
	*x = DeleteMarkdownResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_markdown_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteMarkdownResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMarkdownResponse) ProtoMessage() {}

func (x *DeleteMarkdownResponse) ProtoReflect() protoreflect.Message {
	mi := &file_markdown_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMarkdownResponse.ProtoReflect.Descriptor instead.
func (*DeleteMarkdownResponse) Descriptor() ([]byte, []int) {
	return file_markdown_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteMarkdownResponse) GetCode() Code {
	if x != nil {
		return x.Code
	}
	return Code_OK
}

var File_markdown_proto protoreflect.FileDescriptor

var file_markdown_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x6d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x6d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x22, 0x8f, 0x01, 0x0a, 0x0c, 0x4d,
	0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x61,
	0x72, 0x64, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x6d, 0x0a, 0x13,
	0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e,
	0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x4d,
	0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x22, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x28, 0x0a, 0x16, 0x47,
	0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x6e, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b,
	0x64, 0x6f, 0x77, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a,
	0x08, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x64,
	0x6f, 0x77, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77,
	0x6e, 0x12, 0x22, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0e, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x36, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b,
	0x64, 0x6f, 0x77, 0x6e, 0x73, 0x42, 0x79, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x63, 0x61, 0x72, 0x64, 0x49, 0x64, 0x22, 0x49, 0x0a,
	0x13, 0x41, 0x64, 0x64, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x2e, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x3c, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0e, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x2e, 0x43, 0x6f, 0x64, 0x65,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x27, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22,
	0x3c, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x64, 0x6f,
	0x77, 0x6e, 0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x2a, 0x3e, 0x0a,
	0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x11, 0x0a,
	0x0d, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x01,
	0x12, 0x1b, 0x0a, 0x17, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4d, 0x41, 0x52, 0x4b, 0x44, 0x4f,
	0x57, 0x4e, 0x5f, 0x4e, 0x4f, 0x54, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x02, 0x32, 0x82, 0x07,
	0x0a, 0x08, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x54, 0x0a, 0x0f, 0x47, 0x65,
	0x74, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x12, 0x20, 0x2e,
	0x6d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b,
	0x64, 0x6f, 0x77, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1d, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61,
	0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x5e, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x42,
	0x79, 0x49, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x20, 0x2e, 0x6d, 0x61, 0x72, 0x6b,
	0x64, 0x6f, 0x77, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e,
	0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6d, 0x61,
	0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f,
	0x77, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01,
	0x12, 0x5f, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x73,
	0x42, 0x79, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x25, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x64,
	0x6f, 0x77, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x73,
	0x42, 0x79, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1e, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61,
	0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x69, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e,
	0x73, 0x42, 0x79, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12,
	0x25, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61,
	0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x42, 0x79, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77,
	0x6e, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x46, 0x0a, 0x0b,
	0x41, 0x64, 0x64, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x16, 0x2e, 0x6d, 0x61,
	0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x1a, 0x1d, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x2e, 0x41,
	0x64, 0x64, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x4d, 0x61, 0x72, 0x6b, 0x64,
	0x6f, 0x77, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x16, 0x2e, 0x6d, 0x61, 0x72, 0x6b,
	0x64, 0x6f, 0x77, 0x6e, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x1a, 0x1d, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x2e, 0x41, 0x64, 0x64,
	0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x4c, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x16, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x64,
	0x6f, 0x77, 0x6e, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x1a, 0x20, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61,
	0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x16, 0x2e, 0x6d,
	0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x20, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x55, 0x0a, 0x0e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x1f, 0x2e, 0x6d,
	0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61,
	0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e,
	0x6d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d,
	0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x5f, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x64,
	0x6f, 0x77, 0x6e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x1f, 0x2e, 0x6d, 0x61, 0x72, 0x6b,
	0x64, 0x6f, 0x77, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b, 0x64,
	0x6f, 0x77, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x6d, 0x61, 0x72,
	0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x61, 0x72, 0x6b,
	0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01,
	0x30, 0x01, 0x42, 0x0d, 0x5a, 0x0b, 0x2e, 0x2f, 0x3b, 0x6d, 0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77,
	0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_markdown_proto_rawDescOnce sync.Once
	file_markdown_proto_rawDescData = file_markdown_proto_rawDesc
)

func file_markdown_proto_rawDescGZIP() []byte {
	file_markdown_proto_rawDescOnce.Do(func() {
		file_markdown_proto_rawDescData = protoimpl.X.CompressGZIP(file_markdown_proto_rawDescData)
	})
	return file_markdown_proto_rawDescData
}

var file_markdown_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_markdown_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_markdown_proto_goTypes = []interface{}{
	(Code)(0),                           // 0: markdown.Code
	(*MarkdownInfo)(nil),                // 1: markdown.MarkdownInfo
	(*GetMarkdownResponse)(nil),         // 2: markdown.GetMarkdownResponse
	(*GetMarkdownByIdRequest)(nil),      // 3: markdown.GetMarkdownByIdRequest
	(*GetMarkdownsResponse)(nil),        // 4: markdown.GetMarkdownsResponse
	(*GetMarkdownsByCardIdRequest)(nil), // 5: markdown.GetMarkdownsByCardIdRequest
	(*AddMarkdownResponse)(nil),         // 6: markdown.AddMarkdownResponse
	(*UpdateMarkdownResponse)(nil),      // 7: markdown.UpdateMarkdownResponse
	(*DeleteMarkdownRequest)(nil),       // 8: markdown.DeleteMarkdownRequest
	(*DeleteMarkdownResponse)(nil),      // 9: markdown.DeleteMarkdownResponse
}
var file_markdown_proto_depIdxs = []int32{
	1,  // 0: markdown.GetMarkdownResponse.Markdown:type_name -> markdown.MarkdownInfo
	0,  // 1: markdown.GetMarkdownResponse.code:type_name -> markdown.Code
	1,  // 2: markdown.GetMarkdownsResponse.Markdown:type_name -> markdown.MarkdownInfo
	0,  // 3: markdown.GetMarkdownsResponse.code:type_name -> markdown.Code
	0,  // 4: markdown.AddMarkdownResponse.code:type_name -> markdown.Code
	0,  // 5: markdown.UpdateMarkdownResponse.code:type_name -> markdown.Code
	0,  // 6: markdown.DeleteMarkdownResponse.code:type_name -> markdown.Code
	3,  // 7: markdown.Markdown.GetMarkdownById:input_type -> markdown.GetMarkdownByIdRequest
	3,  // 8: markdown.Markdown.GetMarkdownByIdStream:input_type -> markdown.GetMarkdownByIdRequest
	5,  // 9: markdown.Markdown.GetMarkdownsByCardId:input_type -> markdown.GetMarkdownsByCardIdRequest
	5,  // 10: markdown.Markdown.GetMarkdownsByCardIdStream:input_type -> markdown.GetMarkdownsByCardIdRequest
	1,  // 11: markdown.Markdown.AddMarkdown:input_type -> markdown.MarkdownInfo
	1,  // 12: markdown.Markdown.AddMarkdownStream:input_type -> markdown.MarkdownInfo
	1,  // 13: markdown.Markdown.UpdateMarkdown:input_type -> markdown.MarkdownInfo
	1,  // 14: markdown.Markdown.UpdateMarkdownStream:input_type -> markdown.MarkdownInfo
	8,  // 15: markdown.Markdown.DeleteMarkdown:input_type -> markdown.DeleteMarkdownRequest
	8,  // 16: markdown.Markdown.DeleteMarkdownStream:input_type -> markdown.DeleteMarkdownRequest
	2,  // 17: markdown.Markdown.GetMarkdownById:output_type -> markdown.GetMarkdownResponse
	2,  // 18: markdown.Markdown.GetMarkdownByIdStream:output_type -> markdown.GetMarkdownResponse
	4,  // 19: markdown.Markdown.GetMarkdownsByCardId:output_type -> markdown.GetMarkdownsResponse
	4,  // 20: markdown.Markdown.GetMarkdownsByCardIdStream:output_type -> markdown.GetMarkdownsResponse
	6,  // 21: markdown.Markdown.AddMarkdown:output_type -> markdown.AddMarkdownResponse
	6,  // 22: markdown.Markdown.AddMarkdownStream:output_type -> markdown.AddMarkdownResponse
	7,  // 23: markdown.Markdown.UpdateMarkdown:output_type -> markdown.UpdateMarkdownResponse
	7,  // 24: markdown.Markdown.UpdateMarkdownStream:output_type -> markdown.UpdateMarkdownResponse
	9,  // 25: markdown.Markdown.DeleteMarkdown:output_type -> markdown.DeleteMarkdownResponse
	9,  // 26: markdown.Markdown.DeleteMarkdownStream:output_type -> markdown.DeleteMarkdownResponse
	17, // [17:27] is the sub-list for method output_type
	7,  // [7:17] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_markdown_proto_init() }
func file_markdown_proto_init() {
	if File_markdown_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_markdown_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkdownInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_markdown_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMarkdownResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_markdown_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMarkdownByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_markdown_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMarkdownsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_markdown_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMarkdownsByCardIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_markdown_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddMarkdownResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_markdown_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMarkdownResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_markdown_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteMarkdownRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_markdown_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteMarkdownResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_markdown_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_markdown_proto_goTypes,
		DependencyIndexes: file_markdown_proto_depIdxs,
		EnumInfos:         file_markdown_proto_enumTypes,
		MessageInfos:      file_markdown_proto_msgTypes,
	}.Build()
	File_markdown_proto = out.File
	file_markdown_proto_rawDesc = nil
	file_markdown_proto_goTypes = nil
	file_markdown_proto_depIdxs = nil
}
