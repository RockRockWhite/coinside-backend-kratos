// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: markdown.proto

package markdown

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MarkdownClient is the client API for Markdown service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MarkdownClient interface {
	// Get a Markdown by id
	GetMarkdownById(ctx context.Context, in *GetMarkdownByIdRequest, opts ...grpc.CallOption) (*GetMarkdownResponse, error)
	// Get a Markdown by id via stream
	GetMarkdownByIdStream(ctx context.Context, opts ...grpc.CallOption) (Markdown_GetMarkdownByIdStreamClient, error)
	// Get a Markdowns by card_id
	GetMarkdownsByCardId(ctx context.Context, in *GetMarkdownsByCardIdRequest, opts ...grpc.CallOption) (*GetMarkdownsResponse, error)
	// Get a  Markdown by card_id via stream
	GetMarkdownsByCardIdStream(ctx context.Context, opts ...grpc.CallOption) (Markdown_GetMarkdownsByCardIdStreamClient, error)
	// add a Markdown
	AddMarkdown(ctx context.Context, in *MarkdownInfo, opts ...grpc.CallOption) (*AddMarkdownResponse, error)
	// add a Markdown via stream
	AddMarkdownStream(ctx context.Context, opts ...grpc.CallOption) (Markdown_AddMarkdownStreamClient, error)
	// update a Markdown
	UpdateMarkdown(ctx context.Context, in *MarkdownInfo, opts ...grpc.CallOption) (*UpdateMarkdownResponse, error)
	// update a Markdown via stream
	UpdateMarkdownStream(ctx context.Context, in *MarkdownInfo, opts ...grpc.CallOption) (Markdown_UpdateMarkdownStreamClient, error)
	// delete a Markdown
	DeleteMarkdown(ctx context.Context, in *DeleteMarkdownRequest, opts ...grpc.CallOption) (*DeleteMarkdownResponse, error)
	// delete a Markdown via stream
	DeleteMarkdownStream(ctx context.Context, opts ...grpc.CallOption) (Markdown_DeleteMarkdownStreamClient, error)
}

type markdownClient struct {
	cc grpc.ClientConnInterface
}

func NewMarkdownClient(cc grpc.ClientConnInterface) MarkdownClient {
	return &markdownClient{cc}
}

func (c *markdownClient) GetMarkdownById(ctx context.Context, in *GetMarkdownByIdRequest, opts ...grpc.CallOption) (*GetMarkdownResponse, error) {
	out := new(GetMarkdownResponse)
	err := c.cc.Invoke(ctx, "/markdown.Markdown/GetMarkdownById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *markdownClient) GetMarkdownByIdStream(ctx context.Context, opts ...grpc.CallOption) (Markdown_GetMarkdownByIdStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Markdown_ServiceDesc.Streams[0], "/markdown.Markdown/GetMarkdownByIdStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &markdownGetMarkdownByIdStreamClient{stream}
	return x, nil
}

type Markdown_GetMarkdownByIdStreamClient interface {
	Send(*GetMarkdownByIdRequest) error
	Recv() (*GetMarkdownResponse, error)
	grpc.ClientStream
}

type markdownGetMarkdownByIdStreamClient struct {
	grpc.ClientStream
}

func (x *markdownGetMarkdownByIdStreamClient) Send(m *GetMarkdownByIdRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *markdownGetMarkdownByIdStreamClient) Recv() (*GetMarkdownResponse, error) {
	m := new(GetMarkdownResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *markdownClient) GetMarkdownsByCardId(ctx context.Context, in *GetMarkdownsByCardIdRequest, opts ...grpc.CallOption) (*GetMarkdownsResponse, error) {
	out := new(GetMarkdownsResponse)
	err := c.cc.Invoke(ctx, "/markdown.Markdown/GetMarkdownsByCardId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *markdownClient) GetMarkdownsByCardIdStream(ctx context.Context, opts ...grpc.CallOption) (Markdown_GetMarkdownsByCardIdStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Markdown_ServiceDesc.Streams[1], "/markdown.Markdown/GetMarkdownsByCardIdStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &markdownGetMarkdownsByCardIdStreamClient{stream}
	return x, nil
}

type Markdown_GetMarkdownsByCardIdStreamClient interface {
	Send(*GetMarkdownsByCardIdRequest) error
	Recv() (*GetMarkdownsResponse, error)
	grpc.ClientStream
}

type markdownGetMarkdownsByCardIdStreamClient struct {
	grpc.ClientStream
}

func (x *markdownGetMarkdownsByCardIdStreamClient) Send(m *GetMarkdownsByCardIdRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *markdownGetMarkdownsByCardIdStreamClient) Recv() (*GetMarkdownsResponse, error) {
	m := new(GetMarkdownsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *markdownClient) AddMarkdown(ctx context.Context, in *MarkdownInfo, opts ...grpc.CallOption) (*AddMarkdownResponse, error) {
	out := new(AddMarkdownResponse)
	err := c.cc.Invoke(ctx, "/markdown.Markdown/AddMarkdown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *markdownClient) AddMarkdownStream(ctx context.Context, opts ...grpc.CallOption) (Markdown_AddMarkdownStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Markdown_ServiceDesc.Streams[2], "/markdown.Markdown/AddMarkdownStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &markdownAddMarkdownStreamClient{stream}
	return x, nil
}

type Markdown_AddMarkdownStreamClient interface {
	Send(*MarkdownInfo) error
	Recv() (*AddMarkdownResponse, error)
	grpc.ClientStream
}

type markdownAddMarkdownStreamClient struct {
	grpc.ClientStream
}

func (x *markdownAddMarkdownStreamClient) Send(m *MarkdownInfo) error {
	return x.ClientStream.SendMsg(m)
}

func (x *markdownAddMarkdownStreamClient) Recv() (*AddMarkdownResponse, error) {
	m := new(AddMarkdownResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *markdownClient) UpdateMarkdown(ctx context.Context, in *MarkdownInfo, opts ...grpc.CallOption) (*UpdateMarkdownResponse, error) {
	out := new(UpdateMarkdownResponse)
	err := c.cc.Invoke(ctx, "/markdown.Markdown/UpdateMarkdown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *markdownClient) UpdateMarkdownStream(ctx context.Context, in *MarkdownInfo, opts ...grpc.CallOption) (Markdown_UpdateMarkdownStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Markdown_ServiceDesc.Streams[3], "/markdown.Markdown/UpdateMarkdownStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &markdownUpdateMarkdownStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Markdown_UpdateMarkdownStreamClient interface {
	Recv() (*UpdateMarkdownResponse, error)
	grpc.ClientStream
}

type markdownUpdateMarkdownStreamClient struct {
	grpc.ClientStream
}

func (x *markdownUpdateMarkdownStreamClient) Recv() (*UpdateMarkdownResponse, error) {
	m := new(UpdateMarkdownResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *markdownClient) DeleteMarkdown(ctx context.Context, in *DeleteMarkdownRequest, opts ...grpc.CallOption) (*DeleteMarkdownResponse, error) {
	out := new(DeleteMarkdownResponse)
	err := c.cc.Invoke(ctx, "/markdown.Markdown/DeleteMarkdown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *markdownClient) DeleteMarkdownStream(ctx context.Context, opts ...grpc.CallOption) (Markdown_DeleteMarkdownStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Markdown_ServiceDesc.Streams[4], "/markdown.Markdown/DeleteMarkdownStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &markdownDeleteMarkdownStreamClient{stream}
	return x, nil
}

type Markdown_DeleteMarkdownStreamClient interface {
	Send(*DeleteMarkdownRequest) error
	Recv() (*DeleteMarkdownResponse, error)
	grpc.ClientStream
}

type markdownDeleteMarkdownStreamClient struct {
	grpc.ClientStream
}

func (x *markdownDeleteMarkdownStreamClient) Send(m *DeleteMarkdownRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *markdownDeleteMarkdownStreamClient) Recv() (*DeleteMarkdownResponse, error) {
	m := new(DeleteMarkdownResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MarkdownServer is the server API for Markdown service.
// All implementations must embed UnimplementedMarkdownServer
// for forward compatibility
type MarkdownServer interface {
	// Get a Markdown by id
	GetMarkdownById(context.Context, *GetMarkdownByIdRequest) (*GetMarkdownResponse, error)
	// Get a Markdown by id via stream
	GetMarkdownByIdStream(Markdown_GetMarkdownByIdStreamServer) error
	// Get a Markdowns by card_id
	GetMarkdownsByCardId(context.Context, *GetMarkdownsByCardIdRequest) (*GetMarkdownsResponse, error)
	// Get a  Markdown by card_id via stream
	GetMarkdownsByCardIdStream(Markdown_GetMarkdownsByCardIdStreamServer) error
	// add a Markdown
	AddMarkdown(context.Context, *MarkdownInfo) (*AddMarkdownResponse, error)
	// add a Markdown via stream
	AddMarkdownStream(Markdown_AddMarkdownStreamServer) error
	// update a Markdown
	UpdateMarkdown(context.Context, *MarkdownInfo) (*UpdateMarkdownResponse, error)
	// update a Markdown via stream
	UpdateMarkdownStream(*MarkdownInfo, Markdown_UpdateMarkdownStreamServer) error
	// delete a Markdown
	DeleteMarkdown(context.Context, *DeleteMarkdownRequest) (*DeleteMarkdownResponse, error)
	// delete a Markdown via stream
	DeleteMarkdownStream(Markdown_DeleteMarkdownStreamServer) error
	mustEmbedUnimplementedMarkdownServer()
}

// UnimplementedMarkdownServer must be embedded to have forward compatible implementations.
type UnimplementedMarkdownServer struct {
}

func (UnimplementedMarkdownServer) GetMarkdownById(context.Context, *GetMarkdownByIdRequest) (*GetMarkdownResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMarkdownById not implemented")
}
func (UnimplementedMarkdownServer) GetMarkdownByIdStream(Markdown_GetMarkdownByIdStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetMarkdownByIdStream not implemented")
}
func (UnimplementedMarkdownServer) GetMarkdownsByCardId(context.Context, *GetMarkdownsByCardIdRequest) (*GetMarkdownsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMarkdownsByCardId not implemented")
}
func (UnimplementedMarkdownServer) GetMarkdownsByCardIdStream(Markdown_GetMarkdownsByCardIdStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetMarkdownsByCardIdStream not implemented")
}
func (UnimplementedMarkdownServer) AddMarkdown(context.Context, *MarkdownInfo) (*AddMarkdownResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMarkdown not implemented")
}
func (UnimplementedMarkdownServer) AddMarkdownStream(Markdown_AddMarkdownStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method AddMarkdownStream not implemented")
}
func (UnimplementedMarkdownServer) UpdateMarkdown(context.Context, *MarkdownInfo) (*UpdateMarkdownResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMarkdown not implemented")
}
func (UnimplementedMarkdownServer) UpdateMarkdownStream(*MarkdownInfo, Markdown_UpdateMarkdownStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method UpdateMarkdownStream not implemented")
}
func (UnimplementedMarkdownServer) DeleteMarkdown(context.Context, *DeleteMarkdownRequest) (*DeleteMarkdownResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMarkdown not implemented")
}
func (UnimplementedMarkdownServer) DeleteMarkdownStream(Markdown_DeleteMarkdownStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method DeleteMarkdownStream not implemented")
}
func (UnimplementedMarkdownServer) mustEmbedUnimplementedMarkdownServer() {}

// UnsafeMarkdownServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MarkdownServer will
// result in compilation errors.
type UnsafeMarkdownServer interface {
	mustEmbedUnimplementedMarkdownServer()
}

func RegisterMarkdownServer(s grpc.ServiceRegistrar, srv MarkdownServer) {
	s.RegisterService(&Markdown_ServiceDesc, srv)
}

func _Markdown_GetMarkdownById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMarkdownByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarkdownServer).GetMarkdownById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/markdown.Markdown/GetMarkdownById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarkdownServer).GetMarkdownById(ctx, req.(*GetMarkdownByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Markdown_GetMarkdownByIdStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MarkdownServer).GetMarkdownByIdStream(&markdownGetMarkdownByIdStreamServer{stream})
}

type Markdown_GetMarkdownByIdStreamServer interface {
	Send(*GetMarkdownResponse) error
	Recv() (*GetMarkdownByIdRequest, error)
	grpc.ServerStream
}

type markdownGetMarkdownByIdStreamServer struct {
	grpc.ServerStream
}

func (x *markdownGetMarkdownByIdStreamServer) Send(m *GetMarkdownResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *markdownGetMarkdownByIdStreamServer) Recv() (*GetMarkdownByIdRequest, error) {
	m := new(GetMarkdownByIdRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Markdown_GetMarkdownsByCardId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMarkdownsByCardIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarkdownServer).GetMarkdownsByCardId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/markdown.Markdown/GetMarkdownsByCardId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarkdownServer).GetMarkdownsByCardId(ctx, req.(*GetMarkdownsByCardIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Markdown_GetMarkdownsByCardIdStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MarkdownServer).GetMarkdownsByCardIdStream(&markdownGetMarkdownsByCardIdStreamServer{stream})
}

type Markdown_GetMarkdownsByCardIdStreamServer interface {
	Send(*GetMarkdownsResponse) error
	Recv() (*GetMarkdownsByCardIdRequest, error)
	grpc.ServerStream
}

type markdownGetMarkdownsByCardIdStreamServer struct {
	grpc.ServerStream
}

func (x *markdownGetMarkdownsByCardIdStreamServer) Send(m *GetMarkdownsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *markdownGetMarkdownsByCardIdStreamServer) Recv() (*GetMarkdownsByCardIdRequest, error) {
	m := new(GetMarkdownsByCardIdRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Markdown_AddMarkdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkdownInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarkdownServer).AddMarkdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/markdown.Markdown/AddMarkdown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarkdownServer).AddMarkdown(ctx, req.(*MarkdownInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Markdown_AddMarkdownStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MarkdownServer).AddMarkdownStream(&markdownAddMarkdownStreamServer{stream})
}

type Markdown_AddMarkdownStreamServer interface {
	Send(*AddMarkdownResponse) error
	Recv() (*MarkdownInfo, error)
	grpc.ServerStream
}

type markdownAddMarkdownStreamServer struct {
	grpc.ServerStream
}

func (x *markdownAddMarkdownStreamServer) Send(m *AddMarkdownResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *markdownAddMarkdownStreamServer) Recv() (*MarkdownInfo, error) {
	m := new(MarkdownInfo)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Markdown_UpdateMarkdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkdownInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarkdownServer).UpdateMarkdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/markdown.Markdown/UpdateMarkdown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarkdownServer).UpdateMarkdown(ctx, req.(*MarkdownInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Markdown_UpdateMarkdownStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MarkdownInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MarkdownServer).UpdateMarkdownStream(m, &markdownUpdateMarkdownStreamServer{stream})
}

type Markdown_UpdateMarkdownStreamServer interface {
	Send(*UpdateMarkdownResponse) error
	grpc.ServerStream
}

type markdownUpdateMarkdownStreamServer struct {
	grpc.ServerStream
}

func (x *markdownUpdateMarkdownStreamServer) Send(m *UpdateMarkdownResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Markdown_DeleteMarkdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMarkdownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarkdownServer).DeleteMarkdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/markdown.Markdown/DeleteMarkdown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarkdownServer).DeleteMarkdown(ctx, req.(*DeleteMarkdownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Markdown_DeleteMarkdownStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MarkdownServer).DeleteMarkdownStream(&markdownDeleteMarkdownStreamServer{stream})
}

type Markdown_DeleteMarkdownStreamServer interface {
	Send(*DeleteMarkdownResponse) error
	Recv() (*DeleteMarkdownRequest, error)
	grpc.ServerStream
}

type markdownDeleteMarkdownStreamServer struct {
	grpc.ServerStream
}

func (x *markdownDeleteMarkdownStreamServer) Send(m *DeleteMarkdownResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *markdownDeleteMarkdownStreamServer) Recv() (*DeleteMarkdownRequest, error) {
	m := new(DeleteMarkdownRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Markdown_ServiceDesc is the grpc.ServiceDesc for Markdown service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Markdown_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "markdown.Markdown",
	HandlerType: (*MarkdownServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMarkdownById",
			Handler:    _Markdown_GetMarkdownById_Handler,
		},
		{
			MethodName: "GetMarkdownsByCardId",
			Handler:    _Markdown_GetMarkdownsByCardId_Handler,
		},
		{
			MethodName: "AddMarkdown",
			Handler:    _Markdown_AddMarkdown_Handler,
		},
		{
			MethodName: "UpdateMarkdown",
			Handler:    _Markdown_UpdateMarkdown_Handler,
		},
		{
			MethodName: "DeleteMarkdown",
			Handler:    _Markdown_DeleteMarkdown_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetMarkdownByIdStream",
			Handler:       _Markdown_GetMarkdownByIdStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetMarkdownsByCardIdStream",
			Handler:       _Markdown_GetMarkdownsByCardIdStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "AddMarkdownStream",
			Handler:       _Markdown_AddMarkdownStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "UpdateMarkdownStream",
			Handler:       _Markdown_UpdateMarkdownStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DeleteMarkdownStream",
			Handler:       _Markdown_DeleteMarkdownStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "markdown.proto",
}
