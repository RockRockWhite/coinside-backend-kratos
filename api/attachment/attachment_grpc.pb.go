// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: attachment.proto

package attachment

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AttachmentClient is the client API for Attachment service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AttachmentClient interface {
	// Get a Attachment by id
	GetAttachmentById(ctx context.Context, in *GetAttachmentByIdRequest, opts ...grpc.CallOption) (*GetAttachmentResponse, error)
	// Get a Attachment by id via stream
	GetAttachmentByIdStream(ctx context.Context, opts ...grpc.CallOption) (Attachment_GetAttachmentByIdStreamClient, error)
	// Get a Attachments by card_id
	GetAttachmentsByCardId(ctx context.Context, in *GetAttachmentsByCardIdRequest, opts ...grpc.CallOption) (*GetAttachmentsResponse, error)
	// Get a  Attachment by card_id via stream
	GetAttachmentsByCardIdStream(ctx context.Context, opts ...grpc.CallOption) (Attachment_GetAttachmentsByCardIdStreamClient, error)
	// add a Attachment
	AddAttachment(ctx context.Context, in *AddAttachmentRequest, opts ...grpc.CallOption) (*AddAttachmentResponse, error)
	// add a Attachment via stream
	AddAttachmentStream(ctx context.Context, opts ...grpc.CallOption) (Attachment_AddAttachmentStreamClient, error)
	// update a Attachment
	UpdateAttachment(ctx context.Context, in *UpdateAttachmentRequest, opts ...grpc.CallOption) (*UpdateAttachmentResponse, error)
	// update a Attachment via stream
	UpdateAttachmentStream(ctx context.Context, in *UpdateAttachmentRequest, opts ...grpc.CallOption) (Attachment_UpdateAttachmentStreamClient, error)
	// delete a Attachment
	DeleteAttachment(ctx context.Context, in *DeleteAttachmentRequest, opts ...grpc.CallOption) (*DeleteAttachmentResponse, error)
	// delete a Attachment via stream
	DeleteAttachmentStream(ctx context.Context, opts ...grpc.CallOption) (Attachment_DeleteAttachmentStreamClient, error)
}

type attachmentClient struct {
	cc grpc.ClientConnInterface
}

func NewAttachmentClient(cc grpc.ClientConnInterface) AttachmentClient {
	return &attachmentClient{cc}
}

func (c *attachmentClient) GetAttachmentById(ctx context.Context, in *GetAttachmentByIdRequest, opts ...grpc.CallOption) (*GetAttachmentResponse, error) {
	out := new(GetAttachmentResponse)
	err := c.cc.Invoke(ctx, "/attachment.Attachment/GetAttachmentById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attachmentClient) GetAttachmentByIdStream(ctx context.Context, opts ...grpc.CallOption) (Attachment_GetAttachmentByIdStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Attachment_ServiceDesc.Streams[0], "/attachment.Attachment/GetAttachmentByIdStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &attachmentGetAttachmentByIdStreamClient{stream}
	return x, nil
}

type Attachment_GetAttachmentByIdStreamClient interface {
	Send(*GetAttachmentByIdRequest) error
	Recv() (*GetAttachmentResponse, error)
	grpc.ClientStream
}

type attachmentGetAttachmentByIdStreamClient struct {
	grpc.ClientStream
}

func (x *attachmentGetAttachmentByIdStreamClient) Send(m *GetAttachmentByIdRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *attachmentGetAttachmentByIdStreamClient) Recv() (*GetAttachmentResponse, error) {
	m := new(GetAttachmentResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *attachmentClient) GetAttachmentsByCardId(ctx context.Context, in *GetAttachmentsByCardIdRequest, opts ...grpc.CallOption) (*GetAttachmentsResponse, error) {
	out := new(GetAttachmentsResponse)
	err := c.cc.Invoke(ctx, "/attachment.Attachment/GetAttachmentsByCardId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attachmentClient) GetAttachmentsByCardIdStream(ctx context.Context, opts ...grpc.CallOption) (Attachment_GetAttachmentsByCardIdStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Attachment_ServiceDesc.Streams[1], "/attachment.Attachment/GetAttachmentsByCardIdStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &attachmentGetAttachmentsByCardIdStreamClient{stream}
	return x, nil
}

type Attachment_GetAttachmentsByCardIdStreamClient interface {
	Send(*GetAttachmentsByCardIdRequest) error
	Recv() (*GetAttachmentsResponse, error)
	grpc.ClientStream
}

type attachmentGetAttachmentsByCardIdStreamClient struct {
	grpc.ClientStream
}

func (x *attachmentGetAttachmentsByCardIdStreamClient) Send(m *GetAttachmentsByCardIdRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *attachmentGetAttachmentsByCardIdStreamClient) Recv() (*GetAttachmentsResponse, error) {
	m := new(GetAttachmentsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *attachmentClient) AddAttachment(ctx context.Context, in *AddAttachmentRequest, opts ...grpc.CallOption) (*AddAttachmentResponse, error) {
	out := new(AddAttachmentResponse)
	err := c.cc.Invoke(ctx, "/attachment.Attachment/AddAttachment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attachmentClient) AddAttachmentStream(ctx context.Context, opts ...grpc.CallOption) (Attachment_AddAttachmentStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Attachment_ServiceDesc.Streams[2], "/attachment.Attachment/AddAttachmentStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &attachmentAddAttachmentStreamClient{stream}
	return x, nil
}

type Attachment_AddAttachmentStreamClient interface {
	Send(*AddAttachmentRequest) error
	Recv() (*AddAttachmentResponse, error)
	grpc.ClientStream
}

type attachmentAddAttachmentStreamClient struct {
	grpc.ClientStream
}

func (x *attachmentAddAttachmentStreamClient) Send(m *AddAttachmentRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *attachmentAddAttachmentStreamClient) Recv() (*AddAttachmentResponse, error) {
	m := new(AddAttachmentResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *attachmentClient) UpdateAttachment(ctx context.Context, in *UpdateAttachmentRequest, opts ...grpc.CallOption) (*UpdateAttachmentResponse, error) {
	out := new(UpdateAttachmentResponse)
	err := c.cc.Invoke(ctx, "/attachment.Attachment/UpdateAttachment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attachmentClient) UpdateAttachmentStream(ctx context.Context, in *UpdateAttachmentRequest, opts ...grpc.CallOption) (Attachment_UpdateAttachmentStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Attachment_ServiceDesc.Streams[3], "/attachment.Attachment/UpdateAttachmentStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &attachmentUpdateAttachmentStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Attachment_UpdateAttachmentStreamClient interface {
	Recv() (*UpdateAttachmentResponse, error)
	grpc.ClientStream
}

type attachmentUpdateAttachmentStreamClient struct {
	grpc.ClientStream
}

func (x *attachmentUpdateAttachmentStreamClient) Recv() (*UpdateAttachmentResponse, error) {
	m := new(UpdateAttachmentResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *attachmentClient) DeleteAttachment(ctx context.Context, in *DeleteAttachmentRequest, opts ...grpc.CallOption) (*DeleteAttachmentResponse, error) {
	out := new(DeleteAttachmentResponse)
	err := c.cc.Invoke(ctx, "/attachment.Attachment/DeleteAttachment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *attachmentClient) DeleteAttachmentStream(ctx context.Context, opts ...grpc.CallOption) (Attachment_DeleteAttachmentStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Attachment_ServiceDesc.Streams[4], "/attachment.Attachment/DeleteAttachmentStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &attachmentDeleteAttachmentStreamClient{stream}
	return x, nil
}

type Attachment_DeleteAttachmentStreamClient interface {
	Send(*DeleteAttachmentRequest) error
	Recv() (*DeleteAttachmentResponse, error)
	grpc.ClientStream
}

type attachmentDeleteAttachmentStreamClient struct {
	grpc.ClientStream
}

func (x *attachmentDeleteAttachmentStreamClient) Send(m *DeleteAttachmentRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *attachmentDeleteAttachmentStreamClient) Recv() (*DeleteAttachmentResponse, error) {
	m := new(DeleteAttachmentResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AttachmentServer is the server API for Attachment service.
// All implementations must embed UnimplementedAttachmentServer
// for forward compatibility
type AttachmentServer interface {
	// Get a Attachment by id
	GetAttachmentById(context.Context, *GetAttachmentByIdRequest) (*GetAttachmentResponse, error)
	// Get a Attachment by id via stream
	GetAttachmentByIdStream(Attachment_GetAttachmentByIdStreamServer) error
	// Get a Attachments by card_id
	GetAttachmentsByCardId(context.Context, *GetAttachmentsByCardIdRequest) (*GetAttachmentsResponse, error)
	// Get a  Attachment by card_id via stream
	GetAttachmentsByCardIdStream(Attachment_GetAttachmentsByCardIdStreamServer) error
	// add a Attachment
	AddAttachment(context.Context, *AddAttachmentRequest) (*AddAttachmentResponse, error)
	// add a Attachment via stream
	AddAttachmentStream(Attachment_AddAttachmentStreamServer) error
	// update a Attachment
	UpdateAttachment(context.Context, *UpdateAttachmentRequest) (*UpdateAttachmentResponse, error)
	// update a Attachment via stream
	UpdateAttachmentStream(*UpdateAttachmentRequest, Attachment_UpdateAttachmentStreamServer) error
	// delete a Attachment
	DeleteAttachment(context.Context, *DeleteAttachmentRequest) (*DeleteAttachmentResponse, error)
	// delete a Attachment via stream
	DeleteAttachmentStream(Attachment_DeleteAttachmentStreamServer) error
	mustEmbedUnimplementedAttachmentServer()
}

// UnimplementedAttachmentServer must be embedded to have forward compatible implementations.
type UnimplementedAttachmentServer struct {
}

func (UnimplementedAttachmentServer) GetAttachmentById(context.Context, *GetAttachmentByIdRequest) (*GetAttachmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAttachmentById not implemented")
}
func (UnimplementedAttachmentServer) GetAttachmentByIdStream(Attachment_GetAttachmentByIdStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAttachmentByIdStream not implemented")
}
func (UnimplementedAttachmentServer) GetAttachmentsByCardId(context.Context, *GetAttachmentsByCardIdRequest) (*GetAttachmentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAttachmentsByCardId not implemented")
}
func (UnimplementedAttachmentServer) GetAttachmentsByCardIdStream(Attachment_GetAttachmentsByCardIdStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAttachmentsByCardIdStream not implemented")
}
func (UnimplementedAttachmentServer) AddAttachment(context.Context, *AddAttachmentRequest) (*AddAttachmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAttachment not implemented")
}
func (UnimplementedAttachmentServer) AddAttachmentStream(Attachment_AddAttachmentStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method AddAttachmentStream not implemented")
}
func (UnimplementedAttachmentServer) UpdateAttachment(context.Context, *UpdateAttachmentRequest) (*UpdateAttachmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAttachment not implemented")
}
func (UnimplementedAttachmentServer) UpdateAttachmentStream(*UpdateAttachmentRequest, Attachment_UpdateAttachmentStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method UpdateAttachmentStream not implemented")
}
func (UnimplementedAttachmentServer) DeleteAttachment(context.Context, *DeleteAttachmentRequest) (*DeleteAttachmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAttachment not implemented")
}
func (UnimplementedAttachmentServer) DeleteAttachmentStream(Attachment_DeleteAttachmentStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method DeleteAttachmentStream not implemented")
}
func (UnimplementedAttachmentServer) mustEmbedUnimplementedAttachmentServer() {}

// UnsafeAttachmentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AttachmentServer will
// result in compilation errors.
type UnsafeAttachmentServer interface {
	mustEmbedUnimplementedAttachmentServer()
}

func RegisterAttachmentServer(s grpc.ServiceRegistrar, srv AttachmentServer) {
	s.RegisterService(&Attachment_ServiceDesc, srv)
}

func _Attachment_GetAttachmentById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAttachmentByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttachmentServer).GetAttachmentById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/attachment.Attachment/GetAttachmentById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttachmentServer).GetAttachmentById(ctx, req.(*GetAttachmentByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Attachment_GetAttachmentByIdStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AttachmentServer).GetAttachmentByIdStream(&attachmentGetAttachmentByIdStreamServer{stream})
}

type Attachment_GetAttachmentByIdStreamServer interface {
	Send(*GetAttachmentResponse) error
	Recv() (*GetAttachmentByIdRequest, error)
	grpc.ServerStream
}

type attachmentGetAttachmentByIdStreamServer struct {
	grpc.ServerStream
}

func (x *attachmentGetAttachmentByIdStreamServer) Send(m *GetAttachmentResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *attachmentGetAttachmentByIdStreamServer) Recv() (*GetAttachmentByIdRequest, error) {
	m := new(GetAttachmentByIdRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Attachment_GetAttachmentsByCardId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAttachmentsByCardIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttachmentServer).GetAttachmentsByCardId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/attachment.Attachment/GetAttachmentsByCardId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttachmentServer).GetAttachmentsByCardId(ctx, req.(*GetAttachmentsByCardIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Attachment_GetAttachmentsByCardIdStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AttachmentServer).GetAttachmentsByCardIdStream(&attachmentGetAttachmentsByCardIdStreamServer{stream})
}

type Attachment_GetAttachmentsByCardIdStreamServer interface {
	Send(*GetAttachmentsResponse) error
	Recv() (*GetAttachmentsByCardIdRequest, error)
	grpc.ServerStream
}

type attachmentGetAttachmentsByCardIdStreamServer struct {
	grpc.ServerStream
}

func (x *attachmentGetAttachmentsByCardIdStreamServer) Send(m *GetAttachmentsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *attachmentGetAttachmentsByCardIdStreamServer) Recv() (*GetAttachmentsByCardIdRequest, error) {
	m := new(GetAttachmentsByCardIdRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Attachment_AddAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAttachmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttachmentServer).AddAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/attachment.Attachment/AddAttachment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttachmentServer).AddAttachment(ctx, req.(*AddAttachmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Attachment_AddAttachmentStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AttachmentServer).AddAttachmentStream(&attachmentAddAttachmentStreamServer{stream})
}

type Attachment_AddAttachmentStreamServer interface {
	Send(*AddAttachmentResponse) error
	Recv() (*AddAttachmentRequest, error)
	grpc.ServerStream
}

type attachmentAddAttachmentStreamServer struct {
	grpc.ServerStream
}

func (x *attachmentAddAttachmentStreamServer) Send(m *AddAttachmentResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *attachmentAddAttachmentStreamServer) Recv() (*AddAttachmentRequest, error) {
	m := new(AddAttachmentRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Attachment_UpdateAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAttachmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttachmentServer).UpdateAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/attachment.Attachment/UpdateAttachment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttachmentServer).UpdateAttachment(ctx, req.(*UpdateAttachmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Attachment_UpdateAttachmentStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UpdateAttachmentRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AttachmentServer).UpdateAttachmentStream(m, &attachmentUpdateAttachmentStreamServer{stream})
}

type Attachment_UpdateAttachmentStreamServer interface {
	Send(*UpdateAttachmentResponse) error
	grpc.ServerStream
}

type attachmentUpdateAttachmentStreamServer struct {
	grpc.ServerStream
}

func (x *attachmentUpdateAttachmentStreamServer) Send(m *UpdateAttachmentResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Attachment_DeleteAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAttachmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AttachmentServer).DeleteAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/attachment.Attachment/DeleteAttachment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AttachmentServer).DeleteAttachment(ctx, req.(*DeleteAttachmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Attachment_DeleteAttachmentStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AttachmentServer).DeleteAttachmentStream(&attachmentDeleteAttachmentStreamServer{stream})
}

type Attachment_DeleteAttachmentStreamServer interface {
	Send(*DeleteAttachmentResponse) error
	Recv() (*DeleteAttachmentRequest, error)
	grpc.ServerStream
}

type attachmentDeleteAttachmentStreamServer struct {
	grpc.ServerStream
}

func (x *attachmentDeleteAttachmentStreamServer) Send(m *DeleteAttachmentResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *attachmentDeleteAttachmentStreamServer) Recv() (*DeleteAttachmentRequest, error) {
	m := new(DeleteAttachmentRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Attachment_ServiceDesc is the grpc.ServiceDesc for Attachment service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Attachment_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "attachment.Attachment",
	HandlerType: (*AttachmentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAttachmentById",
			Handler:    _Attachment_GetAttachmentById_Handler,
		},
		{
			MethodName: "GetAttachmentsByCardId",
			Handler:    _Attachment_GetAttachmentsByCardId_Handler,
		},
		{
			MethodName: "AddAttachment",
			Handler:    _Attachment_AddAttachment_Handler,
		},
		{
			MethodName: "UpdateAttachment",
			Handler:    _Attachment_UpdateAttachment_Handler,
		},
		{
			MethodName: "DeleteAttachment",
			Handler:    _Attachment_DeleteAttachment_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAttachmentByIdStream",
			Handler:       _Attachment_GetAttachmentByIdStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetAttachmentsByCardIdStream",
			Handler:       _Attachment_GetAttachmentsByCardIdStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "AddAttachmentStream",
			Handler:       _Attachment_AddAttachmentStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "UpdateAttachmentStream",
			Handler:       _Attachment_UpdateAttachmentStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DeleteAttachmentStream",
			Handler:       _Attachment_DeleteAttachmentStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "attachment.proto",
}
