// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: team.proto

package team

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TeamClient is the client API for Team service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TeamClient interface {
	// Get a team by id
	GetTeamById(ctx context.Context, in *GetTeamByIdRequest, opts ...grpc.CallOption) (*GetTeamResponse, error)
	// Get a team by id via stream
	GetTeamByIdStream(ctx context.Context, opts ...grpc.CallOption) (Team_GetTeamByIdStreamClient, error)
	// Get a team by name
	GetTeamInfoList(ctx context.Context, in *GetTeamInfoListRequest, opts ...grpc.CallOption) (*GetTeamInfoListResponse, error)
	// Get a user by name via stream
	GetTeamInfoListStream(ctx context.Context, opts ...grpc.CallOption) (Team_GetTeamInfoListStreamClient, error)
	// add a team
	AddTeam(ctx context.Context, in *AddTeamRequest, opts ...grpc.CallOption) (*AddTeamResponse, error)
	// add a team via stream
	AddTeamStream(ctx context.Context, opts ...grpc.CallOption) (Team_AddTeamStreamClient, error)
	// set team name
	SetTeamName(ctx context.Context, in *SetTeamNameRequest, opts ...grpc.CallOption) (*SetTeamNameResponse, error)
	// /set team name via stream
	SetTeamNameSteam(ctx context.Context, opts ...grpc.CallOption) (Team_SetTeamNameSteamClient, error)
	// set team description
	SetTeamDescription(ctx context.Context, in *SetTeamDescriptionRequest, opts ...grpc.CallOption) (*SetTeamDescriptionResponse, error)
	// set team description via stream
	SetTeamDescriptionSteam(ctx context.Context, opts ...grpc.CallOption) (Team_SetTeamDescriptionSteamClient, error)
	// set team website
	SetTeamWebsite(ctx context.Context, in *SetTeamWebsiteRequest, opts ...grpc.CallOption) (*SetTeamWebsiteResponse, error)
	// set team website via stream
	SetTeamWebsiteSteam(ctx context.Context, opts ...grpc.CallOption) (Team_SetTeamWebsiteSteamClient, error)
	// set team avatar
	SetTeamAvatar(ctx context.Context, in *SetTeamAvatarRequest, opts ...grpc.CallOption) (*SetTeamAvatarResponse, error)
	// set team avatar via stream
	SetTeamAvatarSteam(ctx context.Context, opts ...grpc.CallOption) (Team_SetTeamAvatarSteamClient, error)
	// set team email
	SetTeamEmail(ctx context.Context, in *SetTeamEmailRequest, opts ...grpc.CallOption) (*SetTeamEmailResponse, error)
	// set team email via stream
	SetTeamEmailSteam(ctx context.Context, opts ...grpc.CallOption) (Team_SetTeamEmailSteamClient, error)
	// delete a team
	DeleteTeam(ctx context.Context, in *DeleteTeamRequest, opts ...grpc.CallOption) (*DeleteTeamResponse, error)
	// delete a team via stream
	DeleteTeamStream(ctx context.Context, opts ...grpc.CallOption) (Team_DeleteTeamStreamClient, error)
	// add  a  Member
	AddMember(ctx context.Context, in *AddMemberRequest, opts ...grpc.CallOption) (*AddMemberResponse, error)
	// add a member  via stream
	AddMemberStream(ctx context.Context, opts ...grpc.CallOption) (Team_AddMemberStreamClient, error)
	// Delete  a  Member
	DeleteMember(ctx context.Context, in *DeleteMemberRequest, opts ...grpc.CallOption) (*DeleteMemberResponse, error)
	// Delete a Member  via stream
	DeleteMemberStream(ctx context.Context, opts ...grpc.CallOption) (Team_DeleteMemberStreamClient, error)
	// add an administrator
	AddAdmin(ctx context.Context, in *AddAdminRequest, opts ...grpc.CallOption) (*AddAdminResponse, error)
	// add an administrator  via stream
	AddAdminStream(ctx context.Context, opts ...grpc.CallOption) (Team_AddAdminStreamClient, error)
}

type teamClient struct {
	cc grpc.ClientConnInterface
}

func NewTeamClient(cc grpc.ClientConnInterface) TeamClient {
	return &teamClient{cc}
}

func (c *teamClient) GetTeamById(ctx context.Context, in *GetTeamByIdRequest, opts ...grpc.CallOption) (*GetTeamResponse, error) {
	out := new(GetTeamResponse)
	err := c.cc.Invoke(ctx, "/team.Team/GetTeamById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamClient) GetTeamByIdStream(ctx context.Context, opts ...grpc.CallOption) (Team_GetTeamByIdStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Team_ServiceDesc.Streams[0], "/team.Team/GetTeamByIdStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &teamGetTeamByIdStreamClient{stream}
	return x, nil
}

type Team_GetTeamByIdStreamClient interface {
	Send(*GetTeamByIdRequest) error
	Recv() (*GetTeamResponse, error)
	grpc.ClientStream
}

type teamGetTeamByIdStreamClient struct {
	grpc.ClientStream
}

func (x *teamGetTeamByIdStreamClient) Send(m *GetTeamByIdRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *teamGetTeamByIdStreamClient) Recv() (*GetTeamResponse, error) {
	m := new(GetTeamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *teamClient) GetTeamInfoList(ctx context.Context, in *GetTeamInfoListRequest, opts ...grpc.CallOption) (*GetTeamInfoListResponse, error) {
	out := new(GetTeamInfoListResponse)
	err := c.cc.Invoke(ctx, "/team.Team/GetTeamInfoList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamClient) GetTeamInfoListStream(ctx context.Context, opts ...grpc.CallOption) (Team_GetTeamInfoListStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Team_ServiceDesc.Streams[1], "/team.Team/GetTeamInfoListStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &teamGetTeamInfoListStreamClient{stream}
	return x, nil
}

type Team_GetTeamInfoListStreamClient interface {
	Send(*GetTeamInfoListRequest) error
	Recv() (*GetTeamInfoListResponse, error)
	grpc.ClientStream
}

type teamGetTeamInfoListStreamClient struct {
	grpc.ClientStream
}

func (x *teamGetTeamInfoListStreamClient) Send(m *GetTeamInfoListRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *teamGetTeamInfoListStreamClient) Recv() (*GetTeamInfoListResponse, error) {
	m := new(GetTeamInfoListResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *teamClient) AddTeam(ctx context.Context, in *AddTeamRequest, opts ...grpc.CallOption) (*AddTeamResponse, error) {
	out := new(AddTeamResponse)
	err := c.cc.Invoke(ctx, "/team.Team/AddTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamClient) AddTeamStream(ctx context.Context, opts ...grpc.CallOption) (Team_AddTeamStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Team_ServiceDesc.Streams[2], "/team.Team/AddTeamStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &teamAddTeamStreamClient{stream}
	return x, nil
}

type Team_AddTeamStreamClient interface {
	Send(*AddTeamRequest) error
	Recv() (*AddTeamResponse, error)
	grpc.ClientStream
}

type teamAddTeamStreamClient struct {
	grpc.ClientStream
}

func (x *teamAddTeamStreamClient) Send(m *AddTeamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *teamAddTeamStreamClient) Recv() (*AddTeamResponse, error) {
	m := new(AddTeamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *teamClient) SetTeamName(ctx context.Context, in *SetTeamNameRequest, opts ...grpc.CallOption) (*SetTeamNameResponse, error) {
	out := new(SetTeamNameResponse)
	err := c.cc.Invoke(ctx, "/team.Team/SetTeamName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamClient) SetTeamNameSteam(ctx context.Context, opts ...grpc.CallOption) (Team_SetTeamNameSteamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Team_ServiceDesc.Streams[3], "/team.Team/SetTeamNameSteam", opts...)
	if err != nil {
		return nil, err
	}
	x := &teamSetTeamNameSteamClient{stream}
	return x, nil
}

type Team_SetTeamNameSteamClient interface {
	Send(*SetTeamNameRequest) error
	Recv() (*SetTeamNameResponse, error)
	grpc.ClientStream
}

type teamSetTeamNameSteamClient struct {
	grpc.ClientStream
}

func (x *teamSetTeamNameSteamClient) Send(m *SetTeamNameRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *teamSetTeamNameSteamClient) Recv() (*SetTeamNameResponse, error) {
	m := new(SetTeamNameResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *teamClient) SetTeamDescription(ctx context.Context, in *SetTeamDescriptionRequest, opts ...grpc.CallOption) (*SetTeamDescriptionResponse, error) {
	out := new(SetTeamDescriptionResponse)
	err := c.cc.Invoke(ctx, "/team.Team/SetTeamDescription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamClient) SetTeamDescriptionSteam(ctx context.Context, opts ...grpc.CallOption) (Team_SetTeamDescriptionSteamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Team_ServiceDesc.Streams[4], "/team.Team/SetTeamDescriptionSteam", opts...)
	if err != nil {
		return nil, err
	}
	x := &teamSetTeamDescriptionSteamClient{stream}
	return x, nil
}

type Team_SetTeamDescriptionSteamClient interface {
	Send(*SetTeamDescriptionRequest) error
	Recv() (*SetTeamDescriptionResponse, error)
	grpc.ClientStream
}

type teamSetTeamDescriptionSteamClient struct {
	grpc.ClientStream
}

func (x *teamSetTeamDescriptionSteamClient) Send(m *SetTeamDescriptionRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *teamSetTeamDescriptionSteamClient) Recv() (*SetTeamDescriptionResponse, error) {
	m := new(SetTeamDescriptionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *teamClient) SetTeamWebsite(ctx context.Context, in *SetTeamWebsiteRequest, opts ...grpc.CallOption) (*SetTeamWebsiteResponse, error) {
	out := new(SetTeamWebsiteResponse)
	err := c.cc.Invoke(ctx, "/team.Team/SetTeamWebsite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamClient) SetTeamWebsiteSteam(ctx context.Context, opts ...grpc.CallOption) (Team_SetTeamWebsiteSteamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Team_ServiceDesc.Streams[5], "/team.Team/SetTeamWebsiteSteam", opts...)
	if err != nil {
		return nil, err
	}
	x := &teamSetTeamWebsiteSteamClient{stream}
	return x, nil
}

type Team_SetTeamWebsiteSteamClient interface {
	Send(*SetTeamWebsiteRequest) error
	Recv() (*SetTeamWebsiteResponse, error)
	grpc.ClientStream
}

type teamSetTeamWebsiteSteamClient struct {
	grpc.ClientStream
}

func (x *teamSetTeamWebsiteSteamClient) Send(m *SetTeamWebsiteRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *teamSetTeamWebsiteSteamClient) Recv() (*SetTeamWebsiteResponse, error) {
	m := new(SetTeamWebsiteResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *teamClient) SetTeamAvatar(ctx context.Context, in *SetTeamAvatarRequest, opts ...grpc.CallOption) (*SetTeamAvatarResponse, error) {
	out := new(SetTeamAvatarResponse)
	err := c.cc.Invoke(ctx, "/team.Team/SetTeamAvatar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamClient) SetTeamAvatarSteam(ctx context.Context, opts ...grpc.CallOption) (Team_SetTeamAvatarSteamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Team_ServiceDesc.Streams[6], "/team.Team/SetTeamAvatarSteam", opts...)
	if err != nil {
		return nil, err
	}
	x := &teamSetTeamAvatarSteamClient{stream}
	return x, nil
}

type Team_SetTeamAvatarSteamClient interface {
	Send(*SetTeamAvatarRequest) error
	Recv() (*SetTeamAvatarResponse, error)
	grpc.ClientStream
}

type teamSetTeamAvatarSteamClient struct {
	grpc.ClientStream
}

func (x *teamSetTeamAvatarSteamClient) Send(m *SetTeamAvatarRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *teamSetTeamAvatarSteamClient) Recv() (*SetTeamAvatarResponse, error) {
	m := new(SetTeamAvatarResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *teamClient) SetTeamEmail(ctx context.Context, in *SetTeamEmailRequest, opts ...grpc.CallOption) (*SetTeamEmailResponse, error) {
	out := new(SetTeamEmailResponse)
	err := c.cc.Invoke(ctx, "/team.Team/SetTeamEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamClient) SetTeamEmailSteam(ctx context.Context, opts ...grpc.CallOption) (Team_SetTeamEmailSteamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Team_ServiceDesc.Streams[7], "/team.Team/SetTeamEmailSteam", opts...)
	if err != nil {
		return nil, err
	}
	x := &teamSetTeamEmailSteamClient{stream}
	return x, nil
}

type Team_SetTeamEmailSteamClient interface {
	Send(*SetTeamEmailRequest) error
	Recv() (*SetTeamEmailResponse, error)
	grpc.ClientStream
}

type teamSetTeamEmailSteamClient struct {
	grpc.ClientStream
}

func (x *teamSetTeamEmailSteamClient) Send(m *SetTeamEmailRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *teamSetTeamEmailSteamClient) Recv() (*SetTeamEmailResponse, error) {
	m := new(SetTeamEmailResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *teamClient) DeleteTeam(ctx context.Context, in *DeleteTeamRequest, opts ...grpc.CallOption) (*DeleteTeamResponse, error) {
	out := new(DeleteTeamResponse)
	err := c.cc.Invoke(ctx, "/team.Team/DeleteTeam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamClient) DeleteTeamStream(ctx context.Context, opts ...grpc.CallOption) (Team_DeleteTeamStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Team_ServiceDesc.Streams[8], "/team.Team/DeleteTeamStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &teamDeleteTeamStreamClient{stream}
	return x, nil
}

type Team_DeleteTeamStreamClient interface {
	Send(*DeleteTeamRequest) error
	Recv() (*DeleteTeamResponse, error)
	grpc.ClientStream
}

type teamDeleteTeamStreamClient struct {
	grpc.ClientStream
}

func (x *teamDeleteTeamStreamClient) Send(m *DeleteTeamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *teamDeleteTeamStreamClient) Recv() (*DeleteTeamResponse, error) {
	m := new(DeleteTeamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *teamClient) AddMember(ctx context.Context, in *AddMemberRequest, opts ...grpc.CallOption) (*AddMemberResponse, error) {
	out := new(AddMemberResponse)
	err := c.cc.Invoke(ctx, "/team.Team/AddMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamClient) AddMemberStream(ctx context.Context, opts ...grpc.CallOption) (Team_AddMemberStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Team_ServiceDesc.Streams[9], "/team.Team/AddMemberStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &teamAddMemberStreamClient{stream}
	return x, nil
}

type Team_AddMemberStreamClient interface {
	Send(*AddMemberRequest) error
	Recv() (*AddMemberResponse, error)
	grpc.ClientStream
}

type teamAddMemberStreamClient struct {
	grpc.ClientStream
}

func (x *teamAddMemberStreamClient) Send(m *AddMemberRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *teamAddMemberStreamClient) Recv() (*AddMemberResponse, error) {
	m := new(AddMemberResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *teamClient) DeleteMember(ctx context.Context, in *DeleteMemberRequest, opts ...grpc.CallOption) (*DeleteMemberResponse, error) {
	out := new(DeleteMemberResponse)
	err := c.cc.Invoke(ctx, "/team.Team/DeleteMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamClient) DeleteMemberStream(ctx context.Context, opts ...grpc.CallOption) (Team_DeleteMemberStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Team_ServiceDesc.Streams[10], "/team.Team/DeleteMemberStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &teamDeleteMemberStreamClient{stream}
	return x, nil
}

type Team_DeleteMemberStreamClient interface {
	Send(*DeleteMemberRequest) error
	Recv() (*DeleteMemberResponse, error)
	grpc.ClientStream
}

type teamDeleteMemberStreamClient struct {
	grpc.ClientStream
}

func (x *teamDeleteMemberStreamClient) Send(m *DeleteMemberRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *teamDeleteMemberStreamClient) Recv() (*DeleteMemberResponse, error) {
	m := new(DeleteMemberResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *teamClient) AddAdmin(ctx context.Context, in *AddAdminRequest, opts ...grpc.CallOption) (*AddAdminResponse, error) {
	out := new(AddAdminResponse)
	err := c.cc.Invoke(ctx, "/team.Team/AddAdmin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *teamClient) AddAdminStream(ctx context.Context, opts ...grpc.CallOption) (Team_AddAdminStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Team_ServiceDesc.Streams[11], "/team.Team/AddAdminStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &teamAddAdminStreamClient{stream}
	return x, nil
}

type Team_AddAdminStreamClient interface {
	Send(*AddAdminRequest) error
	Recv() (*AddAdminResponse, error)
	grpc.ClientStream
}

type teamAddAdminStreamClient struct {
	grpc.ClientStream
}

func (x *teamAddAdminStreamClient) Send(m *AddAdminRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *teamAddAdminStreamClient) Recv() (*AddAdminResponse, error) {
	m := new(AddAdminResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TeamServer is the server API for Team service.
// All implementations must embed UnimplementedTeamServer
// for forward compatibility
type TeamServer interface {
	// Get a team by id
	GetTeamById(context.Context, *GetTeamByIdRequest) (*GetTeamResponse, error)
	// Get a team by id via stream
	GetTeamByIdStream(Team_GetTeamByIdStreamServer) error
	// Get a team by name
	GetTeamInfoList(context.Context, *GetTeamInfoListRequest) (*GetTeamInfoListResponse, error)
	// Get a user by name via stream
	GetTeamInfoListStream(Team_GetTeamInfoListStreamServer) error
	// add a team
	AddTeam(context.Context, *AddTeamRequest) (*AddTeamResponse, error)
	// add a team via stream
	AddTeamStream(Team_AddTeamStreamServer) error
	// set team name
	SetTeamName(context.Context, *SetTeamNameRequest) (*SetTeamNameResponse, error)
	// /set team name via stream
	SetTeamNameSteam(Team_SetTeamNameSteamServer) error
	// set team description
	SetTeamDescription(context.Context, *SetTeamDescriptionRequest) (*SetTeamDescriptionResponse, error)
	// set team description via stream
	SetTeamDescriptionSteam(Team_SetTeamDescriptionSteamServer) error
	// set team website
	SetTeamWebsite(context.Context, *SetTeamWebsiteRequest) (*SetTeamWebsiteResponse, error)
	// set team website via stream
	SetTeamWebsiteSteam(Team_SetTeamWebsiteSteamServer) error
	// set team avatar
	SetTeamAvatar(context.Context, *SetTeamAvatarRequest) (*SetTeamAvatarResponse, error)
	// set team avatar via stream
	SetTeamAvatarSteam(Team_SetTeamAvatarSteamServer) error
	// set team email
	SetTeamEmail(context.Context, *SetTeamEmailRequest) (*SetTeamEmailResponse, error)
	// set team email via stream
	SetTeamEmailSteam(Team_SetTeamEmailSteamServer) error
	// delete a team
	DeleteTeam(context.Context, *DeleteTeamRequest) (*DeleteTeamResponse, error)
	// delete a team via stream
	DeleteTeamStream(Team_DeleteTeamStreamServer) error
	// add  a  Member
	AddMember(context.Context, *AddMemberRequest) (*AddMemberResponse, error)
	// add a member  via stream
	AddMemberStream(Team_AddMemberStreamServer) error
	// Delete  a  Member
	DeleteMember(context.Context, *DeleteMemberRequest) (*DeleteMemberResponse, error)
	// Delete a Member  via stream
	DeleteMemberStream(Team_DeleteMemberStreamServer) error
	// add an administrator
	AddAdmin(context.Context, *AddAdminRequest) (*AddAdminResponse, error)
	// add an administrator  via stream
	AddAdminStream(Team_AddAdminStreamServer) error
	mustEmbedUnimplementedTeamServer()
}

// UnimplementedTeamServer must be embedded to have forward compatible implementations.
type UnimplementedTeamServer struct {
}

func (UnimplementedTeamServer) GetTeamById(context.Context, *GetTeamByIdRequest) (*GetTeamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeamById not implemented")
}
func (UnimplementedTeamServer) GetTeamByIdStream(Team_GetTeamByIdStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetTeamByIdStream not implemented")
}
func (UnimplementedTeamServer) GetTeamInfoList(context.Context, *GetTeamInfoListRequest) (*GetTeamInfoListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeamInfoList not implemented")
}
func (UnimplementedTeamServer) GetTeamInfoListStream(Team_GetTeamInfoListStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetTeamInfoListStream not implemented")
}
func (UnimplementedTeamServer) AddTeam(context.Context, *AddTeamRequest) (*AddTeamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTeam not implemented")
}
func (UnimplementedTeamServer) AddTeamStream(Team_AddTeamStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method AddTeamStream not implemented")
}
func (UnimplementedTeamServer) SetTeamName(context.Context, *SetTeamNameRequest) (*SetTeamNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTeamName not implemented")
}
func (UnimplementedTeamServer) SetTeamNameSteam(Team_SetTeamNameSteamServer) error {
	return status.Errorf(codes.Unimplemented, "method SetTeamNameSteam not implemented")
}
func (UnimplementedTeamServer) SetTeamDescription(context.Context, *SetTeamDescriptionRequest) (*SetTeamDescriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTeamDescription not implemented")
}
func (UnimplementedTeamServer) SetTeamDescriptionSteam(Team_SetTeamDescriptionSteamServer) error {
	return status.Errorf(codes.Unimplemented, "method SetTeamDescriptionSteam not implemented")
}
func (UnimplementedTeamServer) SetTeamWebsite(context.Context, *SetTeamWebsiteRequest) (*SetTeamWebsiteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTeamWebsite not implemented")
}
func (UnimplementedTeamServer) SetTeamWebsiteSteam(Team_SetTeamWebsiteSteamServer) error {
	return status.Errorf(codes.Unimplemented, "method SetTeamWebsiteSteam not implemented")
}
func (UnimplementedTeamServer) SetTeamAvatar(context.Context, *SetTeamAvatarRequest) (*SetTeamAvatarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTeamAvatar not implemented")
}
func (UnimplementedTeamServer) SetTeamAvatarSteam(Team_SetTeamAvatarSteamServer) error {
	return status.Errorf(codes.Unimplemented, "method SetTeamAvatarSteam not implemented")
}
func (UnimplementedTeamServer) SetTeamEmail(context.Context, *SetTeamEmailRequest) (*SetTeamEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTeamEmail not implemented")
}
func (UnimplementedTeamServer) SetTeamEmailSteam(Team_SetTeamEmailSteamServer) error {
	return status.Errorf(codes.Unimplemented, "method SetTeamEmailSteam not implemented")
}
func (UnimplementedTeamServer) DeleteTeam(context.Context, *DeleteTeamRequest) (*DeleteTeamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTeam not implemented")
}
func (UnimplementedTeamServer) DeleteTeamStream(Team_DeleteTeamStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method DeleteTeamStream not implemented")
}
func (UnimplementedTeamServer) AddMember(context.Context, *AddMemberRequest) (*AddMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMember not implemented")
}
func (UnimplementedTeamServer) AddMemberStream(Team_AddMemberStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method AddMemberStream not implemented")
}
func (UnimplementedTeamServer) DeleteMember(context.Context, *DeleteMemberRequest) (*DeleteMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMember not implemented")
}
func (UnimplementedTeamServer) DeleteMemberStream(Team_DeleteMemberStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method DeleteMemberStream not implemented")
}
func (UnimplementedTeamServer) AddAdmin(context.Context, *AddAdminRequest) (*AddAdminResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAdmin not implemented")
}
func (UnimplementedTeamServer) AddAdminStream(Team_AddAdminStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method AddAdminStream not implemented")
}
func (UnimplementedTeamServer) mustEmbedUnimplementedTeamServer() {}

// UnsafeTeamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TeamServer will
// result in compilation errors.
type UnsafeTeamServer interface {
	mustEmbedUnimplementedTeamServer()
}

func RegisterTeamServer(s grpc.ServiceRegistrar, srv TeamServer) {
	s.RegisterService(&Team_ServiceDesc, srv)
}

func _Team_GetTeamById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTeamByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServer).GetTeamById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/team.Team/GetTeamById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServer).GetTeamById(ctx, req.(*GetTeamByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Team_GetTeamByIdStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TeamServer).GetTeamByIdStream(&teamGetTeamByIdStreamServer{stream})
}

type Team_GetTeamByIdStreamServer interface {
	Send(*GetTeamResponse) error
	Recv() (*GetTeamByIdRequest, error)
	grpc.ServerStream
}

type teamGetTeamByIdStreamServer struct {
	grpc.ServerStream
}

func (x *teamGetTeamByIdStreamServer) Send(m *GetTeamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *teamGetTeamByIdStreamServer) Recv() (*GetTeamByIdRequest, error) {
	m := new(GetTeamByIdRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Team_GetTeamInfoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTeamInfoListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServer).GetTeamInfoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/team.Team/GetTeamInfoList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServer).GetTeamInfoList(ctx, req.(*GetTeamInfoListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Team_GetTeamInfoListStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TeamServer).GetTeamInfoListStream(&teamGetTeamInfoListStreamServer{stream})
}

type Team_GetTeamInfoListStreamServer interface {
	Send(*GetTeamInfoListResponse) error
	Recv() (*GetTeamInfoListRequest, error)
	grpc.ServerStream
}

type teamGetTeamInfoListStreamServer struct {
	grpc.ServerStream
}

func (x *teamGetTeamInfoListStreamServer) Send(m *GetTeamInfoListResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *teamGetTeamInfoListStreamServer) Recv() (*GetTeamInfoListRequest, error) {
	m := new(GetTeamInfoListRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Team_AddTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServer).AddTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/team.Team/AddTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServer).AddTeam(ctx, req.(*AddTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Team_AddTeamStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TeamServer).AddTeamStream(&teamAddTeamStreamServer{stream})
}

type Team_AddTeamStreamServer interface {
	Send(*AddTeamResponse) error
	Recv() (*AddTeamRequest, error)
	grpc.ServerStream
}

type teamAddTeamStreamServer struct {
	grpc.ServerStream
}

func (x *teamAddTeamStreamServer) Send(m *AddTeamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *teamAddTeamStreamServer) Recv() (*AddTeamRequest, error) {
	m := new(AddTeamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Team_SetTeamName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTeamNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServer).SetTeamName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/team.Team/SetTeamName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServer).SetTeamName(ctx, req.(*SetTeamNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Team_SetTeamNameSteam_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TeamServer).SetTeamNameSteam(&teamSetTeamNameSteamServer{stream})
}

type Team_SetTeamNameSteamServer interface {
	Send(*SetTeamNameResponse) error
	Recv() (*SetTeamNameRequest, error)
	grpc.ServerStream
}

type teamSetTeamNameSteamServer struct {
	grpc.ServerStream
}

func (x *teamSetTeamNameSteamServer) Send(m *SetTeamNameResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *teamSetTeamNameSteamServer) Recv() (*SetTeamNameRequest, error) {
	m := new(SetTeamNameRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Team_SetTeamDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTeamDescriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServer).SetTeamDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/team.Team/SetTeamDescription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServer).SetTeamDescription(ctx, req.(*SetTeamDescriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Team_SetTeamDescriptionSteam_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TeamServer).SetTeamDescriptionSteam(&teamSetTeamDescriptionSteamServer{stream})
}

type Team_SetTeamDescriptionSteamServer interface {
	Send(*SetTeamDescriptionResponse) error
	Recv() (*SetTeamDescriptionRequest, error)
	grpc.ServerStream
}

type teamSetTeamDescriptionSteamServer struct {
	grpc.ServerStream
}

func (x *teamSetTeamDescriptionSteamServer) Send(m *SetTeamDescriptionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *teamSetTeamDescriptionSteamServer) Recv() (*SetTeamDescriptionRequest, error) {
	m := new(SetTeamDescriptionRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Team_SetTeamWebsite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTeamWebsiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServer).SetTeamWebsite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/team.Team/SetTeamWebsite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServer).SetTeamWebsite(ctx, req.(*SetTeamWebsiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Team_SetTeamWebsiteSteam_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TeamServer).SetTeamWebsiteSteam(&teamSetTeamWebsiteSteamServer{stream})
}

type Team_SetTeamWebsiteSteamServer interface {
	Send(*SetTeamWebsiteResponse) error
	Recv() (*SetTeamWebsiteRequest, error)
	grpc.ServerStream
}

type teamSetTeamWebsiteSteamServer struct {
	grpc.ServerStream
}

func (x *teamSetTeamWebsiteSteamServer) Send(m *SetTeamWebsiteResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *teamSetTeamWebsiteSteamServer) Recv() (*SetTeamWebsiteRequest, error) {
	m := new(SetTeamWebsiteRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Team_SetTeamAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTeamAvatarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServer).SetTeamAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/team.Team/SetTeamAvatar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServer).SetTeamAvatar(ctx, req.(*SetTeamAvatarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Team_SetTeamAvatarSteam_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TeamServer).SetTeamAvatarSteam(&teamSetTeamAvatarSteamServer{stream})
}

type Team_SetTeamAvatarSteamServer interface {
	Send(*SetTeamAvatarResponse) error
	Recv() (*SetTeamAvatarRequest, error)
	grpc.ServerStream
}

type teamSetTeamAvatarSteamServer struct {
	grpc.ServerStream
}

func (x *teamSetTeamAvatarSteamServer) Send(m *SetTeamAvatarResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *teamSetTeamAvatarSteamServer) Recv() (*SetTeamAvatarRequest, error) {
	m := new(SetTeamAvatarRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Team_SetTeamEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTeamEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServer).SetTeamEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/team.Team/SetTeamEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServer).SetTeamEmail(ctx, req.(*SetTeamEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Team_SetTeamEmailSteam_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TeamServer).SetTeamEmailSteam(&teamSetTeamEmailSteamServer{stream})
}

type Team_SetTeamEmailSteamServer interface {
	Send(*SetTeamEmailResponse) error
	Recv() (*SetTeamEmailRequest, error)
	grpc.ServerStream
}

type teamSetTeamEmailSteamServer struct {
	grpc.ServerStream
}

func (x *teamSetTeamEmailSteamServer) Send(m *SetTeamEmailResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *teamSetTeamEmailSteamServer) Recv() (*SetTeamEmailRequest, error) {
	m := new(SetTeamEmailRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Team_DeleteTeam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTeamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServer).DeleteTeam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/team.Team/DeleteTeam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServer).DeleteTeam(ctx, req.(*DeleteTeamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Team_DeleteTeamStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TeamServer).DeleteTeamStream(&teamDeleteTeamStreamServer{stream})
}

type Team_DeleteTeamStreamServer interface {
	Send(*DeleteTeamResponse) error
	Recv() (*DeleteTeamRequest, error)
	grpc.ServerStream
}

type teamDeleteTeamStreamServer struct {
	grpc.ServerStream
}

func (x *teamDeleteTeamStreamServer) Send(m *DeleteTeamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *teamDeleteTeamStreamServer) Recv() (*DeleteTeamRequest, error) {
	m := new(DeleteTeamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Team_AddMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServer).AddMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/team.Team/AddMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServer).AddMember(ctx, req.(*AddMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Team_AddMemberStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TeamServer).AddMemberStream(&teamAddMemberStreamServer{stream})
}

type Team_AddMemberStreamServer interface {
	Send(*AddMemberResponse) error
	Recv() (*AddMemberRequest, error)
	grpc.ServerStream
}

type teamAddMemberStreamServer struct {
	grpc.ServerStream
}

func (x *teamAddMemberStreamServer) Send(m *AddMemberResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *teamAddMemberStreamServer) Recv() (*AddMemberRequest, error) {
	m := new(AddMemberRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Team_DeleteMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServer).DeleteMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/team.Team/DeleteMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServer).DeleteMember(ctx, req.(*DeleteMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Team_DeleteMemberStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TeamServer).DeleteMemberStream(&teamDeleteMemberStreamServer{stream})
}

type Team_DeleteMemberStreamServer interface {
	Send(*DeleteMemberResponse) error
	Recv() (*DeleteMemberRequest, error)
	grpc.ServerStream
}

type teamDeleteMemberStreamServer struct {
	grpc.ServerStream
}

func (x *teamDeleteMemberStreamServer) Send(m *DeleteMemberResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *teamDeleteMemberStreamServer) Recv() (*DeleteMemberRequest, error) {
	m := new(DeleteMemberRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Team_AddAdmin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAdminRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TeamServer).AddAdmin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/team.Team/AddAdmin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TeamServer).AddAdmin(ctx, req.(*AddAdminRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Team_AddAdminStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TeamServer).AddAdminStream(&teamAddAdminStreamServer{stream})
}

type Team_AddAdminStreamServer interface {
	Send(*AddAdminResponse) error
	Recv() (*AddAdminRequest, error)
	grpc.ServerStream
}

type teamAddAdminStreamServer struct {
	grpc.ServerStream
}

func (x *teamAddAdminStreamServer) Send(m *AddAdminResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *teamAddAdminStreamServer) Recv() (*AddAdminRequest, error) {
	m := new(AddAdminRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Team_ServiceDesc is the grpc.ServiceDesc for Team service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Team_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "team.Team",
	HandlerType: (*TeamServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTeamById",
			Handler:    _Team_GetTeamById_Handler,
		},
		{
			MethodName: "GetTeamInfoList",
			Handler:    _Team_GetTeamInfoList_Handler,
		},
		{
			MethodName: "AddTeam",
			Handler:    _Team_AddTeam_Handler,
		},
		{
			MethodName: "SetTeamName",
			Handler:    _Team_SetTeamName_Handler,
		},
		{
			MethodName: "SetTeamDescription",
			Handler:    _Team_SetTeamDescription_Handler,
		},
		{
			MethodName: "SetTeamWebsite",
			Handler:    _Team_SetTeamWebsite_Handler,
		},
		{
			MethodName: "SetTeamAvatar",
			Handler:    _Team_SetTeamAvatar_Handler,
		},
		{
			MethodName: "SetTeamEmail",
			Handler:    _Team_SetTeamEmail_Handler,
		},
		{
			MethodName: "DeleteTeam",
			Handler:    _Team_DeleteTeam_Handler,
		},
		{
			MethodName: "AddMember",
			Handler:    _Team_AddMember_Handler,
		},
		{
			MethodName: "DeleteMember",
			Handler:    _Team_DeleteMember_Handler,
		},
		{
			MethodName: "AddAdmin",
			Handler:    _Team_AddAdmin_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetTeamByIdStream",
			Handler:       _Team_GetTeamByIdStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetTeamInfoListStream",
			Handler:       _Team_GetTeamInfoListStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "AddTeamStream",
			Handler:       _Team_AddTeamStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SetTeamNameSteam",
			Handler:       _Team_SetTeamNameSteam_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SetTeamDescriptionSteam",
			Handler:       _Team_SetTeamDescriptionSteam_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SetTeamWebsiteSteam",
			Handler:       _Team_SetTeamWebsiteSteam_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SetTeamAvatarSteam",
			Handler:       _Team_SetTeamAvatarSteam_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SetTeamEmailSteam",
			Handler:       _Team_SetTeamEmailSteam_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "DeleteTeamStream",
			Handler:       _Team_DeleteTeamStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "AddMemberStream",
			Handler:       _Team_AddMemberStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "DeleteMemberStream",
			Handler:       _Team_DeleteMemberStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "AddAdminStream",
			Handler:       _Team_AddAdminStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "team.proto",
}
