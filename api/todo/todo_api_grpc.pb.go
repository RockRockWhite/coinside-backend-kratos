// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: todo_api.proto

package todo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TodoServiceClient is the client API for TodoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TodoServiceClient interface {
	// Get a todo by id
	GetTodoById(ctx context.Context, in *GetTodoByIdRequest, opts ...grpc.CallOption) (*GetTodoResponse, error)
	// Get a Todo by id via stream
	GetTodoByIdStream(ctx context.Context, opts ...grpc.CallOption) (TodoService_GetTodoByIdStreamClient, error)
	// add a Todo
	AddTodo(ctx context.Context, in *TodoInfo, opts ...grpc.CallOption) (*AddTodoResponse, error)
	// add a Todo via stream
	AddTodoStream(ctx context.Context, opts ...grpc.CallOption) (TodoService_AddTodoStreamClient, error)
	// set Todo title
	SetTodoTitle(ctx context.Context, in *SetTodoTitleRequest, opts ...grpc.CallOption) (*SetTodoTitleResponse, error)
	// set Todo title via stream
	SetTodoTitleStream(ctx context.Context, in *SetTodoTitleRequest, opts ...grpc.CallOption) (TodoService_SetTodoTitleStreamClient, error)
	// delete a Todo
	DeleteTodo(ctx context.Context, in *DeleteTodoRequest, opts ...grpc.CallOption) (*DeleteTodoResponse, error)
	// delete a Todo via stream
	DeleteTodoStream(ctx context.Context, opts ...grpc.CallOption) (TodoService_DeleteTodoStreamClient, error)
	// add  a  todoitem
	AddItem(ctx context.Context, in *TodoItem, opts ...grpc.CallOption) (*AddItemResponse, error)
	// add a todoitem  via stream
	AddItemStream(ctx context.Context, opts ...grpc.CallOption) (TodoService_AddItemStreamClient, error)
	// set todoitem content
	SetItemContent(ctx context.Context, in *SetContentRequest, opts ...grpc.CallOption) (*SetContentResponse, error)
	// set todoitem content via stream
	SetItemContentStream(ctx context.Context, opts ...grpc.CallOption) (TodoService_SetItemContentStreamClient, error)
	// set todoitem finished
	SetItemFinished(ctx context.Context, in *SetFinishedRequest, opts ...grpc.CallOption) (*SetFinishedResponse, error)
	// set todoitem finished via stream
	SetItemFinishedStream(ctx context.Context, opts ...grpc.CallOption) (TodoService_SetItemFinishedStreamClient, error)
	// delete a todoitem
	DeleteTodoItem(ctx context.Context, in *DeleteTodoItemRequest, opts ...grpc.CallOption) (*DeleteTodoItemResponse, error)
	// delete a todoitem via stream
	DeleteTodoItemStream(ctx context.Context, opts ...grpc.CallOption) (TodoService_DeleteTodoItemStreamClient, error)
}

type todoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTodoServiceClient(cc grpc.ClientConnInterface) TodoServiceClient {
	return &todoServiceClient{cc}
}

func (c *todoServiceClient) GetTodoById(ctx context.Context, in *GetTodoByIdRequest, opts ...grpc.CallOption) (*GetTodoResponse, error) {
	out := new(GetTodoResponse)
	err := c.cc.Invoke(ctx, "/todo.TodoService/GetTodoById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoServiceClient) GetTodoByIdStream(ctx context.Context, opts ...grpc.CallOption) (TodoService_GetTodoByIdStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &TodoService_ServiceDesc.Streams[0], "/todo.TodoService/GetTodoByIdStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &todoServiceGetTodoByIdStreamClient{stream}
	return x, nil
}

type TodoService_GetTodoByIdStreamClient interface {
	Send(*GetTodoByIdRequest) error
	Recv() (*GetTodoResponse, error)
	grpc.ClientStream
}

type todoServiceGetTodoByIdStreamClient struct {
	grpc.ClientStream
}

func (x *todoServiceGetTodoByIdStreamClient) Send(m *GetTodoByIdRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *todoServiceGetTodoByIdStreamClient) Recv() (*GetTodoResponse, error) {
	m := new(GetTodoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *todoServiceClient) AddTodo(ctx context.Context, in *TodoInfo, opts ...grpc.CallOption) (*AddTodoResponse, error) {
	out := new(AddTodoResponse)
	err := c.cc.Invoke(ctx, "/todo.TodoService/AddTodo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoServiceClient) AddTodoStream(ctx context.Context, opts ...grpc.CallOption) (TodoService_AddTodoStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &TodoService_ServiceDesc.Streams[1], "/todo.TodoService/AddTodoStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &todoServiceAddTodoStreamClient{stream}
	return x, nil
}

type TodoService_AddTodoStreamClient interface {
	Send(*TodoInfo) error
	Recv() (*AddTodoResponse, error)
	grpc.ClientStream
}

type todoServiceAddTodoStreamClient struct {
	grpc.ClientStream
}

func (x *todoServiceAddTodoStreamClient) Send(m *TodoInfo) error {
	return x.ClientStream.SendMsg(m)
}

func (x *todoServiceAddTodoStreamClient) Recv() (*AddTodoResponse, error) {
	m := new(AddTodoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *todoServiceClient) SetTodoTitle(ctx context.Context, in *SetTodoTitleRequest, opts ...grpc.CallOption) (*SetTodoTitleResponse, error) {
	out := new(SetTodoTitleResponse)
	err := c.cc.Invoke(ctx, "/todo.TodoService/SetTodoTitle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoServiceClient) SetTodoTitleStream(ctx context.Context, in *SetTodoTitleRequest, opts ...grpc.CallOption) (TodoService_SetTodoTitleStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &TodoService_ServiceDesc.Streams[2], "/todo.TodoService/SetTodoTitleStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &todoServiceSetTodoTitleStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TodoService_SetTodoTitleStreamClient interface {
	Recv() (*SetTodoTitleResponse, error)
	grpc.ClientStream
}

type todoServiceSetTodoTitleStreamClient struct {
	grpc.ClientStream
}

func (x *todoServiceSetTodoTitleStreamClient) Recv() (*SetTodoTitleResponse, error) {
	m := new(SetTodoTitleResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *todoServiceClient) DeleteTodo(ctx context.Context, in *DeleteTodoRequest, opts ...grpc.CallOption) (*DeleteTodoResponse, error) {
	out := new(DeleteTodoResponse)
	err := c.cc.Invoke(ctx, "/todo.TodoService/DeleteTodo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoServiceClient) DeleteTodoStream(ctx context.Context, opts ...grpc.CallOption) (TodoService_DeleteTodoStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &TodoService_ServiceDesc.Streams[3], "/todo.TodoService/DeleteTodoStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &todoServiceDeleteTodoStreamClient{stream}
	return x, nil
}

type TodoService_DeleteTodoStreamClient interface {
	Send(*DeleteTodoRequest) error
	Recv() (*DeleteTodoResponse, error)
	grpc.ClientStream
}

type todoServiceDeleteTodoStreamClient struct {
	grpc.ClientStream
}

func (x *todoServiceDeleteTodoStreamClient) Send(m *DeleteTodoRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *todoServiceDeleteTodoStreamClient) Recv() (*DeleteTodoResponse, error) {
	m := new(DeleteTodoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *todoServiceClient) AddItem(ctx context.Context, in *TodoItem, opts ...grpc.CallOption) (*AddItemResponse, error) {
	out := new(AddItemResponse)
	err := c.cc.Invoke(ctx, "/todo.TodoService/AddItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoServiceClient) AddItemStream(ctx context.Context, opts ...grpc.CallOption) (TodoService_AddItemStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &TodoService_ServiceDesc.Streams[4], "/todo.TodoService/AddItemStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &todoServiceAddItemStreamClient{stream}
	return x, nil
}

type TodoService_AddItemStreamClient interface {
	Send(*TodoItem) error
	Recv() (*AddItemResponse, error)
	grpc.ClientStream
}

type todoServiceAddItemStreamClient struct {
	grpc.ClientStream
}

func (x *todoServiceAddItemStreamClient) Send(m *TodoItem) error {
	return x.ClientStream.SendMsg(m)
}

func (x *todoServiceAddItemStreamClient) Recv() (*AddItemResponse, error) {
	m := new(AddItemResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *todoServiceClient) SetItemContent(ctx context.Context, in *SetContentRequest, opts ...grpc.CallOption) (*SetContentResponse, error) {
	out := new(SetContentResponse)
	err := c.cc.Invoke(ctx, "/todo.TodoService/SetItemContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoServiceClient) SetItemContentStream(ctx context.Context, opts ...grpc.CallOption) (TodoService_SetItemContentStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &TodoService_ServiceDesc.Streams[5], "/todo.TodoService/SetItemContentStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &todoServiceSetItemContentStreamClient{stream}
	return x, nil
}

type TodoService_SetItemContentStreamClient interface {
	Send(*SetContentRequest) error
	Recv() (*SetContentResponse, error)
	grpc.ClientStream
}

type todoServiceSetItemContentStreamClient struct {
	grpc.ClientStream
}

func (x *todoServiceSetItemContentStreamClient) Send(m *SetContentRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *todoServiceSetItemContentStreamClient) Recv() (*SetContentResponse, error) {
	m := new(SetContentResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *todoServiceClient) SetItemFinished(ctx context.Context, in *SetFinishedRequest, opts ...grpc.CallOption) (*SetFinishedResponse, error) {
	out := new(SetFinishedResponse)
	err := c.cc.Invoke(ctx, "/todo.TodoService/SetItemFinished", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoServiceClient) SetItemFinishedStream(ctx context.Context, opts ...grpc.CallOption) (TodoService_SetItemFinishedStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &TodoService_ServiceDesc.Streams[6], "/todo.TodoService/SetItemFinishedStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &todoServiceSetItemFinishedStreamClient{stream}
	return x, nil
}

type TodoService_SetItemFinishedStreamClient interface {
	Send(*SetFinishedRequest) error
	Recv() (*SetFinishedResponse, error)
	grpc.ClientStream
}

type todoServiceSetItemFinishedStreamClient struct {
	grpc.ClientStream
}

func (x *todoServiceSetItemFinishedStreamClient) Send(m *SetFinishedRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *todoServiceSetItemFinishedStreamClient) Recv() (*SetFinishedResponse, error) {
	m := new(SetFinishedResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *todoServiceClient) DeleteTodoItem(ctx context.Context, in *DeleteTodoItemRequest, opts ...grpc.CallOption) (*DeleteTodoItemResponse, error) {
	out := new(DeleteTodoItemResponse)
	err := c.cc.Invoke(ctx, "/todo.TodoService/DeleteTodoItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoServiceClient) DeleteTodoItemStream(ctx context.Context, opts ...grpc.CallOption) (TodoService_DeleteTodoItemStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &TodoService_ServiceDesc.Streams[7], "/todo.TodoService/DeleteTodoItemStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &todoServiceDeleteTodoItemStreamClient{stream}
	return x, nil
}

type TodoService_DeleteTodoItemStreamClient interface {
	Send(*DeleteTodoItemRequest) error
	Recv() (*DeleteTodoItemResponse, error)
	grpc.ClientStream
}

type todoServiceDeleteTodoItemStreamClient struct {
	grpc.ClientStream
}

func (x *todoServiceDeleteTodoItemStreamClient) Send(m *DeleteTodoItemRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *todoServiceDeleteTodoItemStreamClient) Recv() (*DeleteTodoItemResponse, error) {
	m := new(DeleteTodoItemResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TodoServiceServer is the server API for TodoService service.
// All implementations must embed UnimplementedTodoServiceServer
// for forward compatibility
type TodoServiceServer interface {
	// Get a todo by id
	GetTodoById(context.Context, *GetTodoByIdRequest) (*GetTodoResponse, error)
	// Get a Todo by id via stream
	GetTodoByIdStream(TodoService_GetTodoByIdStreamServer) error
	// add a Todo
	AddTodo(context.Context, *TodoInfo) (*AddTodoResponse, error)
	// add a Todo via stream
	AddTodoStream(TodoService_AddTodoStreamServer) error
	// set Todo title
	SetTodoTitle(context.Context, *SetTodoTitleRequest) (*SetTodoTitleResponse, error)
	// set Todo title via stream
	SetTodoTitleStream(*SetTodoTitleRequest, TodoService_SetTodoTitleStreamServer) error
	// delete a Todo
	DeleteTodo(context.Context, *DeleteTodoRequest) (*DeleteTodoResponse, error)
	// delete a Todo via stream
	DeleteTodoStream(TodoService_DeleteTodoStreamServer) error
	// add  a  todoitem
	AddItem(context.Context, *TodoItem) (*AddItemResponse, error)
	// add a todoitem  via stream
	AddItemStream(TodoService_AddItemStreamServer) error
	// set todoitem content
	SetItemContent(context.Context, *SetContentRequest) (*SetContentResponse, error)
	// set todoitem content via stream
	SetItemContentStream(TodoService_SetItemContentStreamServer) error
	// set todoitem finished
	SetItemFinished(context.Context, *SetFinishedRequest) (*SetFinishedResponse, error)
	// set todoitem finished via stream
	SetItemFinishedStream(TodoService_SetItemFinishedStreamServer) error
	// delete a todoitem
	DeleteTodoItem(context.Context, *DeleteTodoItemRequest) (*DeleteTodoItemResponse, error)
	// delete a todoitem via stream
	DeleteTodoItemStream(TodoService_DeleteTodoItemStreamServer) error
	mustEmbedUnimplementedTodoServiceServer()
}

// UnimplementedTodoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTodoServiceServer struct {
}

func (UnimplementedTodoServiceServer) GetTodoById(context.Context, *GetTodoByIdRequest) (*GetTodoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTodoById not implemented")
}
func (UnimplementedTodoServiceServer) GetTodoByIdStream(TodoService_GetTodoByIdStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetTodoByIdStream not implemented")
}
func (UnimplementedTodoServiceServer) AddTodo(context.Context, *TodoInfo) (*AddTodoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTodo not implemented")
}
func (UnimplementedTodoServiceServer) AddTodoStream(TodoService_AddTodoStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method AddTodoStream not implemented")
}
func (UnimplementedTodoServiceServer) SetTodoTitle(context.Context, *SetTodoTitleRequest) (*SetTodoTitleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetTodoTitle not implemented")
}
func (UnimplementedTodoServiceServer) SetTodoTitleStream(*SetTodoTitleRequest, TodoService_SetTodoTitleStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SetTodoTitleStream not implemented")
}
func (UnimplementedTodoServiceServer) DeleteTodo(context.Context, *DeleteTodoRequest) (*DeleteTodoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTodo not implemented")
}
func (UnimplementedTodoServiceServer) DeleteTodoStream(TodoService_DeleteTodoStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method DeleteTodoStream not implemented")
}
func (UnimplementedTodoServiceServer) AddItem(context.Context, *TodoItem) (*AddItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddItem not implemented")
}
func (UnimplementedTodoServiceServer) AddItemStream(TodoService_AddItemStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method AddItemStream not implemented")
}
func (UnimplementedTodoServiceServer) SetItemContent(context.Context, *SetContentRequest) (*SetContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetItemContent not implemented")
}
func (UnimplementedTodoServiceServer) SetItemContentStream(TodoService_SetItemContentStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SetItemContentStream not implemented")
}
func (UnimplementedTodoServiceServer) SetItemFinished(context.Context, *SetFinishedRequest) (*SetFinishedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetItemFinished not implemented")
}
func (UnimplementedTodoServiceServer) SetItemFinishedStream(TodoService_SetItemFinishedStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SetItemFinishedStream not implemented")
}
func (UnimplementedTodoServiceServer) DeleteTodoItem(context.Context, *DeleteTodoItemRequest) (*DeleteTodoItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTodoItem not implemented")
}
func (UnimplementedTodoServiceServer) DeleteTodoItemStream(TodoService_DeleteTodoItemStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method DeleteTodoItemStream not implemented")
}
func (UnimplementedTodoServiceServer) mustEmbedUnimplementedTodoServiceServer() {}

// UnsafeTodoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TodoServiceServer will
// result in compilation errors.
type UnsafeTodoServiceServer interface {
	mustEmbedUnimplementedTodoServiceServer()
}

func RegisterTodoServiceServer(s grpc.ServiceRegistrar, srv TodoServiceServer) {
	s.RegisterService(&TodoService_ServiceDesc, srv)
}

func _TodoService_GetTodoById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTodoByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServiceServer).GetTodoById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todo.TodoService/GetTodoById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServiceServer).GetTodoById(ctx, req.(*GetTodoByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoService_GetTodoByIdStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TodoServiceServer).GetTodoByIdStream(&todoServiceGetTodoByIdStreamServer{stream})
}

type TodoService_GetTodoByIdStreamServer interface {
	Send(*GetTodoResponse) error
	Recv() (*GetTodoByIdRequest, error)
	grpc.ServerStream
}

type todoServiceGetTodoByIdStreamServer struct {
	grpc.ServerStream
}

func (x *todoServiceGetTodoByIdStreamServer) Send(m *GetTodoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *todoServiceGetTodoByIdStreamServer) Recv() (*GetTodoByIdRequest, error) {
	m := new(GetTodoByIdRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TodoService_AddTodo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TodoInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServiceServer).AddTodo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todo.TodoService/AddTodo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServiceServer).AddTodo(ctx, req.(*TodoInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoService_AddTodoStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TodoServiceServer).AddTodoStream(&todoServiceAddTodoStreamServer{stream})
}

type TodoService_AddTodoStreamServer interface {
	Send(*AddTodoResponse) error
	Recv() (*TodoInfo, error)
	grpc.ServerStream
}

type todoServiceAddTodoStreamServer struct {
	grpc.ServerStream
}

func (x *todoServiceAddTodoStreamServer) Send(m *AddTodoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *todoServiceAddTodoStreamServer) Recv() (*TodoInfo, error) {
	m := new(TodoInfo)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TodoService_SetTodoTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetTodoTitleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServiceServer).SetTodoTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todo.TodoService/SetTodoTitle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServiceServer).SetTodoTitle(ctx, req.(*SetTodoTitleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoService_SetTodoTitleStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SetTodoTitleRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TodoServiceServer).SetTodoTitleStream(m, &todoServiceSetTodoTitleStreamServer{stream})
}

type TodoService_SetTodoTitleStreamServer interface {
	Send(*SetTodoTitleResponse) error
	grpc.ServerStream
}

type todoServiceSetTodoTitleStreamServer struct {
	grpc.ServerStream
}

func (x *todoServiceSetTodoTitleStreamServer) Send(m *SetTodoTitleResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TodoService_DeleteTodo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTodoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServiceServer).DeleteTodo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todo.TodoService/DeleteTodo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServiceServer).DeleteTodo(ctx, req.(*DeleteTodoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoService_DeleteTodoStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TodoServiceServer).DeleteTodoStream(&todoServiceDeleteTodoStreamServer{stream})
}

type TodoService_DeleteTodoStreamServer interface {
	Send(*DeleteTodoResponse) error
	Recv() (*DeleteTodoRequest, error)
	grpc.ServerStream
}

type todoServiceDeleteTodoStreamServer struct {
	grpc.ServerStream
}

func (x *todoServiceDeleteTodoStreamServer) Send(m *DeleteTodoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *todoServiceDeleteTodoStreamServer) Recv() (*DeleteTodoRequest, error) {
	m := new(DeleteTodoRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TodoService_AddItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TodoItem)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServiceServer).AddItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todo.TodoService/AddItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServiceServer).AddItem(ctx, req.(*TodoItem))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoService_AddItemStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TodoServiceServer).AddItemStream(&todoServiceAddItemStreamServer{stream})
}

type TodoService_AddItemStreamServer interface {
	Send(*AddItemResponse) error
	Recv() (*TodoItem, error)
	grpc.ServerStream
}

type todoServiceAddItemStreamServer struct {
	grpc.ServerStream
}

func (x *todoServiceAddItemStreamServer) Send(m *AddItemResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *todoServiceAddItemStreamServer) Recv() (*TodoItem, error) {
	m := new(TodoItem)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TodoService_SetItemContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServiceServer).SetItemContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todo.TodoService/SetItemContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServiceServer).SetItemContent(ctx, req.(*SetContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoService_SetItemContentStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TodoServiceServer).SetItemContentStream(&todoServiceSetItemContentStreamServer{stream})
}

type TodoService_SetItemContentStreamServer interface {
	Send(*SetContentResponse) error
	Recv() (*SetContentRequest, error)
	grpc.ServerStream
}

type todoServiceSetItemContentStreamServer struct {
	grpc.ServerStream
}

func (x *todoServiceSetItemContentStreamServer) Send(m *SetContentResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *todoServiceSetItemContentStreamServer) Recv() (*SetContentRequest, error) {
	m := new(SetContentRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TodoService_SetItemFinished_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetFinishedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServiceServer).SetItemFinished(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todo.TodoService/SetItemFinished",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServiceServer).SetItemFinished(ctx, req.(*SetFinishedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoService_SetItemFinishedStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TodoServiceServer).SetItemFinishedStream(&todoServiceSetItemFinishedStreamServer{stream})
}

type TodoService_SetItemFinishedStreamServer interface {
	Send(*SetFinishedResponse) error
	Recv() (*SetFinishedRequest, error)
	grpc.ServerStream
}

type todoServiceSetItemFinishedStreamServer struct {
	grpc.ServerStream
}

func (x *todoServiceSetItemFinishedStreamServer) Send(m *SetFinishedResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *todoServiceSetItemFinishedStreamServer) Recv() (*SetFinishedRequest, error) {
	m := new(SetFinishedRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TodoService_DeleteTodoItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTodoItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServiceServer).DeleteTodoItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todo.TodoService/DeleteTodoItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServiceServer).DeleteTodoItem(ctx, req.(*DeleteTodoItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoService_DeleteTodoItemStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TodoServiceServer).DeleteTodoItemStream(&todoServiceDeleteTodoItemStreamServer{stream})
}

type TodoService_DeleteTodoItemStreamServer interface {
	Send(*DeleteTodoItemResponse) error
	Recv() (*DeleteTodoItemRequest, error)
	grpc.ServerStream
}

type todoServiceDeleteTodoItemStreamServer struct {
	grpc.ServerStream
}

func (x *todoServiceDeleteTodoItemStreamServer) Send(m *DeleteTodoItemResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *todoServiceDeleteTodoItemStreamServer) Recv() (*DeleteTodoItemRequest, error) {
	m := new(DeleteTodoItemRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TodoService_ServiceDesc is the grpc.ServiceDesc for TodoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TodoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "todo.TodoService",
	HandlerType: (*TodoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTodoById",
			Handler:    _TodoService_GetTodoById_Handler,
		},
		{
			MethodName: "AddTodo",
			Handler:    _TodoService_AddTodo_Handler,
		},
		{
			MethodName: "SetTodoTitle",
			Handler:    _TodoService_SetTodoTitle_Handler,
		},
		{
			MethodName: "DeleteTodo",
			Handler:    _TodoService_DeleteTodo_Handler,
		},
		{
			MethodName: "AddItem",
			Handler:    _TodoService_AddItem_Handler,
		},
		{
			MethodName: "SetItemContent",
			Handler:    _TodoService_SetItemContent_Handler,
		},
		{
			MethodName: "SetItemFinished",
			Handler:    _TodoService_SetItemFinished_Handler,
		},
		{
			MethodName: "DeleteTodoItem",
			Handler:    _TodoService_DeleteTodoItem_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetTodoByIdStream",
			Handler:       _TodoService_GetTodoByIdStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "AddTodoStream",
			Handler:       _TodoService_AddTodoStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SetTodoTitleStream",
			Handler:       _TodoService_SetTodoTitleStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DeleteTodoStream",
			Handler:       _TodoService_DeleteTodoStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "AddItemStream",
			Handler:       _TodoService_AddItemStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SetItemContentStream",
			Handler:       _TodoService_SetItemContentStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SetItemFinishedStream",
			Handler:       _TodoService_SetItemFinishedStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "DeleteTodoItemStream",
			Handler:       _TodoService_DeleteTodoItemStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "todo_api.proto",
}
