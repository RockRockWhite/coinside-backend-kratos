// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: vote_api.proto

package vote

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VoteClient is the client API for Vote service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VoteClient interface {
	// Get a vote by id
	GetVoteById(ctx context.Context, in *GetVoteByIdRequest, opts ...grpc.CallOption) (*GetVoteResponse, error)
	// Get a vote by id via stream
	GetVoteByIdStream(ctx context.Context, opts ...grpc.CallOption) (Vote_GetVoteByIdStreamClient, error)
	// add a Vote
	AddVote(ctx context.Context, in *AddVoteRequest, opts ...grpc.CallOption) (*AddVoteResponse, error)
	// add a Vote via stream
	AddVoteStream(ctx context.Context, opts ...grpc.CallOption) (Vote_AddVoteStreamClient, error)
	// set Vote title
	SetVoteTitle(ctx context.Context, in *SetVoteTitleRequest, opts ...grpc.CallOption) (*SetVoteTitleResponse, error)
	// set Vote title via stream
	SetVoteTitleStream(ctx context.Context, in *SetVoteTitleRequest, opts ...grpc.CallOption) (Vote_SetVoteTitleStreamClient, error)
	// delete a Vote
	DeleteVote(ctx context.Context, in *DeleteVoteRequest, opts ...grpc.CallOption) (*DeleteVoteResponse, error)
	// delete a Vote via stream
	DeleteVoteStream(ctx context.Context, opts ...grpc.CallOption) (Vote_DeleteVoteStreamClient, error)
	// add  a  Voteitem
	AddItem(ctx context.Context, in *AddItemRequest, opts ...grpc.CallOption) (*AddItemResponse, error)
	// add a Voteitem  via stream
	AddItemStream(ctx context.Context, opts ...grpc.CallOption) (Vote_AddItemStreamClient, error)
	// set Voteitem content
	SetItemContent(ctx context.Context, in *SetContentRequest, opts ...grpc.CallOption) (*SetContentResponse, error)
	// set Voteitem content via stream
	SetItemContentStream(ctx context.Context, opts ...grpc.CallOption) (Vote_SetItemContentStreamClient, error)
	// delete a Voteitem
	DeleteVoteItem(ctx context.Context, in *DeleteVoteItemRequest, opts ...grpc.CallOption) (*DeleteVoteItemResponse, error)
	// delete a Voteitem via stream
	DeleteVoteItemStream(ctx context.Context, opts ...grpc.CallOption) (Vote_DeleteVoteItemStreamClient, error)
	AddCommit(ctx context.Context, in *AddCommitRequest, opts ...grpc.CallOption) (*AddCommitResponse, error)
	DeleteCommit(ctx context.Context, in *DeleteCommitRequest, opts ...grpc.CallOption) (*DeleteCommitResponse, error)
}

type voteClient struct {
	cc grpc.ClientConnInterface
}

func NewVoteClient(cc grpc.ClientConnInterface) VoteClient {
	return &voteClient{cc}
}

func (c *voteClient) GetVoteById(ctx context.Context, in *GetVoteByIdRequest, opts ...grpc.CallOption) (*GetVoteResponse, error) {
	out := new(GetVoteResponse)
	err := c.cc.Invoke(ctx, "/vote.Vote/GetVoteById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voteClient) GetVoteByIdStream(ctx context.Context, opts ...grpc.CallOption) (Vote_GetVoteByIdStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Vote_ServiceDesc.Streams[0], "/vote.Vote/GetVoteByIdStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &voteGetVoteByIdStreamClient{stream}
	return x, nil
}

type Vote_GetVoteByIdStreamClient interface {
	Send(*GetVoteByIdRequest) error
	Recv() (*GetVoteResponse, error)
	grpc.ClientStream
}

type voteGetVoteByIdStreamClient struct {
	grpc.ClientStream
}

func (x *voteGetVoteByIdStreamClient) Send(m *GetVoteByIdRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *voteGetVoteByIdStreamClient) Recv() (*GetVoteResponse, error) {
	m := new(GetVoteResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *voteClient) AddVote(ctx context.Context, in *AddVoteRequest, opts ...grpc.CallOption) (*AddVoteResponse, error) {
	out := new(AddVoteResponse)
	err := c.cc.Invoke(ctx, "/vote.Vote/AddVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voteClient) AddVoteStream(ctx context.Context, opts ...grpc.CallOption) (Vote_AddVoteStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Vote_ServiceDesc.Streams[1], "/vote.Vote/AddVoteStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &voteAddVoteStreamClient{stream}
	return x, nil
}

type Vote_AddVoteStreamClient interface {
	Send(*AddVoteRequest) error
	Recv() (*AddVoteResponse, error)
	grpc.ClientStream
}

type voteAddVoteStreamClient struct {
	grpc.ClientStream
}

func (x *voteAddVoteStreamClient) Send(m *AddVoteRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *voteAddVoteStreamClient) Recv() (*AddVoteResponse, error) {
	m := new(AddVoteResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *voteClient) SetVoteTitle(ctx context.Context, in *SetVoteTitleRequest, opts ...grpc.CallOption) (*SetVoteTitleResponse, error) {
	out := new(SetVoteTitleResponse)
	err := c.cc.Invoke(ctx, "/vote.Vote/SetVoteTitle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voteClient) SetVoteTitleStream(ctx context.Context, in *SetVoteTitleRequest, opts ...grpc.CallOption) (Vote_SetVoteTitleStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Vote_ServiceDesc.Streams[2], "/vote.Vote/SetVoteTitleStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &voteSetVoteTitleStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Vote_SetVoteTitleStreamClient interface {
	Recv() (*SetVoteTitleResponse, error)
	grpc.ClientStream
}

type voteSetVoteTitleStreamClient struct {
	grpc.ClientStream
}

func (x *voteSetVoteTitleStreamClient) Recv() (*SetVoteTitleResponse, error) {
	m := new(SetVoteTitleResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *voteClient) DeleteVote(ctx context.Context, in *DeleteVoteRequest, opts ...grpc.CallOption) (*DeleteVoteResponse, error) {
	out := new(DeleteVoteResponse)
	err := c.cc.Invoke(ctx, "/vote.Vote/DeleteVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voteClient) DeleteVoteStream(ctx context.Context, opts ...grpc.CallOption) (Vote_DeleteVoteStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Vote_ServiceDesc.Streams[3], "/vote.Vote/DeleteVoteStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &voteDeleteVoteStreamClient{stream}
	return x, nil
}

type Vote_DeleteVoteStreamClient interface {
	Send(*DeleteVoteRequest) error
	Recv() (*DeleteVoteResponse, error)
	grpc.ClientStream
}

type voteDeleteVoteStreamClient struct {
	grpc.ClientStream
}

func (x *voteDeleteVoteStreamClient) Send(m *DeleteVoteRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *voteDeleteVoteStreamClient) Recv() (*DeleteVoteResponse, error) {
	m := new(DeleteVoteResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *voteClient) AddItem(ctx context.Context, in *AddItemRequest, opts ...grpc.CallOption) (*AddItemResponse, error) {
	out := new(AddItemResponse)
	err := c.cc.Invoke(ctx, "/vote.Vote/AddItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voteClient) AddItemStream(ctx context.Context, opts ...grpc.CallOption) (Vote_AddItemStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Vote_ServiceDesc.Streams[4], "/vote.Vote/AddItemStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &voteAddItemStreamClient{stream}
	return x, nil
}

type Vote_AddItemStreamClient interface {
	Send(*AddItemRequest) error
	Recv() (*AddItemResponse, error)
	grpc.ClientStream
}

type voteAddItemStreamClient struct {
	grpc.ClientStream
}

func (x *voteAddItemStreamClient) Send(m *AddItemRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *voteAddItemStreamClient) Recv() (*AddItemResponse, error) {
	m := new(AddItemResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *voteClient) SetItemContent(ctx context.Context, in *SetContentRequest, opts ...grpc.CallOption) (*SetContentResponse, error) {
	out := new(SetContentResponse)
	err := c.cc.Invoke(ctx, "/vote.Vote/SetItemContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voteClient) SetItemContentStream(ctx context.Context, opts ...grpc.CallOption) (Vote_SetItemContentStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Vote_ServiceDesc.Streams[5], "/vote.Vote/SetItemContentStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &voteSetItemContentStreamClient{stream}
	return x, nil
}

type Vote_SetItemContentStreamClient interface {
	Send(*SetContentRequest) error
	Recv() (*SetContentResponse, error)
	grpc.ClientStream
}

type voteSetItemContentStreamClient struct {
	grpc.ClientStream
}

func (x *voteSetItemContentStreamClient) Send(m *SetContentRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *voteSetItemContentStreamClient) Recv() (*SetContentResponse, error) {
	m := new(SetContentResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *voteClient) DeleteVoteItem(ctx context.Context, in *DeleteVoteItemRequest, opts ...grpc.CallOption) (*DeleteVoteItemResponse, error) {
	out := new(DeleteVoteItemResponse)
	err := c.cc.Invoke(ctx, "/vote.Vote/DeleteVoteItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voteClient) DeleteVoteItemStream(ctx context.Context, opts ...grpc.CallOption) (Vote_DeleteVoteItemStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Vote_ServiceDesc.Streams[6], "/vote.Vote/DeleteVoteItemStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &voteDeleteVoteItemStreamClient{stream}
	return x, nil
}

type Vote_DeleteVoteItemStreamClient interface {
	Send(*DeleteVoteItemRequest) error
	Recv() (*DeleteVoteItemResponse, error)
	grpc.ClientStream
}

type voteDeleteVoteItemStreamClient struct {
	grpc.ClientStream
}

func (x *voteDeleteVoteItemStreamClient) Send(m *DeleteVoteItemRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *voteDeleteVoteItemStreamClient) Recv() (*DeleteVoteItemResponse, error) {
	m := new(DeleteVoteItemResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *voteClient) AddCommit(ctx context.Context, in *AddCommitRequest, opts ...grpc.CallOption) (*AddCommitResponse, error) {
	out := new(AddCommitResponse)
	err := c.cc.Invoke(ctx, "/vote.Vote/AddCommit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *voteClient) DeleteCommit(ctx context.Context, in *DeleteCommitRequest, opts ...grpc.CallOption) (*DeleteCommitResponse, error) {
	out := new(DeleteCommitResponse)
	err := c.cc.Invoke(ctx, "/vote.Vote/DeleteCommit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VoteServer is the server API for Vote service.
// All implementations must embed UnimplementedVoteServer
// for forward compatibility
type VoteServer interface {
	// Get a vote by id
	GetVoteById(context.Context, *GetVoteByIdRequest) (*GetVoteResponse, error)
	// Get a vote by id via stream
	GetVoteByIdStream(Vote_GetVoteByIdStreamServer) error
	// add a Vote
	AddVote(context.Context, *AddVoteRequest) (*AddVoteResponse, error)
	// add a Vote via stream
	AddVoteStream(Vote_AddVoteStreamServer) error
	// set Vote title
	SetVoteTitle(context.Context, *SetVoteTitleRequest) (*SetVoteTitleResponse, error)
	// set Vote title via stream
	SetVoteTitleStream(*SetVoteTitleRequest, Vote_SetVoteTitleStreamServer) error
	// delete a Vote
	DeleteVote(context.Context, *DeleteVoteRequest) (*DeleteVoteResponse, error)
	// delete a Vote via stream
	DeleteVoteStream(Vote_DeleteVoteStreamServer) error
	// add  a  Voteitem
	AddItem(context.Context, *AddItemRequest) (*AddItemResponse, error)
	// add a Voteitem  via stream
	AddItemStream(Vote_AddItemStreamServer) error
	// set Voteitem content
	SetItemContent(context.Context, *SetContentRequest) (*SetContentResponse, error)
	// set Voteitem content via stream
	SetItemContentStream(Vote_SetItemContentStreamServer) error
	// delete a Voteitem
	DeleteVoteItem(context.Context, *DeleteVoteItemRequest) (*DeleteVoteItemResponse, error)
	// delete a Voteitem via stream
	DeleteVoteItemStream(Vote_DeleteVoteItemStreamServer) error
	AddCommit(context.Context, *AddCommitRequest) (*AddCommitResponse, error)
	DeleteCommit(context.Context, *DeleteCommitRequest) (*DeleteCommitResponse, error)
	mustEmbedUnimplementedVoteServer()
}

// UnimplementedVoteServer must be embedded to have forward compatible implementations.
type UnimplementedVoteServer struct {
}

func (UnimplementedVoteServer) GetVoteById(context.Context, *GetVoteByIdRequest) (*GetVoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVoteById not implemented")
}
func (UnimplementedVoteServer) GetVoteByIdStream(Vote_GetVoteByIdStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetVoteByIdStream not implemented")
}
func (UnimplementedVoteServer) AddVote(context.Context, *AddVoteRequest) (*AddVoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddVote not implemented")
}
func (UnimplementedVoteServer) AddVoteStream(Vote_AddVoteStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method AddVoteStream not implemented")
}
func (UnimplementedVoteServer) SetVoteTitle(context.Context, *SetVoteTitleRequest) (*SetVoteTitleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetVoteTitle not implemented")
}
func (UnimplementedVoteServer) SetVoteTitleStream(*SetVoteTitleRequest, Vote_SetVoteTitleStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SetVoteTitleStream not implemented")
}
func (UnimplementedVoteServer) DeleteVote(context.Context, *DeleteVoteRequest) (*DeleteVoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVote not implemented")
}
func (UnimplementedVoteServer) DeleteVoteStream(Vote_DeleteVoteStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method DeleteVoteStream not implemented")
}
func (UnimplementedVoteServer) AddItem(context.Context, *AddItemRequest) (*AddItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddItem not implemented")
}
func (UnimplementedVoteServer) AddItemStream(Vote_AddItemStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method AddItemStream not implemented")
}
func (UnimplementedVoteServer) SetItemContent(context.Context, *SetContentRequest) (*SetContentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetItemContent not implemented")
}
func (UnimplementedVoteServer) SetItemContentStream(Vote_SetItemContentStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SetItemContentStream not implemented")
}
func (UnimplementedVoteServer) DeleteVoteItem(context.Context, *DeleteVoteItemRequest) (*DeleteVoteItemResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVoteItem not implemented")
}
func (UnimplementedVoteServer) DeleteVoteItemStream(Vote_DeleteVoteItemStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method DeleteVoteItemStream not implemented")
}
func (UnimplementedVoteServer) AddCommit(context.Context, *AddCommitRequest) (*AddCommitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCommit not implemented")
}
func (UnimplementedVoteServer) DeleteCommit(context.Context, *DeleteCommitRequest) (*DeleteCommitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCommit not implemented")
}
func (UnimplementedVoteServer) mustEmbedUnimplementedVoteServer() {}

// UnsafeVoteServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VoteServer will
// result in compilation errors.
type UnsafeVoteServer interface {
	mustEmbedUnimplementedVoteServer()
}

func RegisterVoteServer(s grpc.ServiceRegistrar, srv VoteServer) {
	s.RegisterService(&Vote_ServiceDesc, srv)
}

func _Vote_GetVoteById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVoteByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoteServer).GetVoteById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vote.Vote/GetVoteById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoteServer).GetVoteById(ctx, req.(*GetVoteByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vote_GetVoteByIdStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(VoteServer).GetVoteByIdStream(&voteGetVoteByIdStreamServer{stream})
}

type Vote_GetVoteByIdStreamServer interface {
	Send(*GetVoteResponse) error
	Recv() (*GetVoteByIdRequest, error)
	grpc.ServerStream
}

type voteGetVoteByIdStreamServer struct {
	grpc.ServerStream
}

func (x *voteGetVoteByIdStreamServer) Send(m *GetVoteResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *voteGetVoteByIdStreamServer) Recv() (*GetVoteByIdRequest, error) {
	m := new(GetVoteByIdRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Vote_AddVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoteServer).AddVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vote.Vote/AddVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoteServer).AddVote(ctx, req.(*AddVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vote_AddVoteStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(VoteServer).AddVoteStream(&voteAddVoteStreamServer{stream})
}

type Vote_AddVoteStreamServer interface {
	Send(*AddVoteResponse) error
	Recv() (*AddVoteRequest, error)
	grpc.ServerStream
}

type voteAddVoteStreamServer struct {
	grpc.ServerStream
}

func (x *voteAddVoteStreamServer) Send(m *AddVoteResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *voteAddVoteStreamServer) Recv() (*AddVoteRequest, error) {
	m := new(AddVoteRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Vote_SetVoteTitle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetVoteTitleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoteServer).SetVoteTitle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vote.Vote/SetVoteTitle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoteServer).SetVoteTitle(ctx, req.(*SetVoteTitleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vote_SetVoteTitleStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SetVoteTitleRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VoteServer).SetVoteTitleStream(m, &voteSetVoteTitleStreamServer{stream})
}

type Vote_SetVoteTitleStreamServer interface {
	Send(*SetVoteTitleResponse) error
	grpc.ServerStream
}

type voteSetVoteTitleStreamServer struct {
	grpc.ServerStream
}

func (x *voteSetVoteTitleStreamServer) Send(m *SetVoteTitleResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Vote_DeleteVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoteServer).DeleteVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vote.Vote/DeleteVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoteServer).DeleteVote(ctx, req.(*DeleteVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vote_DeleteVoteStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(VoteServer).DeleteVoteStream(&voteDeleteVoteStreamServer{stream})
}

type Vote_DeleteVoteStreamServer interface {
	Send(*DeleteVoteResponse) error
	Recv() (*DeleteVoteRequest, error)
	grpc.ServerStream
}

type voteDeleteVoteStreamServer struct {
	grpc.ServerStream
}

func (x *voteDeleteVoteStreamServer) Send(m *DeleteVoteResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *voteDeleteVoteStreamServer) Recv() (*DeleteVoteRequest, error) {
	m := new(DeleteVoteRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Vote_AddItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoteServer).AddItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vote.Vote/AddItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoteServer).AddItem(ctx, req.(*AddItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vote_AddItemStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(VoteServer).AddItemStream(&voteAddItemStreamServer{stream})
}

type Vote_AddItemStreamServer interface {
	Send(*AddItemResponse) error
	Recv() (*AddItemRequest, error)
	grpc.ServerStream
}

type voteAddItemStreamServer struct {
	grpc.ServerStream
}

func (x *voteAddItemStreamServer) Send(m *AddItemResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *voteAddItemStreamServer) Recv() (*AddItemRequest, error) {
	m := new(AddItemRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Vote_SetItemContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetContentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoteServer).SetItemContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vote.Vote/SetItemContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoteServer).SetItemContent(ctx, req.(*SetContentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vote_SetItemContentStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(VoteServer).SetItemContentStream(&voteSetItemContentStreamServer{stream})
}

type Vote_SetItemContentStreamServer interface {
	Send(*SetContentResponse) error
	Recv() (*SetContentRequest, error)
	grpc.ServerStream
}

type voteSetItemContentStreamServer struct {
	grpc.ServerStream
}

func (x *voteSetItemContentStreamServer) Send(m *SetContentResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *voteSetItemContentStreamServer) Recv() (*SetContentRequest, error) {
	m := new(SetContentRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Vote_DeleteVoteItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVoteItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoteServer).DeleteVoteItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vote.Vote/DeleteVoteItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoteServer).DeleteVoteItem(ctx, req.(*DeleteVoteItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vote_DeleteVoteItemStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(VoteServer).DeleteVoteItemStream(&voteDeleteVoteItemStreamServer{stream})
}

type Vote_DeleteVoteItemStreamServer interface {
	Send(*DeleteVoteItemResponse) error
	Recv() (*DeleteVoteItemRequest, error)
	grpc.ServerStream
}

type voteDeleteVoteItemStreamServer struct {
	grpc.ServerStream
}

func (x *voteDeleteVoteItemStreamServer) Send(m *DeleteVoteItemResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *voteDeleteVoteItemStreamServer) Recv() (*DeleteVoteItemRequest, error) {
	m := new(DeleteVoteItemRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Vote_AddCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddCommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoteServer).AddCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vote.Vote/AddCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoteServer).AddCommit(ctx, req.(*AddCommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vote_DeleteCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VoteServer).DeleteCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vote.Vote/DeleteCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VoteServer).DeleteCommit(ctx, req.(*DeleteCommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Vote_ServiceDesc is the grpc.ServiceDesc for Vote service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Vote_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vote.Vote",
	HandlerType: (*VoteServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVoteById",
			Handler:    _Vote_GetVoteById_Handler,
		},
		{
			MethodName: "AddVote",
			Handler:    _Vote_AddVote_Handler,
		},
		{
			MethodName: "SetVoteTitle",
			Handler:    _Vote_SetVoteTitle_Handler,
		},
		{
			MethodName: "DeleteVote",
			Handler:    _Vote_DeleteVote_Handler,
		},
		{
			MethodName: "AddItem",
			Handler:    _Vote_AddItem_Handler,
		},
		{
			MethodName: "SetItemContent",
			Handler:    _Vote_SetItemContent_Handler,
		},
		{
			MethodName: "DeleteVoteItem",
			Handler:    _Vote_DeleteVoteItem_Handler,
		},
		{
			MethodName: "AddCommit",
			Handler:    _Vote_AddCommit_Handler,
		},
		{
			MethodName: "DeleteCommit",
			Handler:    _Vote_DeleteCommit_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetVoteByIdStream",
			Handler:       _Vote_GetVoteByIdStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "AddVoteStream",
			Handler:       _Vote_AddVoteStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SetVoteTitleStream",
			Handler:       _Vote_SetVoteTitleStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DeleteVoteStream",
			Handler:       _Vote_DeleteVoteStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "AddItemStream",
			Handler:       _Vote_AddItemStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SetItemContentStream",
			Handler:       _Vote_SetItemContentStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "DeleteVoteItemStream",
			Handler:       _Vote_DeleteVoteItemStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "vote_api.proto",
}
